
;; Function dcmp (dcmp.lto_priv.13, funcdef_no=8, decl_uid=2793, cgraph_uid=0, symbol_order=94)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)


dcmp

Dataflow summary:
def_info->table_size = 128, use_info->table_size = 0
;;  invalidated by call 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;;  hardware regs used 	 31 [sp]
;;  regular block artificial uses 	 29 [x29] 31 [sp]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp]
;;  exit block uses 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;;  regs ever live 	 0[x0] 1[x1] 2[x2] 16[x16] 17[x17] 29[x29] 30[x30] 31[sp] 32[v0] 33[v1] 66[cc]
;;  ref usage 	r0={8d,7u} r1={4d,3u} r2={5d,2u} r3={3d} r4={3d} r5={3d} r6={3d} r7={3d} r8={3d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={4d} r17={4d} r18={3d} r29={2d,10u} r30={3d,2u} r31={2d,16u} r32={4d,3u} r33={4d,3u} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={1d,1u} r66={4d,3u} 
;;    total ref usage 180{130d,50u,0e} in 38{36 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d7(0){ }d11(1){ }d16(2){ }d19(3){ }d22(4){ }d25(5){ }d28(6){ }d31(7){ }d34(8){ }d59(18){ }d60(29){ }d63(30){ }d64(31){ }d68(32){ }d72(33){ }d75(34){ }d78(35){ }d81(36){ }d84(37){ }d87(38){ }d90(39){ }d123(64){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp]
;; live  in  	
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp]
;; live  kill	
;; lr  out 	 0 [x0] 1 [x1] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 1 [x1] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

( 0 )->[2]->( 6 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 0 [x0] 1 [x1] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 0 [x0] 1 [x1] 29 [x29] 31 [sp]
;; lr  def 	 32 [v0] 33 [v1] 66 [cc]
;; live  in  	 0 [x0] 1 [x1] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	 32 [v0] 33 [v1] 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; live  out 	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]

( 2 )->[3]->( 7 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; lr  use 	 29 [x29] 31 [sp] 66 [cc]
;; lr  def 	
;; live  in  	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; live  out 	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]

( 3 )->[4]->( 8 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp] 32 [v0] 33 [v1]
;; lr  def 	 0 [x0] 66 [cc]
;; live  in  	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; live  gen 	 0 [x0] 66 [cc]
;; live  kill	
;; lr  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

( 4 )->[5]->( )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp]
;; lr  use 	 29 [x29] 30 [x30] 31 [sp]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 30 [x30] 31 [sp]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 29 [x29] 31 [sp]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp]
;; live  out 	 31 [sp]

( 2 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	 0 [x0]
;; live  kill	
;; lr  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

( 3 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	 0 [x0]
;; live  kill	
;; lr  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

( 7 4 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	
;; live  in  	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

( 8 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(29){ }u-1(30){ }u-1(31){ }u-1(64){ }}
;; lr  in  	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  def 	
;; live  in  	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 18 to worklist
  Adding insn 21 to worklist
  Adding insn 41 to worklist
  Adding insn 38 to worklist
  Adding insn 90 to worklist
  Adding insn 88 to worklist
  Adding insn 95 to worklist
  Adding insn 94 to worklist
  Adding insn 50 to worklist
  Adding insn 97 to worklist
Finished finding needed instructions:
processing block 6 lr out =  0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
  Adding insn 5 to worklist
processing block 8 lr out =  0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
processing block 7 lr out =  0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
  Adding insn 6 to worklist
processing block 5 lr out =  31 [sp]
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 31 to worklist
  Adding insn 33 to worklist
  Adding insn 89 to worklist
processing block 4 lr out =  0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
  Adding insn 7 to worklist
  Adding insn 20 to worklist
processing block 3 lr out =  29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
processing block 2 lr out =  29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
  Adding insn 14 to worklist
  Adding insn 12 to worklist
  Adding insn 10 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
;;   ======================================================
;;   -- basic block 2 from 62 to 15 -- after reload
;;   ======================================================

;;	  0--> b  0: i  62 loc x0                                  :nothing
;;	  0--> b  0: i  63 loc x1                                  :nothing
;;	  0--> b  0: i  10 v1=[x0]                                 :(cortex_a53_slot_any+cortex_a53_ls_agen),cortex_a53_load
;;	  0--> b  0: i  11 loc v1                                  :nothing
;;	  0--> b  0: i  12 v0=[x1]                                 :(cortex_a53_slot_any+cortex_a53_ls_agen),cortex_a53_load
;;	  0--> b  0: i  13 loc v0                                  :nothing
;;	  1--> b  0: i  14 cc=cmp(v1,v0)                           :cortex_a53_slot_any,cortex_a53_fp_alu
;;	  1--> b  0: i  15 pc={(cc>0)?L53:pc}                      :cortex_a53_slot_any,cortex_a53_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 62
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 18 to 18 -- after reload
;;   ======================================================

;;	  0--> b  0: i  18 pc={(cc<0)?L57:pc}                      :cortex_a53_slot_any,cortex_a53_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 18
;;   new tail = 18

;;   ======================================================
;;   -- basic block 4 from 20 to 21 -- after reload
;;   ======================================================

;;	  0--> b  0: i  20 cc=cmp(v1,v0)                           :cortex_a53_slot_any,cortex_a53_fp_alu
;;	  0--> b  0: i   7 x0=0                                    :cortex_a53_slot_any
;;	  1--> b  0: i  21 pc={(cc==0)?L99:pc}                     :cortex_a53_slot_any,cortex_a53_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 20
;;   new tail = 21

;;   ======================================================
;;   -- basic block 5 from 88 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  23 loc D#6                                 :nothing
;;	  0--> b  0: i  24 loc D#7                                 :nothing
;;	  0--> b  0: i  25 loc clobber                             :nothing
;;	  0--> b  0: i  26 loc D#4                                 :nothing
;;	  0--> b  0: i  27 loc clobber                             :nothing
;;	  0--> b  0: i  28 loc D#5                                 :nothing
;;	  0--> b  0: i  29 loc [`stderr']                          :nothing
;;	  0--> b  0: i  30 loc `*.LC0'                             :nothing
;;	  0--> b  0: i  88 {sp=sp-0x10;[sp-0x10]=x29;[sp-0x8]=x30;}:(cortex_a53_slot_any+cortex_a53_ls_agen),cortex_a53_store
;;	  0--> b  0: i  89 x29=sp+0                                :cortex_a53_slot_any
;;	  1--> b  0: i  90 [scratch]=unspec[sp,x29] 37             :nothing
;;	  1--> b  0: i  33 x0=high(`stderr')                       :cortex_a53_slot_any
;;	  2--> b  0: i  31 x2=high(`*.LC0')                        :cortex_a53_slot_any
;;	  2--> b  0: i  35 x2=x2+low(`*.LC0')                      :cortex_a53_slot_any
;;	  3--> b  0: i  36 x1=0x1                                  :cortex_a53_slot_any
;;	  3--> b  0: i  37 x0=[x0+low(`stderr')]                   :(cortex_a53_slot_any+cortex_a53_ls_agen),cortex_a53_load
;;	  4--> b  0: i  38 {x0=call [`__fprintf_chk'];use 0;clobber x30;}:cortex_a53_slot_any,cortex_a53_branch
;;	  4--> b  0: i  39 loc clobber                             :nothing
;;	  4--> b  0: i  40 loc clobber                             :nothing
;;	  4--> b  0: i  41 {call [`abort'];use 0;clobber x30;}     :cortex_a53_slot_any,cortex_a53_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 23
;;   new tail = 41

;;   ======================================================
;;   -- basic block 6 from 5 to 95 -- after reload
;;   ======================================================

;;	  0--> b  0: i   5 x0=0x1                                  :cortex_a53_slot_any
;;	  0--> b  0: i  94 use x0                                  :nothing
;;	  0--> b  0: i  95 simple_return                           :cortex_a53_slot_any,cortex_a53_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 5
;;   new tail = 95

;;   ======================================================
;;   -- basic block 7 from 6 to 50 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 x0=0xffffffffffffffff                   :cortex_a53_slot_any
;;	  0--> b  0: i  50 use x0                                  :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 6
;;   new tail = 50

;;   ======================================================
;;   -- basic block 8 from 97 to 97 -- after reload
;;   ======================================================

;;	  0--> b  0: i  97 simple_return                           :cortex_a53_slot_any,cortex_a53_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 97
;;   new tail = 97



starting the processing of deferred insns
ending the processing of deferred insns


dcmp

Dataflow summary:
;;  invalidated by call 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;;  hardware regs used 	 31 [sp]
;;  regular block artificial uses 	 29 [x29] 31 [sp]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp]
;;  exit block uses 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;;  regs ever live 	 0[x0] 1[x1] 2[x2] 16[x16] 17[x17] 29[x29] 30[x30] 31[sp] 32[v0] 33[v1] 66[cc]
;;  ref usage 	r0={8d,7u} r1={4d,3u} r2={5d,2u} r3={3d} r4={3d} r5={3d} r6={3d} r7={3d} r8={3d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={4d} r17={4d} r18={3d} r29={2d,10u} r30={3d,2u} r31={2d,16u} r32={4d,3u} r33={4d,3u} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={1d,1u} r66={4d,3u} 
;;    total ref usage 180{130d,50u,0e} in 38{36 regular + 2 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 0 [x0] 1 [x1] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 0 [x0] 1 [x1] 29 [x29] 31 [sp]
;; lr  def 	 32 [v0] 33 [v1] 66 [cc]
;; live  in  	 0 [x0] 1 [x1] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	 32 [v0] 33 [v1] 66 [cc]
;; live  kill	
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 8 3 2 NOTE_INSN_DELETED)
(note 3 2 4 2 NOTE_INSN_DELETED)
(note 4 3 62 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 62 4 63 2 (var_location:DI D#6 (reg:DI 0 x0 [ a ])) -1
     (nil))
(debug_insn 63 62 10 2 (var_location:DI D#7 (reg:DI 1 x1 [ b ])) -1
     (nil))
(insn:TI 10 63 11 2 (set (reg/v:DF 33 v1 [orig:74 da ] [74])
        (mem:DF (reg:DI 0 x0 [ a ]) [1 MEM[(const double *)a_3(D)]+0 S8 A64])) graph500.c:239 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0 [ a ])
        (nil)))
(debug_insn 11 10 12 2 (var_location:DF da (reg/v:DF 33 v1 [orig:74 da ] [74])) graph500.c:239 -1
     (nil))
(insn 12 11 13 2 (set (reg/v:DF 32 v0 [orig:75 db ] [75])
        (mem:DF (reg:DI 1 x1 [ b ]) [1 MEM[(const double *)b_5(D)]+0 S8 A64])) graph500.c:240 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DI 1 x1 [ b ])
        (nil)))
(debug_insn 13 12 14 2 (var_location:DF db (reg/v:DF 32 v0 [orig:75 db ] [75])) graph500.c:240 -1
     (nil))
(insn:TI 14 13 15 2 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg/v:DF 33 v1 [orig:74 da ] [74])
            (reg/v:DF 32 v0 [orig:75 db ] [75]))) graph500.c:241 395 {*cmpedf}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (gt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 53)
            (pc))) graph500.c:241 7 {condjump}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 53)
;;  succ:       6 [39.0%] 
;;              3 [61.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; live  out 	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]

;; basic block 3, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL)
;;  pred:       2 [61.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; lr  use 	 29 [x29] 31 [sp] 66 [cc]
;; lr  def 	
;; live  in  	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; live  gen 	
;; live  kill	
(note 16 15 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 18 16 19 3 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) graph500.c:242 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 400 (nil)))
 -> 57)
;;  succ:       7 [4.0%] 
;;              4 [96.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; live  out 	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]

;; basic block 4, loop depth 0, count 0, freq 5856, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL)
;;  pred:       3 [96.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp] 32 [v0] 33 [v1]
;; lr  def 	 0 [x0] 66 [cc]
;; live  in  	 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; live  gen 	 0 [x0] 66 [cc]
;; live  kill	
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 20 19 7 4 (set (reg:CCFP 66 cc)
        (compare:CCFP (reg/v:DF 33 v1 [orig:74 da ] [74])
            (reg/v:DF 32 v0 [orig:75 db ] [75]))) graph500.c:243 393 {*cmpdf}
     (expr_list:REG_DEAD (reg/v:DF 33 v1 [orig:74 da ] [74])
        (expr_list:REG_DEAD (reg/v:DF 32 v0 [orig:75 db ] [75])
            (nil))))
(insn 7 20 21 4 (set (reg:SI 0 x0 [orig:73 D.3115 ] [73])
        (const_int 0 [0])) graph500.c:243 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn:TI 21 7 22 4 (set (pc)
        (if_then_else (eq (reg:CCFP 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 99)
            (pc))) graph500.c:243 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFP 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 99)
;;  succ:       8 [100.0%] 
;;              5 [0.0%]  (FALLTHRU)
;; lr  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

;; basic block 5, loop depth 0, count 0, freq 2
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [0.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp]
;; lr  use 	 29 [x29] 30 [x30] 31 [sp]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 30 [x30] 31 [sp]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 29 [x29] 31 [sp]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 22 21 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 32 22 23 5 NOTE_INSN_DELETED)
(debug_insn 23 32 24 5 (var_location:DI D#2 (debug_expr:DI D#6)) -1
     (nil))
(debug_insn 24 23 25 5 (var_location:DI D#3 (debug_expr:DI D#7)) -1
     (nil))
(debug_insn 25 24 26 5 (var_location:DI D#4 (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 26 25 27 5 (var_location:DI b (debug_expr:DI D#4)) -1
     (nil))
(debug_insn 27 26 28 5 (var_location:DI D#5 (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 28 27 29 5 (var_location:DI a (debug_expr:DI D#5)) -1
     (nil))
(debug_insn 29 28 30 5 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:244 -1
     (nil))
(debug_insn 30 29 88 5 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)) graph500.c:244 -1
     (nil))
(insn/f:TI 88 30 89 5 (parallel [
            (set (reg/f:DI 31 sp)
                (plus:DI (reg/f:DI 31 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (set/f (mem:DI (plus:DI (reg/f:DI 31 sp)
                        (const_int -16 [0xfffffffffffffff0])) [0  S8 A8])
                (reg/f:DI 29 x29))
            (set/f (mem:DI (plus:DI (reg/f:DI 31 sp)
                        (const_int -8 [0xfffffffffffffff8])) [0  S8 A8])
                (reg:DI 30 x30))
        ]) graph500.c:238 75 {storewb_pairdi_di}
     (expr_list:REG_DEAD (reg:DI 30 x30)
        (nil)))
(insn/f 89 88 90 5 (set (reg/f:DI 29 x29)
        (plus:DI (reg/f:DI 31 sp)
            (const_int 0 [0]))) graph500.c:238 95 {*adddi3_aarch64}
     (nil))
(insn:TI 90 89 91 5 (set (mem:BLK (scratch) [0  A8])
        (unspec:BLK [
                (reg/f:DI 31 sp)
                (reg/f:DI 29 x29)
            ] UNSPEC_PRLG_STK)) graph500.c:238 862 {stack_tie}
     (nil))
(note 91 90 33 5 NOTE_INSN_PROLOGUE_END)
(insn 33 91 31 5 (set (reg/f:DI 0 x0 [83])
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:244 48 {*movdi_aarch64}
     (expr_list:REG_EQUIV (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (nil)))
(insn:TI 31 33 35 5 (set (reg/f:DI 2 x2 [81])
        (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_EQUIV (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))
        (nil)))
(insn 35 31 36 5 (set (reg:DI 2 x2)
        (lo_sum:DI (reg/f:DI 2 x2 [81])
            (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)
        (nil)))
(insn:TI 36 35 37 5 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 37 36 38 5 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 0 x0 [83])
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
        (nil)))
(call_insn:TI 38 37 39 5 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 39 38 40 5 (var_location:DI __stream (clobber (const_int 0 [0]))) graph500.c:244 -1
     (nil))
(debug_insn 40 39 41 5 (var_location:DI __fmt (clobber (const_int 0 [0]))) graph500.c:244 -1
     (nil))
(call_insn 41 40 42 5 (parallel [
            (call (mem:DI (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>) [0 __builtin_abort S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:245 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
;;  succ:      
;; lr  out 	 31 [sp]
;; live  out 	 31 [sp]

(barrier 42 41 53)
;; basic block 6, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL)
;;  pred:       2 [39.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	 0 [x0]
;; live  kill	
(code_label 53 42 52 6 3 "" [1 uses])
(note 52 53 5 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 5 52 94 6 (set (reg:SI 0 x0 [orig:73 D.3115 ] [73])
        (const_int 1 [0x1])) graph500.c:241 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 94 5 95 6 (use (reg/i:SI 0 x0)) -1
     (nil))
(jump_insn 95 94 85 6 (simple_return) 21 {simple_return}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

(barrier 85 95 57)
;; basic block 7, loop depth 0, count 0, freq 244, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL)
;;  pred:       3 [4.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	 0 [x0]
;; live  kill	
(code_label 57 85 56 7 4 "" [1 uses])
(note 56 57 6 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 6 56 50 7 (set (reg:SI 0 x0 [orig:73 D.3115 ] [73])
        (const_int -1 [0xffffffffffffffff])) graph500.c:242 47 {*movsi_aarch64}
     (nil))
(insn 50 6 99 7 (use (reg/i:SI 0 x0)) graph500.c:247 -1
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

;; basic block 8, loop depth 0, count 0, freq 9998, maybe hot
;; Invalid sum of incoming frequencies 6098, should be 9998
;;  prev block 7, next block 1, flags: (REACHABLE, RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	
;; live  in  	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  gen 	
;; live  kill	
(code_label 99 50 98 8 7 "" [1 uses])
(note 98 99 97 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 97 98 96 8 (simple_return) graph500.c:247 21 {simple_return}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 30 [x30] 31 [sp] 64 [sfp]

(barrier 96 97 86)
(note 86 96 87 NOTE_INSN_DELETED)
(note 87 86 0 NOTE_INSN_DELETED)
