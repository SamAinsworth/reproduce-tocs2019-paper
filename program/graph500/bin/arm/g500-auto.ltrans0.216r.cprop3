
;; Function dcmp (dcmp.lto_priv.13, funcdef_no=8, decl_uid=2793, cgraph_uid=0, symbol_order=94)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
(lo_sum:DI (reg/f:DI 81)
    (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))

Cold cost: 4 (final)
(set (reg/f:DI 80)
    (lo_sum:DI (reg/f:DI 81)
        (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 83)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 83)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
Found 0 implicit sets
SET hash table (17 buckets, 6 entries)
Index 0 (hash value 5)
  (reg:SI 73 [ D.3115 ]) := (const_int 0 [0])
Index 1 (hash value 15)
  (reg/f:DI 83) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 2 (hash value 12)
  (reg/f:DI 80) := (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)
Index 3 (hash value 13)
  (reg/f:DI 81) := (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))
Index 4 (hash value 5)
  (reg:SI 73 [ D.3115 ]) := (const_int 1 [0x1])
Index 5 (hash value 5)
  (reg:SI 73 [ D.3115 ]) := (const_int -1 [0xffffffffffffffff])

CPROP of dcmp, 9 basic blocks, 672 bytes needed, 0 local const props, 0 local copy props, 0 global const props, 0 global copy props

starting the processing of deferred insns
ending the processing of deferred insns


dcmp

Dataflow summary:
;;  invalidated by call 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;;  hardware regs used 	 31 [sp] 64 [sfp] 65 [ap]
;;  regular block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap]
;;  exit block uses 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;;  regs ever live 	 0[x0] 1[x1] 2[x2] 16[x16] 17[x17] 30[x30] 31[sp] 66[cc]
;;  ref usage 	r0={5d,5u} r1={4d,3u} r2={4d,1u} r3={3d} r4={3d} r5={3d} r6={3d} r7={3d} r8={3d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={4d} r17={4d} r18={3d} r29={1d,8u} r30={3d} r31={1d,10u} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={1d,8u} r65={1d,7u} r66={5d,3u} r73={3d,1u} r74={1d,4u} r75={1d,4u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r83={1d,1u} 
;;    total ref usage 193{134d,59u,0e} in 37{35 regular + 2 call} insns.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(29){ }u1(31){ }u2(64){ }u3(65){ }}
;; lr  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 66 [cc] 74 75 78 79
;; live  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 66 [cc] 74 75 78 79
;; live  kill	
(note 8 0 62 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(debug_insn 62 8 2 2 (var_location:DI D#6 (reg:DI 0 x0 [ a ])) -1
     (nil))
(insn 2 62 63 2 (set (reg/v/f:DI 78 [ a ])
        (reg:DI 0 x0 [ a ])) graph500.c:238 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0 [ a ])
        (nil)))
(debug_insn 63 2 3 2 (var_location:DI D#7 (reg:DI 1 x1 [ b ])) -1
     (nil))
(insn 3 63 4 2 (set (reg/v/f:DI 79 [ b ])
        (reg:DI 1 x1 [ b ])) graph500.c:238 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1 x1 [ b ])
        (nil)))
(note 4 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 4 11 2 (set (reg/v:DF 74 [ da ])
        (mem:DF (reg/v/f:DI 78 [ a ]) [1 MEM[(const double *)a_3(D)]+0 S8 A64])) graph500.c:239 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/v/f:DI 78 [ a ])
        (nil)))
(debug_insn 11 10 12 2 (var_location:DF da (reg/v:DF 74 [ da ])) graph500.c:239 -1
     (nil))
(insn 12 11 13 2 (set (reg/v:DF 75 [ db ])
        (mem:DF (reg/v/f:DI 79 [ b ]) [1 MEM[(const double *)b_5(D)]+0 S8 A64])) graph500.c:240 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/v/f:DI 79 [ b ])
        (nil)))
(debug_insn 13 12 14 2 (var_location:DF db (reg/v:DF 75 [ db ])) graph500.c:240 -1
     (nil))
(insn 14 13 15 2 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg/v:DF 74 [ da ])
            (reg/v:DF 75 [ db ]))) graph500.c:241 395 {*cmpedf}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (gt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 53)
            (pc))) graph500.c:241 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 3900 (nil)))
 -> 53)
;;  succ:       6 [39.0%] 
;;              3 [61.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75

;; basic block 3, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [61.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(29){ }u16(31){ }u17(64){ }u18(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75
;; live  gen 	 66 [cc]
;; live  kill	
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg/v:DF 74 [ da ])
            (reg/v:DF 75 [ db ]))) graph500.c:242 395 {*cmpedf}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) graph500.c:242 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 400 (nil)))
 -> 57)
;;  succ:       7 [4.0%] 
;;              4 [96.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75

;; basic block 4, loop depth 0, count 0, freq 5856, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [96.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u22(29){ }u23(31){ }u24(64){ }u25(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75
;; lr  def 	 66 [cc] 73
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 74 75
;; live  gen 	 66 [cc] 73
;; live  kill	
(note 19 18 7 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 7 19 20 4 (set (reg:SI 73 [ D.3115 ])
        (const_int 0 [0])) graph500.c:243 47 {*movsi_aarch64}
     (nil))
(insn 20 7 21 4 (set (reg:CCFP 66 cc)
        (compare:CCFP (reg/v:DF 74 [ da ])
            (reg/v:DF 75 [ db ]))) graph500.c:243 393 {*cmpdf}
     (expr_list:REG_DEAD (reg/v:DF 75 [ db ])
        (expr_list:REG_DEAD (reg/v:DF 74 [ da ])
            (nil))))
(jump_insn 21 20 22 4 (set (pc)
        (if_then_else (eq (reg:CCFP 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 43)
            (pc))) graph500.c:243 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFP 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 43)
;;  succ:       8 [100.0%] 
;;              5 [0.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73

;; basic block 5, loop depth 0, count 0, freq 2
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [0.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u29(29){ }u30(31){ }u31(64){ }u32(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 80 81 83
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 80 81 83
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 23 22 24 5 (var_location:DI D#2 (debug_expr:DI D#6)) -1
     (nil))
(debug_insn 24 23 25 5 (var_location:DI D#3 (debug_expr:DI D#7)) -1
     (nil))
(debug_insn 25 24 26 5 (var_location:DI D#4 (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 26 25 27 5 (var_location:DI b (debug_expr:DI D#4)) -1
     (nil))
(debug_insn 27 26 28 5 (var_location:DI D#5 (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 28 27 29 5 (var_location:DI a (debug_expr:DI D#5)) -1
     (nil))
(debug_insn 29 28 30 5 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:244 -1
     (nil))
(debug_insn 30 29 31 5 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)) graph500.c:244 -1
     (nil))
(insn 31 30 32 5 (set (reg/f:DI 81)
        (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 32 31 33 5 (set (reg/f:DI 80)
        (lo_sum:DI (reg/f:DI 81)
            (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 81)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)
            (nil))))
(insn 33 32 35 5 (set (reg/f:DI 83)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:244 48 {*movdi_aarch64}
     (nil))
(insn 35 33 36 5 (set (reg:DI 2 x2)
        (reg/f:DI 80)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 80)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)
            (nil))))
(insn 36 35 37 5 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 37 36 38 5 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 83)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
        (expr_list:REG_DEAD (reg/f:DI 82)
            (nil))))
(call_insn 38 37 39 5 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 39 38 40 5 (var_location:DI __stream (clobber (const_int 0 [0]))) graph500.c:244 -1
     (nil))
(debug_insn 40 39 41 5 (var_location:DI __fmt (clobber (const_int 0 [0]))) graph500.c:244 -1
     (nil))
(call_insn 41 40 53 5 (parallel [
            (call (mem:DI (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>) [0 __builtin_abort S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:245 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 6, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [39.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u42(29){ }u43(31){ }u44(64){ }u45(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 73
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 73
;; live  kill	
(code_label 53 41 52 6 3 "" [1 uses])
(note 52 53 5 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 5 52 57 6 (set (reg:SI 73 [ D.3115 ])
        (const_int 1 [0x1])) graph500.c:241 47 {*movsi_aarch64}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73

;; basic block 7, loop depth 0, count 0, freq 244, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [4.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u46(29){ }u47(31){ }u48(64){ }u49(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 73
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 73
;; live  kill	
(code_label 57 5 56 7 4 "" [1 uses])
(note 56 57 6 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 6 56 43 7 (set (reg:SI 73 [ D.3115 ])
        (const_int -1 [0xffffffffffffffff])) graph500.c:242 47 {*movsi_aarch64}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73

;; basic block 8, loop depth 0, count 0, freq 9998, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [100.0%] 
;;              6 [100.0%]  (FALLTHRU)
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u54(29){ }u55(31){ }u56(64){ }u57(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 73
;; live  gen 	 0 [x0]
;; live  kill	
(code_label 43 6 44 8 2 "" [1 uses])
(note 44 43 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 44 50 8 (set (reg/i:SI 0 x0)
        (reg:SI 73 [ D.3115 ])) graph500.c:247 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 73 [ D.3115 ])
        (nil)))
(insn 50 49 0 8 (use (reg/i:SI 0 x0)) graph500.c:247 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]


;; Function main (main, funcdef_no=10, decl_uid=2796, cgraph_uid=2, symbol_order=92) (executed once)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 292 n_edges 426 count 571 (    2)


main

Dataflow summary:
def_info->table_size = 1887, use_info->table_size = 4121
;;  invalidated by call 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;;  hardware regs used 	 31 [sp] 64 [sfp] 65 [ap]
;;  regular block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap]
;;  exit block uses 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;;  regs ever live 	 0[x0] 1[x1] 2[x2] 3[x3] 4[x4] 5[x5] 16[x16] 17[x17] 30[x30] 31[sp] 32[v0] 33[v1] 34[v2] 35[v3] 36[v4] 37[v5] 66[cc]
;;  ref usage 	r0={240d,136u} r1={205d,70u} r2={193d,57u} r3={160d,24u} r4={138d,2u} r5={137d,1u} r6={136d} r7={136d} r8={136d} r9={135d} r10={135d} r11={135d} r12={135d} r13={135d} r14={135d} r15={135d} r16={270d} r17={270d} r18={136d} r29={1d,291u} r30={136d} r31={1d,426u} r32={149d,33u} r33={146d,10u} r34={140d,4u} r35={139d,3u} r36={137d,1u} r37={137d,1u} r38={136d} r39={136d} r48={135d} r49={135d} r50={135d} r51={135d} r52={135d} r53={135d} r54={135d} r55={135d} r56={135d} r57={135d} r58={135d} r59={135d} r60={135d} r61={135d} r62={135d} r63={135d} r64={1d,363u,9e} r65={1d,290u} r66={310d,169u} r240={3d,1u} r243={1d,3u} r244={1d,2u} r245={1d,11u} r246={1d,3u} r259={1d,1u} r261={1d,5u,1e} r262={1d,7u} r263={1d,1u} r266={2d,4u} r269={1d,4u} r283={1d,3u} r285={1d,1u} r286={1d,1u} r287={2d,6u} r289={1d,1u} r290={1d,4u} r291={1d,6u} r293={1d,1u} r294={1d,3u} r301={1d,2u} r303={1d,1u} r309={1d,2u} r311={1d,1u} r317={1d,2u} r319={1d,1u} r320={5d,14u} r328={5d,11u} r329={1d,2u} r331={1d,1u} r339={1d,2u} r341={1d,1u} r349={1d,2u} r351={1d,1u} r360={20d,16u} r386={1d,2u} r397={1d,2u,1e} r400={1d,2u} r406={1d,2u} r408={1d,2u} r410={1d,2u} r414={1d,2u} r416={2d,9u} r421={1d,4u} r424={1d,4u} r425={1d,2u} r427={1d,2u} r430={1d,2u} r431={1d,3u} r432={1d,2u} r433={1d,3u} r434={1d,2u} r435={2d,7u} r436={2d,9u} r438={1d,6u} r441={1d,6u} r442={4d,8u} r443={3d,9u} r444={1d,2u} r447={1d,3u} r456={2d,2u} r457={1d,4u} r460={2d,6u} r461={2d,2u} r463={2d,3u,2e} r464={2d,7u,1e} r468={4d,8u,2e} r469={3d,10u,3e} r473={2d,4u,1e} r476={2d,7u,2e} r478={1d,3u} r480={1d,3u} r482={1d,1u} r484={1d,1u} r485={1d,3u} r487={1d,1u} r489={1d,1u} r490={1d,3u} r492={1d,1u} r494={1d,1u} r496={1d,5u} r499={1d,3u} r501={1d,1u} r503={1d,1u} r504={1d,3u} r506={1d,1u} r508={1d,1u} r509={1d,3u} r511={1d,1u} r513={1d,1u} r515={1d,3u} r519={1d,2u} r520={1d,4u} r521={1d,4u} r523={1d,3u} r525={1d,1u} r527={1d,1u} r528={1d,3u} r530={1d,1u} r532={1d,1u} r533={1d,3u} r535={1d,1u} r537={1d,1u} r539={1d,4u} r540={1d,5u} r542={1d,4u} r544={1d,3u} r546={1d,1u} r548={1d,1u} r549={1d,3u} r551={1d,1u} r553={1d,1u} r554={1d,3u} r556={1d,1u} r558={1d,1u} r560={1d,3u} r566={1d,2u} r567={1d,1u} r571={1d,3u} r572={1d,5u} r575={2d,5u} r576={2d,3u} r578={2d,4u} r581={2d,4u} r582={1d,2u} r583={1d,2u} r590={1d,1u} r592={2d,4u} r596={2d,8u} r599={1d,2u} r600={1d,3u} r603={1d,3u} r604={1d,1u} r606={1d,4u} r608={1d,1u} r609={2d,8u} r610={4d,6u} r611={1d,2u} r613={1d,4u} r618={1d,3u} r623={1d,12u} r624={1d,12u} r625={1d,2u} r626={1d,1u} r638={1d,2u} r640={1d,2u} r643={1d,6u,1e} r646={1d,2u} r647={1d,17u} r653={1d,2u} r659={1d,1u} r666={1d,4u} r668={1d,15u} r672={2d,4u} r674={1d,8u} r675={1d,9u} r679={1d,2u} r688={1d,4u} r690={1d,2u} r692={1d,4u} r694={1d,2u} r695={4d,8u} r708={2d,4u} r710={1d,3u} r712={3d,3u} r714={4d,8u,2e} r715={15d,32u} r716={7d,2u} r720={1d,1u} r727={1d,2u} r731={1d,2u} r732={1d,2u} r733={2d,5u} r734={1d,5u} r735={1d,2u} r737={1d,2u} r738={2d,4u} r739={1d,3u} r741={1d,2u} r742={2d,8u} r745={2d,11u} r746={1d,14u} r747={3d,7u} r750={4d,13u,3e} r751={3d,11u,3e} r752={1d,3u} r753={1d,2u} r754={1d,2u} r763={1d,2u} r770={2d,2u} r775={2d,10u,2e} r776={2d,3u} r777={2d,6u} r782={1d,1u} r785={2d,6u} r788={2d,7u} r789={2d,9u,2e} r790={2d,8u,2e} r791={2d,4u} r795={1d,1u} r799={1d,3u} r800={1d,1u} r805={2d,1u} r806={5d,6u} r809={2d,4u} r811={1d,8u} r826={4d,8u} r828={3d,1u} r829={5d,1u} r830={1d,2u} r831={3d,2u} r837={1d,3u} r838={1d,2u} r839={1d,1u} r840={1d,1u} r842={1d,1u} r843={1d,1u} r844={1d,2u} r845={1d} r846={1d} r847={1d,1u} r848={1d,1u} r849={1d,1u} r850={1d,1u} r851={1d,1u} r852={1d,2u} r854={1d,1u} r855={1d,1u} r856={1d,1u} r857={1d,1u} r858={1d,1u} r859={1d,1u} r860={1d,1u} r861={1d,1u} r862={1d,1u} r863={1d,1u} r864={1d,1u} r865={1d,2u} r866={1d,1u} r867={1d,1u} r868={1d,1u} r869={1d,1u} r870={1d,1u} r872={1d,1u} r873={1d,1u} r874={1d,2u} r875={1d,1u} r876={1d,1u} r877={1d,1u} r878={1d,1u} r879={1d,1u} r881={1d,2u} r882={1d,1u} r883={1d,1u} r885={1d,1u} r888={1d,1u} r889={1d,1u} r890={1d,1u} r892={1d,1u} r894={1d,1u} r895={1d,1u} r896={1d,1u} r897={1d,1u} r899={1d,2u} r900={1d,1u} r901={1d,1u} r903={1d,1u} r906={1d,1u} r907={1d,1u} r908={1d,1u} r910={1d,1u} r912={1d,1u} r913={1d,1u} r914={1d,1u} r915={1d,1u} r917={1d,1u} r919={1d,1u} r921={1d,1u} r922={1d,1u} r923={1d,1u} r924={1d,1u} r926={1d,1u} r927={1d,1u} r929={1d,1u} r930={1d,1u} r931={1d,1u} r933={1d,1u} r935={1d,1u} r936={1d,1u} r937={1d,1u} r938={1d,1u} r940={1d,1u} r942={1d,1u} r944={1d,1u} r945={1d,1u} r946={1d,1u} r947={1d,1u} r949={1d,1u} r950={1d,1u} r952={1d,1u} r953={1d,1u} r954={1d,1u} r956={1d,1u} r958={1d,1u} r959={1d,1u} r960={1d,1u} r961={1d,1u} r963={1d,1u} r965={1d,1u} r967={1d,1u} r968={1d,1u} r969={1d,1u} r970={1d,1u} r972={1d,1u} r973={1d,1u} r975={1d,1u} r976={1d,1u} r977={1d,1u} r979={1d,1u} r981={1d,1u} r982={1d,1u} r983={1d,1u} r984={1d,1u} r986={1d,1u} r988={1d,1u} r990={1d,1u} r991={1d,1u} r992={1d,1u} r993={1d,1u} r995={1d,1u} r996={1d,1u} r998={1d,1u} r999={1d,1u} r1000={1d,1u} r1002={1d,1u} r1004={1d,1u} r1005={1d,1u} r1006={1d,1u} r1007={1d,1u} r1009={1d} r1010={1d} r1011={1d,1u} r1013={1d,1u} r1015={1d,2u} r1016={1d,1u} r1017={1d,1u} r1018={1d,4u} r1024={1d,1u} r1025={1d,1u} r1026={1d,1u} r1029={1d,1u,1e} r1030={1d,1u} r1031={1d,1u} r1032={1d,1u} r1033={1d,4u} r1039={1d,1u} r1040={1d,1u} r1041={1d,1u} r1044={1d,1u,1e} r1045={1d,1u} r1046={1d,1u} r1047={1d,1u} r1048={1d,4u} r1054={1d,1u} r1055={1d,1u} r1056={1d,1u} r1059={1d,1u,1e} r1060={1d,1u} r1061={1d,1u} r1062={1d,1u} r1063={1d,4u} r1069={1d,1u} r1070={1d,1u} r1071={1d,1u} r1074={1d,1u,1e} r1075={1d,1u} r1076={1d,1u} r1077={1d,1u} r1078={1d,1u} r1079={1d,1u} r1081={1d,1u} r1082={1d,4u} r1086={1d,1u} r1089={1d,1u} r1092={1d,1u} r1093={1d,3u} r1099={1d,1u} r1100={1d,1u} r1102={1d,1u} r1103={1d,8u} r1105={1d,3u,1e} r1108={1d,2u} r1111={1d,2u} r1115={1d,4u} r1127={1d,1u} r1128={1d,1u,1e} r1129={1d,1u} r1130={1d,1u} r1133={1d,1u,1e} r1135={1d,1u} r1136={1d,1u} r1138={1d,2u} r1139={1d,1u} r1142={1d,1u} r1143={1d,6u} r1145={1d,1u} r1149={1d,4u} r1150={1d,1u} r1151={1d,1u} r1164={1d,1u} r1165={1d,1u} r1170={1d,4u} r1180={1d,1u} r1182={1d,1u} r1183={1d,1u} r1184={1d,1u} r1185={1d,1u} r1186={1d,1u} r1187={1d,1u} r1188={1d,1u} r1189={1d,1u} r1190={1d,1u} r1191={1d,1u} r1192={1d,1u} r1193={1d,1u} r1198={1d,1u} r1199={1d,1u} r1200={1d,1u} r1203={1d,9u} r1205={1d,1u} r1208={1d,1u} r1211={1d,1u} r1213={1d,3u} r1221={1d,1u} r1228={1d,1u} r1232={1d,3u,1e} r1235={1d,1u} r1236={1d,1u} r1237={1d,1u} r1238={1d,1u} r1239={1d,1u} r1242={1d,1u} r1245={1d,1u} r1248={1d,1u,1e} r1249={1d,2u} r1251={1d,2u} r1253={1d,1u,1e} r1256={1d,2u} r1259={1d,2u,1e} r1261={1d,1u} r1262={1d,1u} r1263={1d,1u} r1264={1d,2u,1e} r1266={1d,1u} r1267={1d,1u} r1268={1d,1u} r1269={1d,1u} r1270={1d,1u} r1271={1d} r1272={1d} r1273={1d,2u} r1274={1d,3u,2e} r1275={1d} r1276={1d,2u} r1277={1d,1u} r1278={1d,1u} r1279={1d,1u} r1280={1d,1u} r1282={1d,1u} r1283={1d,1u} r1285={1d,3u,2e} r1286={1d} r1287={1d,2u} r1288={1d} r1289={1d,1u} r1290={1d,1u} r1291={1d,1u} r1293={1d,1u} r1294={1d,1u} r1295={1d} r1296={1d,1u} r1297={1d,1u} r1298={1d,1u} r1299={1d,1u} r1300={1d,1u} r1301={1d,1u} r1302={1d,1u} r1303={1d,4u} r1304={1d,3u,2e} r1305={1d,2u} r1306={1d,6u} r1307={1d,1u} r1308={1d,1u} r1309={1d,1u} r1311={1d,1u} r1312={1d,1u} r1313={1d,4u} r1314={1d,3u,2e} r1315={1d} r1316={1d,2u} r1317={1d} r1318={1d,1u} r1319={1d,1u} r1320={1d,1u} r1322={1d,1u} r1323={1d,1u} r1324={1d} r1325={1d,1u} r1326={1d} r1327={1d,3u,2e} r1328={1d,2u} r1330={1d,1u} r1331={1d,1u} r1332={1d,1u} r1334={1d,1u} r1335={1d,1u} r1336={1d} r1337={1d,1u} r1338={1d} r1339={1d,1u} r1340={1d,1u} r1341={1d} r1342={1d,1u} r1343={1d,1u,1e} r1344={1d} r1345={1d,1u} r1346={1d,1u} r1348={1d,1u} r1349={1d,1u} r1350={1d,1u} r1351={1d,1u} r1352={1d,1u} r1353={1d} r1354={1d,1u} r1355={1d,1u} r1356={1d,1u} r1357={1d,1u} r1358={1d,1u} r1359={1d,1u} r1360={1d,1u} r1361={1d,1u} r1362={1d,1u} r1363={1d,1u} r1364={1d} r1365={1d,1u} r1366={1d,1u} r1367={1d,1u} r1368={1d,1u} r1369={1d,1u} r1370={1d,1u} r1371={1d,1u} r1372={1d,1u} r1373={1d,1u} r1374={1d,1u} r1375={1d,1u} r1376={1d,1u} r1377={1d,1u} r1378={1d,1u} r1379={1d,1u} r1380={1d,1u} r1381={1d,1u} r1382={1d,1u} r1383={1d,1u} r1384={1d,1u} r1385={1d,1u} r1386={1d,1u} r1387={1d,1u} r1388={1d,1u} r1389={1d,1u} r1390={1d,1u} r1391={1d,1u} r1392={1d,1u} r1393={1d,1u} r1394={1d,1u} r1395={1d,1u} r1396={1d,1u} r1397={1d,1u} r1398={1d,1u} r1402={1d,1u} r1403={1d,1u} r1404={1d,1u} r1407={1d,1u} r1408={1d,1u} r1411={1d,1u} r1414={1d,1u} r1415={1d,1u} r1418={1d,1u} r1419={1d,1u} r1420={1d,1u} r1423={1d,1u} r1425={1d,3u} r1433={1d,1u} r1434={1d,1u} r1435={1d,1u} r1438={1d,1u} r1439={1d,1u} r1441={1d,1u} r1442={1d,3u} r1446={1d,1u} r1447={1d,2u} r1451={1d} r1453={1d,1u} r1455={1d,4u} r1465={1d} r1466={1d,4u} r1476={1d,2u,1e} r1477={1d} r1480={1d,1u,1e} r1481={1d} r1482={1d,1u} r1485={1d,4u} r1495={1d,1u} r1496={1d} r1497={1d,2u,1e} r1500={1d,1u,1e} r1502={1d,1u} r1504={1d,2u,1e} r1508={1d,1u,1e} r1510={1d,1u} r1513={1d,4u} r1523={1d,1u} r1525={1d,2u,1e} r1528={1d,1u,1e} r1530={1d,1u} r1532={1d,1u} r1533={1d,1u} r1534={1d,1u} r1535={1d} r1536={1d,1u} r1537={1d,1u} r1538={1d} r1539={1d,1u} r1540={1d,1u} r1541={1d,1u} r1542={1d,1u} r1543={1d,1u} r1544={1d,1u} r1545={1d} r1548={1d} r1549={1d,1u} r1550={1d,4u} r1560={1d,1u} r1561={1d,1u} r1564={1d,1u} r1566={1d,1u} r1567={1d,1u} r1569={1d,1u} r1570={1d,4u} r1580={1d,1u} r1582={1d,1u} r1583={1d,4u} r1585={1d,6u} r1605={1d,1u} r1606={1d,1u} r1607={1d,1u} r1609={1d,1u} r1613={1d,1u} r1614={1d,1u} r1615={1d,1u} r1616={1d,15u} r1622={1d} r1623={1d,1u} r1624={1d,1u} r1625={1d,1u} r1626={1d,1u} r1627={1d,1u} r1628={1d,1u} r1629={1d,1u} r1630={1d,1u} r1633={1d,1u} r1634={1d} r1635={1d} r1636={1d,1u} r1638={1d,1u} r1639={1d,3u} r1641={1d} r1644={1d} r1645={1d,1u} r1646={1d,1u} r1647={1d,1u} r1648={1d,1u} r1649={1d,1u} r1652={1d,1u} r1653={1d,1u} r1654={1d,1u} r1655={1d} r1656={1d,1u} r1657={1d,1u} r1660={1d,1u} r1661={1d,1u} r1662={1d,1u} r1663={1d,1u} r1664={1d,1u} r1665={1d,1u} r1668={1d,1u} r1669={1d,1u} r1670={1d,1u} r1671={1d,2u} r1673={1d,1u} r1674={1d,1u} r1675={1d,1u} r1678={1d,1u} r1679={1d,1u} r1680={1d,1u} r1683={1d,1u} r1684={1d} r1687={1d} r1688={1d,1u} r1694={1d,1u} r1695={1d,1u} r1696={1d,1u} r1697={1d,1u} r1698={1d,2u} r1699={1d,1u} r1700={1d,1u} r1701={1d,1u} r1702={1d,1u} r1703={1d,1u} r1704={1d,1u} r1705={1d,1u} r1706={1d,1u} r1707={1d,1u} r1708={1d,1u} r1709={1d,1u} r1710={2d,3u} r1711={1d,1u} r1716={1d,1u} r1717={1d,1u} r1719={1d,1u} r1720={1d,1u} r1722={1d,1u,1e} r1724={1d,1u} r1725={1d,1u} r1726={1d,1u} r1727={1d,1u} r1728={1d,1u} r1730={1d,1u} r1731={1d,1u} r1732={1d,1u} r1733={1d,1u} r1735={1d,1u} r1736={1d,1u} r1737={1d,1u} r1738={1d,1u} r1739={1d,1u} r1741={1d,1u} r1742={1d,1u} r1743={1d,1u} r1744={1d,1u} r1746={1d,1u} r1747={1d,1u} r1748={1d,1u} r1749={1d,1u} r1750={1d,1u} r1751={1d,1u} r1752={1d,1u} r1754={1d,1u} r1755={1d,1u} r1756={1d,1u} r1757={1d,1u} r1758={1d,1u} r1759={1d,1u} r1760={1d,1u} r1761={1d,1u} r1763={1d,1u} r1764={1d,1u} r1765={1d,1u} r1766={1d,1u} r1767={1d,1u} r1768={1d,1u} r1770={1d,1u} r1771={1d,1u} r1775={1d,1u} r1776={1d,1u} r1777={1d,1u} r1778={1d,1u} r1780={1d,1u} r1781={1d,1u} r1783={1d,1u} r1785={1d,1u} r1786={1d,1u} r1788={1d,1u} r1790={1d,1u} r1791={1d,1u} r1793={1d,1u} r1794={1d,1u} r1796={1d,1u} r1797={1d} r1798={1d} r1799={1d,1u} r1800={1d,1u} r1801={1d,1u} r1802={1d,1u} r1804={1d,1u} r1805={1d,1u} r1806={1d,2u} r1807={1d,1u} r1808={1d,1u} r1810={1d} r1812={1d,1u} r1813={1d,1u} r1814={1d,1u} r1816={1d,1u} r1817={1d} r1819={1d,1u} r1820={1d,1u} r1821={1d,1u} r1822={1d,1u} r1824={1d,1u} r1825={1d,1u} r1826={1d,1u} r1828={1d,1u} r1831={1d,1u} r1832={1d,1u} r1833={1d,1u} r1834={1d,1u} r1837={1d,1u} r1839={1d,1u} r1842={1d,1u} r1843={1d,2u} r1844={1d,1u} r1845={1d,1u} r1846={1d,1u} r1848={1d,1u} r1849={1d} r1851={1d,1u} r1852={1d,1u} r1853={1d,15u} r1854={13d,31u} r1855={4d,8u} r1856={29d,28u} r1857={1d,1u} r1858={1d,1u} r1859={3d,4u} r1860={3d,4u} r1861={1d,20u} r1862={1d,14u} r1863={1d,7u} r1864={1d,1u} r1865={1d} r1866={1d} r1867={1d,1u} r1868={1d} r1869={1d,2u} r1870={1d,2u} r1871={1d,2u} r1872={1d,2u} r1873={1d,2u} r1874={1d,4u} r1875={1d,6u} r1876={1d,2u} r1877={1d,2u} r1878={1d,2u} r1879={1d,4u} r1880={1d,3u} r1881={1d,9u} r1882={1d,3u} r1883={1d,2u} r1884={1d,2u} r1885={1d,2u} r1886={1d,2u} r1887={1d,1u} r1888={1d,3u} r1889={1d} r1890={1d} r1891={1d} r1892={1d,4u} r1893={1d,1u} r1894={1d,1u} r1895={1d,2u} r1896={1d,2u} r1897={1d,4u} r1898={1d,5u} r1899={1d,2u} r1900={1d,1u} r1901={1d,2u} r1902={1d,2u} r1903={1d,7u} r1904={1d,2u} r1905={1d,3u} r1906={1d,2u} r1907={1d,3u} r1908={1d,2u} r1909={1d,2u} r1910={1d,2u} r1911={1d,2u} 
;;    total ref usage 11640{7894d,3677u,69e} in 2743{2608 regular + 135 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(18){ }d-1(29){ }d-1(30){ }d-1(31){ }d-1(32){ }d-1(33){ }d-1(34){ }d-1(35){ }d-1(36){ }d-1(37){ }d-1(38){ }d-1(39){ }d-1(64){ }d-1(65){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	 1710
;; lr  use 	
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap]
;; live  in  	
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap]
;; live  kill	
;; lr  out 	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; live  out 	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(29){ }u1(31){ }u2(64){ }u3(65){ }}
;; lr  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 66 [cc] 837 838
;; live  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 66 [cc] 837 838
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

( 2 )->[3]->( 74 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 2 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u8(29){ }u9(31){ }u10(64){ }u11(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 293 839 840
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 0 [x0] 66 [cc] 293 839 840
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u21(29){ }u22(31){ }u23(64){ }u24(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 842 843
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 842 843
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

( 4 5 )->[6]->( 55 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u28(29){ }u29(31){ }u30(64){ }u31(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 320 328 360 1013 1864 1908 1909 1910 1911
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 320 328 360 1864
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1864

( 55 )->[7]->( 53 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u32(29){ }u33(31){ }u34(64){ }u35(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294
;; lr  def 	 66 [cc] 844
;; live  in  	 294 320 328
;; live  gen 	 66 [cc] 844
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328 844

( 7 )->[8]->( 53 10 25 32 39 46 12 11 21 13 15 17 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u39(29){ }u40(31){ }u41(64){ }u42(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 844 1910 1911
;; lr  def 	 66 [cc] 845 846
;; live  in  	 320 328 844
;; live  gen 	 845 846
;; live  kill	 66 [cc]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[9]->( )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u46(29){ }u47(31){ }u48(64){ }u49(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 847 848 849 850
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 847 848 849 850
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 8 )->[10]->( )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u61(29){ }u62(31){ }u63(64){ }u64(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 851 852 854 855 856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 851 852 854 855 856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 8 )->[11]->( 55 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u83(29){ }u84(31){ }u85(64){ }u86(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 857 858 859
;; live  in  	 320 328
;; live  gen 	 857 858 859
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[12]->( 55 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u90(29){ }u91(31){ }u92(64){ }u93(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 860 861 862
;; live  in  	 320 328
;; live  gen 	 860 861 862
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[13]->( 14 55 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u97(29){ }u98(31){ }u99(64){ }u100(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 863 864 865 866 867
;; live  in  	 320 328
;; live  gen 	 0 [x0] 66 [cc] 863 864 865 866 867
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 13 )->[14]->( 55 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u112(29){ }u113(31){ }u114(64){ }u115(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 868 869 870 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 868 869 870 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[15]->( 16 55 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u124(29){ }u125(31){ }u126(64){ }u127(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 872 873 874 875 876
;; live  in  	 320 328
;; live  gen 	 0 [x0] 66 [cc] 872 873 874 875 876
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 15 )->[16]->( 55 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u139(29){ }u140(31){ }u141(64){ }u142(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 877 878 879 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 877 878 879 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u151(29){ }u152(31){ }u153(64){ }u154(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 301 303 881 882 883 885 1854
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 301 303 881 882 883 885 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 881 1013 1710 1854 1908 1909 1910 1911
;; live  out 	 320 328 881 1854

( 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u171(29){ }u172(31){ }u173(64){ }u174(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 881 1013 1710 1854 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 881
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 888 889 890 1856
;; live  in  	 320 328 881 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 888 889 890 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; live  out 	 320 328 1854

( 17 18 )->[19]->( 20 55 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u187(29){ }u188(31){ }u189(64){ }u190(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 892 894
;; live  in  	 320 328 1854
;; live  gen 	 66 [cc] 892 894
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 19 )->[20]->( 55 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u196(29){ }u197(31){ }u198(64){ }u199(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 895 896 897 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 895 896 897 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[21]->( 22 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u208(29){ }u209(31){ }u210(64){ }u211(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 309 311 899 900 901 903 1854
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 309 311 899 900 901 903 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 899 1013 1710 1854 1908 1909 1910 1911
;; live  out 	 320 328 899 1854

( 21 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u228(29){ }u229(31){ }u230(64){ }u231(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 899 1013 1710 1854 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 899
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 906 907 908 1856
;; live  in  	 320 328 899 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 906 907 908 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; live  out 	 320 328 1854

( 21 22 )->[23]->( 24 55 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u244(29){ }u245(31){ }u246(64){ }u247(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 910 912
;; live  in  	 320 328 1854
;; live  gen 	 66 [cc] 910 912
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 23 )->[24]->( 55 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u253(29){ }u254(31){ }u255(64){ }u256(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 913 914 915 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 913 914 915 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[25]->( 26 27 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u265(29){ }u266(31){ }u267(64){ }u268(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 317 319 917 919 921 1854 1855
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 317 319 917 919 921 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 317 320 328 1854 1855

( 25 )->[26]->( 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u284(29){ }u285(31){ }u286(64){ }u287(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 922 923 924 1856
;; live  in  	 317 320 328 1854 1855
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 922 923 924 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 317 320 328 1854 1855

( 25 26 )->[27]->( 28 29 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u296(29){ }u297(31){ }u298(64){ }u299(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317
;; lr  def 	 66 [cc] 926
;; live  in  	 317 320 328 1854 1855
;; live  gen 	 66 [cc] 926
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 1854 1855

( 27 )->[28]->( 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u304(29){ }u305(31){ }u306(64){ }u307(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 927 929 930 931 1856
;; live  in  	 320 328 1854 1855
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 927 929 930 931 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; live  out 	 320 328 1854

( 27 28 )->[29]->( 30 31 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u319(29){ }u320(31){ }u321(64){ }u322(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 933 935
;; live  in  	 320 328 1854
;; live  gen 	 66 [cc] 933 935
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 29 )->[30]->( 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u328(29){ }u329(31){ }u330(64){ }u331(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 936 937 938 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 936 937 938 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 30 29 )->[31]->( 55 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u340(29){ }u341(31){ }u342(64){ }u343(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 320 328
;; live  gen 	 320 328
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[32]->( 33 34 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u349(29){ }u350(31){ }u351(64){ }u352(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 329 331 940 942 944 1854 1855
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 329 331 940 942 944 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 329 1854 1855

( 32 )->[33]->( 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u368(29){ }u369(31){ }u370(64){ }u371(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 945 946 947 1856
;; live  in  	 320 328 329 1854 1855
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 945 946 947 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 329 1854 1855

( 32 33 )->[34]->( 35 36 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u380(29){ }u381(31){ }u382(64){ }u383(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 329
;; lr  def 	 66 [cc] 949
;; live  in  	 320 328 329 1854 1855
;; live  gen 	 66 [cc] 949
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 1854 1855

( 34 )->[35]->( 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u388(29){ }u389(31){ }u390(64){ }u391(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 950 952 953 954 1856
;; live  in  	 320 328 1854 1855
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 950 952 953 954 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; live  out 	 320 328 1854

( 34 35 )->[36]->( 37 38 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u403(29){ }u404(31){ }u405(64){ }u406(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 956 958
;; live  in  	 320 328 1854
;; live  gen 	 66 [cc] 956 958
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 36 )->[37]->( 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u412(29){ }u413(31){ }u414(64){ }u415(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 959 960 961 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 959 960 961 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 37 36 )->[38]->( 55 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u424(29){ }u425(31){ }u426(64){ }u427(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 320 328
;; live  gen 	 320 328
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[39]->( 40 41 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u433(29){ }u434(31){ }u435(64){ }u436(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 339 341 963 965 967 1854 1855
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 339 341 963 965 967 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 339 1854 1855

( 39 )->[40]->( 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u452(29){ }u453(31){ }u454(64){ }u455(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 968 969 970 1856
;; live  in  	 320 328 339 1854 1855
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 968 969 970 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 339 1854 1855

( 39 40 )->[41]->( 42 43 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u464(29){ }u465(31){ }u466(64){ }u467(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 339
;; lr  def 	 66 [cc] 972
;; live  in  	 320 328 339 1854 1855
;; live  gen 	 66 [cc] 972
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 1854 1855

( 41 )->[42]->( 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u472(29){ }u473(31){ }u474(64){ }u475(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 973 975 976 977 1856
;; live  in  	 320 328 1854 1855
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 973 975 976 977 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; live  out 	 320 328 1854

( 41 42 )->[43]->( 44 45 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u487(29){ }u488(31){ }u489(64){ }u490(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 979 981
;; live  in  	 320 328 1854
;; live  gen 	 66 [cc] 979 981
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 43 )->[44]->( 45 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u496(29){ }u497(31){ }u498(64){ }u499(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 982 983 984 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 982 983 984 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 44 43 )->[45]->( 55 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u508(29){ }u509(31){ }u510(64){ }u511(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 320 328
;; live  gen 	 320 328
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 )->[46]->( 47 48 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u517(29){ }u518(31){ }u519(64){ }u520(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 349 351 986 988 990 1854 1855
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 349 351 986 988 990 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 349 1854 1855

( 46 )->[47]->( 48 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u536(29){ }u537(31){ }u538(64){ }u539(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 991 992 993 1856
;; live  in  	 320 328 349 1854 1855
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 991 992 993 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 349 1854 1855

( 46 47 )->[48]->( 49 50 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u548(29){ }u549(31){ }u550(64){ }u551(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 349
;; lr  def 	 66 [cc] 995
;; live  in  	 320 328 349 1854 1855
;; live  gen 	 66 [cc] 995
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; live  out 	 320 328 1854 1855

( 48 )->[49]->( 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u556(29){ }u557(31){ }u558(64){ }u559(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 996 998 999 1000 1856
;; live  in  	 320 328 1854 1855
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 996 998 999 1000 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; live  out 	 320 328 1854

( 48 49 )->[50]->( 51 52 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u571(29){ }u572(31){ }u573(64){ }u574(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 1002 1004
;; live  in  	 320 328 1854
;; live  gen 	 66 [cc] 1002 1004
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 50 )->[51]->( 52 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u580(29){ }u581(31){ }u582(64){ }u583(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 1005 1006 1007 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 1005 1006 1007 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 51 50 )->[52]->( 55 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u592(29){ }u593(31){ }u594(64){ }u595(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 320 328
;; live  gen 	 320 328
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 8 7 )->[53]->( 55 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u601(29){ }u602(31){ }u603(64){ }u604(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1908 1909
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 1009 1010 1011 1856
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 1009 1010 1011 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 320 328

( 6 53 11 12 13 14 15 16 19 20 23 24 31 38 45 52 )->[55]->( 7 56 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u617(29){ }u618(31){ }u619(64){ }u620(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1013
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 294
;; live  in  	 320 328
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 294 1013
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1710 1908 1909 1910 1911
;; live  out 	 294 320 328

( 55 )->[56]->( 57 58 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u636(29){ }u637(31){ }u638(64){ }u639(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 360
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328

( 56 )->[57]->( )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u642(29){ }u643(31){ }u644(64){ }u645(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 56 )->[58]->( 59 71 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u648(29){ }u649(31){ }u650(64){ }u651(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328

( 58 )->[59]->( 65 60 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u654(29){ }u655(31){ }u656(64){ }u657(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 66 [cc] 1015
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; live  gen 	 66 [cc] 1015
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015

( 59 )->[60]->( 65 61 62 63 64 )
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u661(29){ }u662(31){ }u663(64){ }u664(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015
;; lr  def 	 66 [cc] 1016 1017
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015
;; live  gen 	 1016 1017
;; live  kill	 66 [cc]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 60 )->[61]->( 66 )
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u668(29){ }u669(31){ }u670(64){ }u671(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1018 1024 1025 1026 1029 1030 1031 1032 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1018 1024 1025 1026 1029 1030 1031 1032 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 60 )->[62]->( 66 )
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u690(29){ }u691(31){ }u692(64){ }u693(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1033 1039 1040 1041 1044 1045 1046 1047 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1033 1039 1040 1041 1044 1045 1046 1047 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 60 )->[63]->( 66 )
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u712(29){ }u713(31){ }u714(64){ }u715(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1048 1054 1055 1056 1059 1060 1061 1062 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1048 1054 1055 1056 1059 1060 1061 1062 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 60 )->[64]->( 66 )
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u734(29){ }u735(31){ }u736(64){ }u737(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1063 1069 1070 1071 1074 1075 1076 1077 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1063 1069 1070 1071 1074 1075 1076 1077 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 60 59 )->[65]->( )
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u756(29){ }u757(31){ }u758(64){ }u759(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1078 1079 1081
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1078 1079 1081
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 61 62 63 64 )->[66]->( 70 67 )
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u769(29){ }u770(31){ }u771(64){ }u772(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 386 1082
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; live  gen 	 66 [cc] 386 1082
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

( 66 )->[67]->( 70 68 )
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u777(29){ }u778(31){ }u779(64){ }u780(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1086
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1086
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

( 67 )->[68]->( 70 69 )
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u786(29){ }u787(31){ }u788(64){ }u789(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1089
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1089
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

( 68 )->[69]->( 70 74 )
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u795(29){ }u796(31){ }u797(64){ }u798(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1092
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1092
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854

( 67 66 69 68 )->[70]->( )
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u804(29){ }u805(31){ }u806(64){ }u807(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1093 1099 1100 1102
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 1093 1099 1100 1102
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 58 )->[71]->( 73 72 )
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u831(29){ }u832(31){ }u833(64){ }u834(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 71 )->[72]->( 74 )
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 71 )->[73]->( 74 )
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u837(29){ }u838(31){ }u839(64){ }u840(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 397 400 406 408 410 1103 1105 1108 1111 1115 1127 1128 1129 1130 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 32 [v0] 33 [v1] 397 400 406 408 410 1103 1105 1108 1111 1115 1127 1128 1129 1130 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 3 73 69 72 )->[74]->( 75 276 )
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u944(29){ }u945(31){ }u946(64){ }u947(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 243 286 1133 1135 1136 1138 1139 1853
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; live  gen 	 0 [x0] 66 [cc] 243 286 1133 1135 1136 1138 1139 1853
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1853 1854

( 74 )->[75]->( 276 76 )
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u963(29){ }u964(31){ }u965(64){ }u966(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1138
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 414 416 1142
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1853 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 414 416 1142
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

( 75 )->[76]->( 276 77 )
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u986(29){ }u987(31){ }u988(64){ }u989(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 416
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

( 76 276 )->[77]->( 78 79 )
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u993(29){ }u994(31){ }u995(64){ }u996(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; lr  def 	 66 [cc] 244 245 421 424 425 427 1143 1145 1149 1150 1151 1164 1165 1170 1180 1862
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; live  gen 	 66 [cc] 244 245 421 424 425 427 1143 1145 1149 1150 1151 1164 1165 1170 1180 1862
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1853 1854 1862

( 77 )->[78]->( )
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u1065(29){ }u1066(31){ }u1067(64){ }u1068(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1182 1183 1184 1185 1186 1187
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1182 1183 1184 1185 1186 1187
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 77 )->[79]->( 80 81 )
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u1080(29){ }u1081(31){ }u1082(64){ }u1083(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1853 1854 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1853 1854 1862

( 79 )->[80]->( )
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u1087(29){ }u1088(31){ }u1089(64){ }u1090(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1188 1189 1190 1191 1192 1193
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1188 1189 1190 1191 1192 1193
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 79 )->[81]->( 82 133 )
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u1102(29){ }u1103(31){ }u1104(64){ }u1105(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1143
;; lr  def 	 66 [cc] 246
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1853 1854 1862
;; live  gen 	 66 [cc] 246
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 246 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 246 1143 1853 1854 1862

( 81 )->[82]->( 83 84 )
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u1111(29){ }u1112(31){ }u1113(64){ }u1114(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1198
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 66 [cc] 1198
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862

( 82 )->[83]->( 84 )
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u1120(29){ }u1121(31){ }u1122(64){ }u1123(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1199 1200 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1199 1200 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862

( 82 83 )->[84]->( 85 86 )
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u1132(29){ }u1133(31){ }u1134(64){ }u1135(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1203 1205
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 66 [cc] 1203 1205
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862

( 84 )->[85]->( 131 )
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u1140(29){ }u1141(31){ }u1142(64){ }u1143(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 259 289 1208 1211 1213 1221 1859
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 32 [v0] 33 [v1] 34 [v2] 259 289 1208 1211 1213 1221 1859
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 84 )->[86]->( 129 )
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u1194(29){ }u1195(31){ }u1196(64){ }u1197(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 261 262 290 430 431 432 433 434 435 438 441 444 447 576 1228 1232 1235 1236 1237 1238 1239 1242 1245 1248 1249 1251 1253 1256 1859 1863 1903 1904 1905 1906 1907
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 261 262 290 430 431 432 433 434 435 438 441 444 447 576 1228 1232 1235 1236 1237 1238 1239 1242 1245 1248 1249 1251 1253 1256 1859 1863 1903 1904 1905 1906 1907
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863

( 129 )->[87]->( 90 88 )
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u1313(29){ }u1314(31){ }u1315(64){ }u1316(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 435 438 441 447
;; lr  def 	 66 [cc] 266 460
;; live  in  	 435 576
;; live  gen 	 66 [cc] 266 460
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 266 435 460 576

( 87 93 )->[88]->( 95 89 )
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u1332(29){ }u1333(31){ }u1334(64){ }u1335(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 290
;; lr  def 	 66 [cc]
;; live  in  	 435 576
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 576

( 88 )->[89]->( 122 )
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u1340(29){ }u1341(31){ }u1342(64){ }u1343(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 443 747
;; live  in  	 435 576
;; live  gen 	 443 747
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 443 576 747

( 87 )->[90]->( 91 )
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u1348(29){ }u1349(31){ }u1350(64){ }u1351(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1901 1902
;; live  in  	 266 435 460 576
;; live  gen 	 1901 1902
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
;; live  out 	 266 435 460 576 1901 1902

( 90 93 )->[91]->( 92 93 )
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 266
;; lr  def 	 66 [cc] 457
;; live  in  	 266 435 460 576 1901 1902
;; live  gen 	 66 [cc] 457
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
;; live  out 	 266 435 457 460 576 1901 1902

( 91 )->[92]->( 93 )
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u1357(29){ }u1358(31){ }u1359(64){ }u1360(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 457 460 1863 1901 1902
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1259 1261 1262 1263 1264 1266 1267 1268 1269 1270 1271 1272
;; live  in  	 266 435 457 460 576 1901 1902
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1259 1261 1262 1263 1264 1266 1267 1268 1269 1270 1271 1272
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
;; live  out 	 266 435 460 576 1901 1902

( 91 92 )->[93]->( 91 88 )
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u1401(29){ }u1402(31){ }u1403(64){ }u1404(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 266 460
;; lr  def 	 66 [cc] 266 460
;; live  in  	 266 435 460 576 1901 1902
;; live  gen 	 66 [cc] 266 460
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
;; live  out 	 266 435 460 576 1901 1902

( 88 )->[95]->( 97 96 )
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u1412(29){ }u1413(31){ }u1414(64){ }u1415(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 66 [cc] 750 1273
;; live  in  	 435 576
;; live  gen 	 66 [cc] 750 1273
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 576 750 1273

( 95 )->[96]->( 102 103 )
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u1425(29){ }u1426(31){ }u1427(64){ }u1428(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 750 1273 1903
;; lr  def 	 66 [cc] 468 751 1274 1275 1276 1277 1278 1279 1280 1282 1283
;; live  in  	 435 576 750 1273
;; live  gen 	 66 [cc] 468 751 1274 1275 1276 1277 1278 1279 1280 1282 1283
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 468 576 750 751

( 156 95 155 )->[97]->( )
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u1457(29){ }u1458(31){ }u1459(64){ }u1460(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 299 )->[98]->( 100 104 )
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u1462(29){ }u1463(31){ }u1464(64){ }u1465(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 750 751 1306 1892 1903
;; lr  def 	 66 [cc] 468 1285 1286 1287 1288 1289 1290 1291 1293 1294 1295
;; live  in  	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc] 468 1285 1286 1287 1288 1289 1290 1291 1293 1294 1295
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 468 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 98 )->[100]->( 102 )
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u1495(29){ }u1496(31){ }u1497(64){ }u1498(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 107 )->[101]->( 102 )
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u1509(29){ }u1510(31){ }u1511(64){ }u1512(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 161 96 101 159 100 158 )->[102]->( )
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u1523(29){ }u1524(31){ }u1525(64){ }u1526(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1296 1297 1298 1299 1300 1301
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1296 1297 1298 1299 1300 1301
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 96 )->[103]->( 104 )
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u1538(29){ }u1539(31){ }u1540(64){ }u1541(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 290 1903
;; lr  def 	 442 443 695 714 747 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  in  	 435 468 576 750 751
;; live  gen 	 442 443 695 714 747 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 468 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 103 98 )->[104]->( 105 110 )
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u1546(29){ }u1547(31){ }u1548(64){ }u1549(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 468 751 1303 1306 1313
;; lr  def 	 66 [cc] 469 1302 1304 1305 1307 1308 1309 1311 1312
;; live  in  	 435 442 443 468 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc] 469 1302 1304 1305 1307 1308 1309 1311 1312
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 469 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 104 )->[105]->( 107 )
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u1584(29){ }u1585(31){ }u1586(64){ }u1587(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1303 1306 1313 1892 1903
;; lr  def 	 1315 1317 1324 1889 1890
;; live  in  	 435 442 443 469 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 1315 1317 1324 1889 1890
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 469 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 108 )->[106]->( 107 )
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u1588(29){ }u1589(31){ }u1590(64){ }u1591(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 476 695 750
;; lr  def 	 469 695 750 826
;; live  in  	 435 442 443 469 476 576 695 714 747 750 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 469 695 750 826
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 469 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 106 105 )->[107]->( 101 108 )
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u1596(29){ }u1597(31){ }u1598(64){ }u1599(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 714 1306 1892 1903
;; lr  def 	 66 [cc] 473 1314 1316 1318 1319 1320 1322 1323
;; live  in  	 435 442 443 469 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc] 473 1314 1316 1318 1319 1320 1322 1323
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 469 473 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 107 )->[108]->( 106 109 )
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u1628(29){ }u1629(31){ }u1630(64){ }u1631(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 473 714 826 1303 1306 1313 1893 1894
;; lr  def 	 66 [cc] 476 714 1325 1326 1327 1328 1330 1331 1332 1334 1335 1336
;; live  in  	 435 442 443 469 473 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc] 476 714 1325 1326 1327 1328 1330 1331 1332 1334 1335 1336
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 469 476 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 108 )->[109]->( 111 )
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u1660(29){ }u1661(31){ }u1662(64){ }u1663(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 476 695 750 826
;; lr  def 	 463 695 714 750 751 826
;; live  in  	 435 442 443 469 476 576 695 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 463 695 714 750 751 826
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 463 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 104 )->[110]->( 111 )
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u1670(29){ }u1671(31){ }u1672(64){ }u1673(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  def 	 463 695 714 750 751 826
;; live  in  	 435 442 443 469 576 695 714 747 750 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 463 695 714 750 751 826
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 463 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 110 109 )->[111]->( 283 112 )
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u1680(29){ }u1681(31){ }u1682(64){ }u1683(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 463 1895 1896
;; lr  def 	 66 [cc] 464 1337 1338 1339 1340 1341
;; live  in  	 435 442 443 463 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc] 464 1337 1338 1339 1340 1341
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 464 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 111 )->[112]->( 115 113 )
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u1697(29){ }u1698(31){ }u1699(64){ }u1700(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 464
;; lr  def 	 66 [cc] 1342
;; live  in  	 435 442 443 464 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc] 1342
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 464 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 112 )->[113]->( 114 284 )
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u1705(29){ }u1706(31){ }u1707(64){ }u1708(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 464 1899
;; lr  def 	 66 [cc] 1343 1344
;; live  in  	 435 442 443 464 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc] 1343 1344
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 113 )->[114]->( 285 )
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u1714(29){ }u1715(31){ }u1716(64){ }u1717(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1898
;; lr  def 	 828 829
;; live  in  	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 828 829
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 828 829 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 112 )->[115]->( 116 118 )
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u1718(29){ }u1719(31){ }u1720(64){ }u1721(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 115 )->[116]->( 117 )
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u1725(29){ }u1726(31){ }u1727(64){ }u1728(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 286 116 )->[117]->( )
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u1739(29){ }u1740(31){ }u1741(64){ }u1742(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1345 1346 1348 1349 1350 1351 1352
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1345 1346 1348 1349 1350 1351 1352
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 115 )->[118]->( 119 120 )
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u1755(29){ }u1756(31){ }u1757(64){ }u1758(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 118 )->[119]->( 299 )
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u1762(29){ }u1763(31){ }u1764(64){ }u1765(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 1897 1898
;; lr  def 	 442 829 831
;; live  in  	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 442 829 831
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 829 831 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 118 )->[120]->( 299 )
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u1768(29){ }u1769(31){ }u1770(64){ }u1771(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 1898
;; lr  def 	 442 829 831
;; live  in  	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 442 829 831
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 829 831 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 299 )->[121]->( 122 )
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u1774(29){ }u1775(31){ }u1776(64){ }u1777(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 695 714 747 750 751 826 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 435 443 576 695 714 747 750 751 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 443 576 747

( 121 89 )->[122]->( 123 124 )
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u1788(29){ }u1789(31){ }u1790(64){ }u1791(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 432 434 747 1904 1905
;; lr  def 	 66 [cc] 519 520 521 523 525 527 528 530 532 533 535 537 539 540 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363
;; live  in  	 435 443 576 747
;; live  gen 	 66 [cc] 519 520 521 523 525 527 528 530 532 533 535 537 539 540 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 443 519 521 539 540 576

( 122 126 )->[123]->( )
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u1838(29){ }u1839(31){ }u1840(64){ }u1841(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 122 )->[124]->( 125 126 )
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u1843(29){ }u1844(31){ }u1845(64){ }u1846(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 539 540 1906 1907
;; lr  def 	 66 [cc] 542 544 546 548 549 551 553 554 556 558 560 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373
;; live  in  	 435 443 519 521 539 540 576
;; live  gen 	 66 [cc] 542 544 546 548 549 551 553 554 556 558 560 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 443 519 521 539 542 560 576

( 124 127 )->[125]->( )
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u1884(29){ }u1885(31){ }u1886(64){ }u1887(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1374 1375 1376 1377 1378 1379
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1374 1375 1376 1377 1378 1379
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 124 )->[126]->( 123 127 )
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u1899(29){ }u1900(31){ }u1901(64){ }u1902(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 443 519 539 1905
;; lr  def 	 66 [cc] 478 480 482 484 485 487 489 490 492 494 496 1380 1381 1382 1383 1384 1385 1386 1387 1388
;; live  in  	 435 443 519 521 539 542 560 576
;; live  gen 	 66 [cc] 478 480 482 484 485 487 489 490 492 494 496 1380 1381 1382 1383 1384 1385 1386 1387 1388
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 496 539 542 560 576

( 126 )->[127]->( 125 128 )
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u1944(29){ }u1945(31){ }u1946(64){ }u1947(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 496 539 1907
;; lr  def 	 66 [cc] 499 501 503 504 506 508 509 511 513 515 1389 1390 1391 1392 1393 1394 1395 1396 1397
;; live  in  	 435 496 539 542 560 576
;; live  gen 	 66 [cc] 499 501 503 504 506 508 509 511 513 515 1389 1390 1391 1392 1393 1394 1395 1396 1397
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 515 560 576

( 127 )->[128]->( 129 )
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u1983(29){ }u1984(31){ }u1985(64){ }u1986(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 435 515 560 576
;; lr  def 	 435 576
;; live  in  	 435 515 560 576
;; live  gen 	 435 576
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 576

( 86 128 )->[129]->( 87 130 )
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u1995(29){ }u1996(31){ }u1997(64){ }u1998(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 435
;; lr  def 	 66 [cc]
;; live  in  	 435 576
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
;; live  out 	 435 576

( 129 )->[130]->( 131 )
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u2003(29){ }u2004(31){ }u2005(64){ }u2006(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 263 1398
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 32 [v0] 263 1398
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 85 130 )->[131]->( 132 140 )
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u2012(29){ }u2013(31){ }u2014(64){ }u2015(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1402
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 1402
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 131 )->[132]->( 138 )
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u2020(29){ }u2021(31){ }u2022(64){ }u2023(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1403 1404 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1403 1404 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 81 )->[133]->( 134 135 )
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u2032(29){ }u2033(31){ }u2034(64){ }u2035(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 283
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246 1143 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 66 [cc] 283
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1710 1853 1854 1862
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1853 1854 1862

( 133 )->[134]->( 300 )
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u2044(29){ }u2045(31){ }u2046(64){ }u2047(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1407 1408
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 240 1407 1408
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

( 133 )->[135]->( 136 137 )
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u2052(29){ }u2053(31){ }u2054(64){ }u2055(65){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1710 1853 1854 1862
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1143
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 269 285 1411
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 269 285 1411
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1853 1854 1862

( 135 )->[136]->( 300 )
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u2076(29){ }u2077(31){ }u2078(64){ }u2079(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1414 1415
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 240 1414 1415
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

( 135 )->[137]->( 138 )
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u2084(29){ }u2085(31){ }u2086(64){ }u2087(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1859
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1853 1854 1862
;; live  gen 	 0 [x0] 1859
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 137 132 )->[138]->( 139 140 )
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u2091(29){ }u2092(31){ }u2093(64){ }u2094(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1418
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 1418
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 138 )->[139]->( 140 )
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u2099(29){ }u2100(31){ }u2101(64){ }u2102(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1419 1420 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1419 1420 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 139 131 138 )->[140]->( 141 142 )
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u2111(29){ }u2112(31){ }u2113(64){ }u2114(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1859
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 566 567 1423 1425 1433
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 566 567 1423 1425 1433
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862

( 140 )->[141]->( 142 )
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u2141(29){ }u2142(31){ }u2143(64){ }u2144(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1434 1435 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1434 1435 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862

( 140 141 )->[142]->( 143 144 )
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u2153(29){ }u2154(31){ }u2155(64){ }u2156(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 142 )->[143]->( )
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u2159(29){ }u2160(31){ }u2161(64){ }u2162(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1438 1439 1441
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1438 1439 1441
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 142 )->[144]->( 145 178 )
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u2173(29){ }u2174(31){ }u2175(64){ }u2176(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 571 1442
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 571 1442
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1853 1854 1859 1862

( 144 )->[145]->( 147 )
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u2181(29){ }u2182(31){ }u2183(64){ }u2184(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 291 572 575 1446
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1853 1854 1859 1862
;; live  gen 	 0 [x0] 291 572 575 1446
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862

( 147 )->[146]->( 147 )
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u2195(29){ }u2196(31){ }u2197(64){ }u2198(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 575
;; lr  def 	 575
;; live  in  	 575
;; live  gen 	 575
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 575

( 145 146 )->[147]->( 146 148 )
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u2203(29){ }u2204(31){ }u2205(64){ }u2206(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 575
;; lr  def 	 66 [cc]
;; live  in  	 575
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 575

( 147 )->[148]->( 152 )
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u2211(29){ }u2212(31){ }u2213(64){ }u2214(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 578 590 592 1447 1888
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1853 1854 1859 1862
;; live  gen 	 578 590 592 1447 1888
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862

( 152 )->[149]->( 150 151 )
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u2220(29){ }u2221(31){ }u2222(64){ }u2223(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 592
;; lr  def 	 66 [cc] 582 583
;; live  in  	 578 592
;; live  gen 	 66 [cc] 582 583
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 578 582 583 592

( 149 )->[150]->( 151 )
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u2231(29){ }u2232(31){ }u2233(64){ }u2234(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 582 583 1888
;; lr  def 	 1451
;; live  in  	 578 582 583 592
;; live  gen 	 1451
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 578 592

( 149 150 )->[151]->( 152 )
;; bb 151 artificial_defs: { }
;; bb 151 artificial_uses: { u2242(29){ }u2243(31){ }u2244(64){ }u2245(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 578 592
;; lr  def 	 578 592
;; live  in  	 578 592
;; live  gen 	 578 592
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 578 592

( 148 151 )->[152]->( 149 153 )
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u2249(29){ }u2250(31){ }u2251(64){ }u2252(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 578 590
;; lr  def 	 66 [cc]
;; live  in  	 578 592
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 578 592

( 152 )->[153]->( 166 )
;; bb 153 artificial_defs: { }
;; bb 153 artificial_uses: { u2257(29){ }u2258(31){ }u2259(64){ }u2260(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1862
;; lr  def 	 287 596 600 775 785 788 789 790 791 1453 1455 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1853 1854 1859 1862
;; live  gen 	 287 596 600 775 785 788 789 790 791 1453 1455 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862

( 167 )->[154]->( 155 157 )
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u2277(29){ }u2278(31){ }u2279(64){ }u2280(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 775 1879
;; lr  def 	 66 [cc] 1465
;; live  in  	 287 596 775 785 788 789 790
;; live  gen 	 66 [cc] 1465
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 775 785 788 789 790 1465

( 154 )->[155]->( 97 156 )
;; bb 155 artificial_defs: { }
;; bb 155 artificial_uses: { u2286(29){ }u2287(31){ }u2288(64){ }u2289(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862

( 155 )->[156]->( 97 )
;; bb 156 artificial_defs: { }
;; bb 156 artificial_uses: { u2292(29){ }u2293(31){ }u2294(64){ }u2295(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1466
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  gen 	 1466
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 154 )->[157]->( 158 160 )
;; bb 157 artificial_defs: { }
;; bb 157 artificial_uses: { u2315(29){ }u2316(31){ }u2317(64){ }u2318(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 775 790 1879 1880 1881
;; lr  def 	 66 [cc] 640 1476 1477 1480 1481 1482
;; live  in  	 287 596 775 785 788 789 790 1465
;; live  gen 	 66 [cc] 640 1476 1477 1480 1481 1482
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 640 775 785 788 789 790 1465 1477 1481

( 157 )->[158]->( 102 159 )
;; bb 158 artificial_defs: { }
;; bb 158 artificial_uses: { u2335(29){ }u2336(31){ }u2337(64){ }u2338(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862

( 158 )->[159]->( 102 )
;; bb 159 artificial_defs: { }
;; bb 159 artificial_uses: { u2341(29){ }u2342(31){ }u2343(64){ }u2344(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1485
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  gen 	 1485
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 157 )->[160]->( 161 162 )
;; bb 160 artificial_defs: { }
;; bb 160 artificial_uses: { u2364(29){ }u2365(31){ }u2366(64){ }u2367(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 640 789 790 1879 1880 1881 1882
;; lr  def 	 66 [cc] 638 643 1495 1496 1497 1500 1502 1504 1508 1510
;; live  in  	 287 596 640 775 785 788 789 790 1465 1477 1481
;; live  gen 	 66 [cc] 638 643 1495 1496 1497 1500 1502 1504 1508 1510
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 638 643 775 785 788 789 1481 1496

( 160 )->[161]->( 102 )
;; bb 161 artificial_defs: { }
;; bb 161 artificial_uses: { u2400(29){ }u2401(31){ }u2402(64){ }u2403(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; lr  def 	 1513
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; live  gen 	 1513
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 160 )->[162]->( 165 163 )
;; bb 162 artificial_defs: { }
;; bb 162 artificial_uses: { u2423(29){ }u2424(31){ }u2425(64){ }u2426(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 638 788 789 1881 1882
;; lr  def 	 66 [cc] 646 1523 1525 1528 1530 1532
;; live  in  	 287 596 638 643 775 785 788 789 1481 1496
;; live  gen 	 66 [cc] 646 1523 1525 1528 1530 1532
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 643 646 775 785 788

( 162 )->[163]->( 165 164 )
;; bb 163 artificial_defs: { }
;; bb 163 artificial_uses: { u2444(29){ }u2445(31){ }u2446(64){ }u2447(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 596 600 643 646 788 1883 1884
;; lr  def 	 66 [cc] 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544
;; live  in  	 287 596 643 646 775 785 788
;; live  gen 	 66 [cc] 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 643 646 775 785 788

( 163 )->[164]->( 165 )
;; bb 164 artificial_defs: { }
;; bb 164 artificial_uses: { u2467(29){ }u2468(31){ }u2469(64){ }u2470(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 788 1885 1886
;; lr  def 	 596 599 1545 1548 1549
;; live  in  	 287 596 643 646 775 785 788
;; live  gen 	 596 599 1545 1548 1549
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 643 646 775 785 788

( 162 164 163 )->[165]->( 166 )
;; bb 165 artificial_defs: { }
;; bb 165 artificial_uses: { u2481(29){ }u2482(31){ }u2483(64){ }u2484(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 646 775 785 788 1887
;; lr  def 	 287 775 785 788 789 790 791
;; live  in  	 287 596 643 646 775 785 788
;; live  gen 	 287 775 785 788 789 790 791
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 775 785 788 789 790

( 153 165 )->[166]->( 167 173 )
;; bb 166 artificial_defs: { }
;; bb 166 artificial_uses: { u2491(29){ }u2492(31){ }u2493(64){ }u2494(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 600
;; lr  def 	 66 [cc]
;; live  in  	 287 596 775 785 788 789 790
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 775 785 788 789 790

( 166 )->[167]->( 154 168 )
;; bb 167 artificial_defs: { }
;; bb 167 artificial_uses: { u2501(29){ }u2502(31){ }u2503(64){ }u2504(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 788
;; lr  def 	 66 [cc]
;; live  in  	 287 596 775 785 788 789 790
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  out 	 287 596 775 785 788 789 790

( 167 )->[168]->( 170 169 )
;; bb 168 artificial_defs: { }
;; bb 168 artificial_uses: { u2508(29){ }u2509(31){ }u2510(64){ }u2511(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 791 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 791 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1853 1854 1859 1862

( 168 )->[169]->( 170 )
;; bb 169 artificial_defs: { }
;; bb 169 artificial_uses: { u2514(29){ }u2515(31){ }u2516(64){ }u2517(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1550
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1853 1854 1859 1862
;; live  gen 	 1550
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859

( 168 169 )->[170]->( 171 172 )
;; bb 170 artificial_defs: { }
;; bb 170 artificial_uses: { u2537(29){ }u2538(31){ }u2539(64){ }u2540(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859

( 170 )->[171]->( 175 )
;; bb 171 artificial_defs: { }
;; bb 171 artificial_uses: { u2543(29){ }u2544(31){ }u2545(64){ }u2546(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 600 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1560 1561 1564 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 1560 1561 1564 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859

( 170 )->[172]->( )
;; bb 172 artificial_defs: { }
;; bb 172 artificial_uses: { u2562(29){ }u2563(31){ }u2564(64){ }u2565(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1566 1567 1569
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1566 1567 1569
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 166 )->[173]->( 175 174 )
;; bb 173 artificial_defs: { }
;; bb 173 artificial_uses: { u2576(29){ }u2577(31){ }u2578(64){ }u2579(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 791 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 791 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1853 1854 1859 1862

( 173 )->[174]->( 175 )
;; bb 174 artificial_defs: { }
;; bb 174 artificial_uses: { u2582(29){ }u2583(31){ }u2584(64){ }u2585(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1570
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1853 1854 1859 1862
;; live  gen 	 1570
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859

( 171 174 173 )->[175]->( 176 )
;; bb 175 artificial_defs: { }
;; bb 175 artificial_uses: { u2605(29){ }u2606(31){ }u2607(64){ }u2608(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859

( 182 175 )->[176]->( 183 177 )
;; bb 176 artificial_defs: { }
;; bb 176 artificial_uses: { u2613(29){ }u2614(31){ }u2615(64){ }u2616(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 777 1580 1582
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859
;; live  gen 	 66 [cc] 777 1580 1582
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1853 1854 1859

( 176 274 )->[177]->( 300 )
;; bb 177 artificial_defs: { }
;; bb 177 artificial_uses: { u2621(29){ }u2622(31){ }u2623(64){ }u2624(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1583 1585
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 240 1583 1585
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

( 144 )->[178]->( 179 180 )
;; bb 178 artificial_defs: { }
;; bb 178 artificial_uses: { u2670(29){ }u2671(31){ }u2672(64){ }u2673(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 603
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 66 [cc] 603
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1710 1853 1854 1859
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1853 1854 1859

( 178 )->[179]->( )
;; bb 179 artificial_defs: { }
;; bb 179 artificial_uses: { u2682(29){ }u2683(31){ }u2684(64){ }u2685(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1605 1606
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1605 1606
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 178 )->[180]->( 181 182 )
;; bb 180 artificial_defs: { }
;; bb 180 artificial_uses: { u2692(29){ }u2693(31){ }u2694(64){ }u2695(65){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1710 1853 1854 1859
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 604 606 608 1607 1609 1613
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 66 [cc] 604 606 608 1607 1609 1613
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1853 1854 1859

( 180 )->[181]->( )
;; bb 181 artificial_defs: { }
;; bb 181 artificial_uses: { u2718(29){ }u2719(31){ }u2720(64){ }u2721(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1614 1615
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1614 1615
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 180 )->[182]->( 176 )
;; bb 182 artificial_defs: { }
;; bb 182 artificial_uses: { u2728(29){ }u2729(31){ }u2730(64){ }u2731(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1853 1854 1859
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859

( 176 )->[183]->( 184 )
;; bb 183 artificial_defs: { }
;; bb 183 artificial_uses: { u2739(29){ }u2740(31){ }u2741(64){ }u2742(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 1616 1875 1876 1877 1878
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
;; live  gen 	 1616 1875 1876 1877 1878
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 613 647 752 777 1616 1710 1853 1854 1859

( 183 274 )->[184]->( 185 186 )
;; bb 184 artificial_defs: { }
;; bb 184 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 611 613 647 752
;; live  in  	 777 1710
;; live  gen 	 0 [x0] 66 [cc] 611 613 647 752
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 613 647 752 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 611 647 752 777 1616 1710

( 184 )->[185]->( )
;; bb 185 artificial_defs: { }
;; bb 185 artificial_uses: { u2758(29){ }u2759(31){ }u2760(64){ }u2761(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 184 )->[186]->( 187 188 )
;; bb 186 artificial_defs: { }
;; bb 186 artificial_uses: { u2765(29){ }u2766(31){ }u2767(64){ }u2768(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 647 752 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 777 1875
;; lr  def 	 66 [cc] 811 1622 1623
;; live  in  	 611 647 752 777 1616 1710
;; live  gen 	 66 [cc] 811 1622 1623
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 647 752 777 811 1616 1710

( 186 )->[187]->( )
;; bb 187 artificial_defs: { }
;; bb 187 artificial_uses: { u2778(29){ }u2779(31){ }u2780(64){ }u2781(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1624 1625 1626 1627 1628 1629 1630
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1624 1625 1626 1627 1628 1629 1630
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 186 )->[188]->( 189 190 )
;; bb 188 artificial_defs: { }
;; bb 188 artificial_uses: { u2794(29){ }u2795(31){ }u2796(64){ }u2797(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616
;; lr  def 	 66 [cc] 1633
;; live  in  	 647 752 777 811 1616 1710
;; live  gen 	 66 [cc] 1633
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 647 752 777 811 1710

( 188 )->[189]->( 190 )
;; bb 189 artificial_defs: { }
;; bb 189 artificial_uses: { u2803(29){ }u2804(31){ }u2805(64){ }u2806(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1876 1877
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1634 1635 1636 1638 1856
;; live  in  	 647 752 777 811 1710
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1634 1635 1636 1638 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 647 752 777 811 1710

( 189 188 )->[190]->( 191 288 )
;; bb 190 artificial_defs: { }
;; bb 190 artificial_uses: { u2818(29){ }u2819(31){ }u2820(64){ }u2821(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 811 1616 1859 1875 1878
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 618 653 659 1639 1641 1644 1645 1646 1647 1648 1649 1652 1653 1654 1655 1656 1657 1660 1661 1662 1663 1664 1665 1668
;; live  in  	 647 752 777 811 1710
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 618 653 659 1639 1641 1644 1645 1646 1647 1648 1649 1652 1653 1654 1655 1656 1657 1660 1661 1662 1663 1664 1665 1668
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 618 647 752 777 811 1641 1710

( 190 )->[191]->( 192 193 )
;; bb 191 artificial_defs: { }
;; bb 191 artificial_uses: { u2879(29){ }u2880(31){ }u2881(64){ }u2882(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1669 1670 1671 1673 1856
;; live  in  	 618 647 752 777 811 1641 1710
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 1669 1670 1671 1673 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 647 752 777 811 1641 1671 1710

( 191 288 )->[192]->( )
;; bb 192 artificial_defs: { }
;; bb 192 artificial_uses: { u2894(29){ }u2895(31){ }u2896(64){ }u2897(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1674 1675
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1674 1675
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 191 )->[193]->( 194 195 )
;; bb 193 artificial_defs: { }
;; bb 193 artificial_uses: { u2903(29){ }u2904(31){ }u2905(64){ }u2906(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616
;; lr  def 	 66 [cc] 1678
;; live  in  	 647 752 777 811 1641 1671 1710
;; live  gen 	 66 [cc] 1678
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 647 752 777 811 1671 1710

( 193 )->[194]->( 195 )
;; bb 194 artificial_defs: { }
;; bb 194 artificial_uses: { u2912(29){ }u2913(31){ }u2914(64){ }u2915(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1671
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1679 1680 1683
;; live  in  	 647 752 777 811 1671 1710
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1679 1680 1683
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 647 777 811 1710

( 193 194 288 )->[195]->( 297 196 )
;; bb 195 artificial_defs: { }
;; bb 195 artificial_uses: { u2928(29){ }u2929(31){ }u2930(64){ }u2931(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1616 1875
;; lr  def 	 66 [cc] 623 624 1684 1687 1861
;; live  in  	 647 777 811 1710
;; live  gen 	 66 [cc] 623 624 1684 1687 1861
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 647 777 811 1684 1710 1861

( 195 )->[196]->( 297 197 )
;; bb 196 artificial_defs: { }
;; bb 196 artificial_uses: { u2946(29){ }u2947(31){ }u2948(64){ }u2949(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647
;; lr  def 	 66 [cc] 1688
;; live  in  	 623 624 647 777 811 1684 1710 1861
;; live  gen 	 66 [cc] 1688
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 647 777 811 1684 1710 1861

( 196 )->[197]->( 198 199 )
;; bb 197 artificial_defs: { }
;; bb 197 artificial_uses: { u2955(29){ }u2956(31){ }u2957(64){ }u2958(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616 1861
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 625 626 666 746
;; live  in  	 623 624 647 777 811 1684 1710 1861
;; live  gen 	 0 [x0] 66 [cc] 625 626 666 746
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 666 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 746 777 811 1710 1861

( 197 )->[198]->( )
;; bb 198 artificial_defs: { }
;; bb 198 artificial_uses: { u2977(29){ }u2978(31){ }u2979(64){ }u2980(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 197 )->[199]->( 200 241 )
;; bb 199 artificial_defs: { }
;; bb 199 artificial_uses: { u2984(29){ }u2985(31){ }u2986(64){ }u2987(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746 1861
;; lr  def 	 66 [cc] 668 1694
;; live  in  	 623 624 625 626 647 746 777 811 1710 1861
;; live  gen 	 66 [cc] 668 1694
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 746 777 811 1710 1861

( 199 )->[200]->( 201 207 )
;; bb 200 artificial_defs: { }
;; bb 200 artificial_uses: { u2998(29){ }u2999(31){ }u3000(64){ }u3001(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 1861
;; lr  def 	 66 [cc] 672 742 1695 1696 1697 1698
;; live  in  	 623 624 625 626 647 668 746 777 811 1710 1861
;; live  gen 	 66 [cc] 672 742 1695 1696 1697 1698
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 777 811 1710 1861

( 200 )->[201]->( 202 204 )
;; bb 201 artificial_defs: { }
;; bb 201 artificial_uses: { u3027(29){ }u3028(31){ }u3029(64){ }u3030(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 742
;; lr  def 	 66 [cc] 1699 1700 1701
;; live  in  	 623 624 625 626 647 668 672 742 746 777 811 1710 1861
;; live  gen 	 66 [cc] 1699 1700 1701
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 777 811 1710 1861

( 201 )->[202]->( 203 205 )
;; bb 202 artificial_defs: { }
;; bb 202 artificial_uses: { u3039(29){ }u3040(31){ }u3041(64){ }u3042(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 742
;; lr  def 	 66 [cc] 1702 1703 1704
;; live  in  	 623 624 625 626 647 668 672 742 746 777 811 1710 1861
;; live  gen 	 66 [cc] 1702 1703 1704
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 777 811 1710 1861

( 202 )->[203]->( 206 )
;; bb 203 artificial_defs: { }
;; bb 203 artificial_uses: { u3051(29){ }u3052(31){ }u3053(64){ }u3054(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668
;; lr  def 	 66 [cc] 806 1705 1706 1707
;; live  in  	 623 624 625 626 647 668 672 742 746 777 811 1710 1861
;; live  gen 	 66 [cc] 806 1705 1706 1707
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 777 806 811 1710 1861

( 201 )->[204]->( 206 )
;; bb 204 artificial_defs: { }
;; bb 204 artificial_uses: { u3062(29){ }u3063(31){ }u3064(64){ }u3065(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 623 624 625 626 647 668 672 742 746 777 811 1710 1861
;; live  gen 	 806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 777 806 811 1710 1861

( 202 )->[205]->( 206 )
;; bb 205 artificial_defs: { }
;; bb 205 artificial_uses: { u3067(29){ }u3068(31){ }u3069(64){ }u3070(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 623 624 625 626 647 668 672 742 746 777 811 1710 1861
;; live  gen 	 806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 777 806 811 1710 1861

( 205 203 204 )->[206]->( 208 214 )
;; bb 206 artificial_defs: { }
;; bb 206 artificial_uses: { u3071(29){ }u3072(31){ }u3073(64){ }u3074(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 742 1861
;; lr  def 	 66 [cc]
;; live  in  	 623 624 625 626 647 668 672 742 746 777 806 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 777 806 811 1710 1861

( 200 )->[207]->( 208 )
;; bb 207 artificial_defs: { }
;; bb 207 artificial_uses: { u3078(29){ }u3079(31){ }u3080(64){ }u3081(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 623 624 625 626 647 668 672 742 746 777 811 1710 1861
;; live  gen 	 806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 777 806 811 1710 1861

( 207 206 )->[208]->( 209 213 )
;; bb 208 artificial_defs: { }
;; bb 208 artificial_uses: { u3082(29){ }u3083(31){ }u3084(64){ }u3085(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 742 1861
;; lr  def 	 66 [cc] 753 754 799 1708 1709
;; live  in  	 623 624 625 626 647 668 672 742 746 777 806 811 1710 1861
;; live  gen 	 66 [cc] 753 754 799 1708 1709
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 742 746 753 754 777 799 806 811 1710 1861

( 208 )->[209]->( 210 )
;; bb 209 artificial_defs: { }
;; bb 209 artificial_uses: { u3095(29){ }u3096(31){ }u3097(64){ }u3098(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 742 746 806 1710 1861
;; lr  def 	 770 776 782 800 1710 1711 1716 1717 1857 1858
;; live  in  	 623 624 625 626 647 668 672 742 746 753 754 777 799 806 811 1710 1861
;; live  gen 	 770 776 782 800 1710 1711 1716 1717 1857 1858
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 746 753 754 770 776 777 782 799 800 806 811 1710 1857 1858 1861

( 209 210 )->[210]->( 210 212 )
;; bb 210 artificial_defs: { }
;; bb 210 artificial_uses: { u3115(29){ }u3116(31){ }u3117(64){ }u3118(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 753 770 776 782 800 1857 1858
;; lr  def 	 66 [cc] 770 776 795 1719 1720 1722 1724
;; live  in  	 623 624 625 626 647 668 672 746 753 754 770 776 777 782 799 800 806 811 1710 1857 1858 1861
;; live  gen 	 66 [cc] 770 776 795 1719 1720 1722 1724
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 746 753 754 770 776 777 782 799 800 806 811 1710 1857 1858 1861

( 210 )->[212]->( 213 214 )
;; bb 212 artificial_defs: { }
;; bb 212 artificial_uses: { u3137(29){ }u3138(31){ }u3139(64){ }u3140(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 754 799 806
;; lr  def 	 66 [cc] 806
;; live  in  	 623 624 625 626 647 668 672 746 754 777 799 806 811 1710 1861
;; live  gen 	 66 [cc] 806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 746 777 806 811 1710 1861

( 212 208 )->[213]->( 214 )
;; bb 213 artificial_defs: { }
;; bb 213 artificial_uses: { u3148(29){ }u3149(31){ }u3150(64){ }u3151(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 806
;; lr  def 	 66 [cc] 1725 1726 1727
;; live  in  	 623 624 625 626 647 668 672 746 777 806 811 1710 1861
;; live  gen 	 66 [cc] 1725 1726 1727
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 746 777 811 1710 1861

( 213 206 212 )->[214]->( 215 )
;; bb 214 artificial_defs: { }
;; bb 214 artificial_uses: { u3160(29){ }u3161(31){ }u3162(64){ }u3163(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715 745
;; live  in  	 623 624 625 626 647 668 672 746 777 811 1710 1861
;; live  gen 	 715 745
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861

( 214 239 )->[215]->( 239 216 )
;; bb 215 artificial_defs: { }
;; bb 215 artificial_uses: { u3165(29){ }u3166(31){ }u3167(64){ }u3168(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672
;; lr  def 	 66 [cc] 1728
;; live  in  	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861
;; live  gen 	 66 [cc] 1728
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861

( 215 )->[216]->( 217 239 )
;; bb 216 artificial_defs: { }
;; bb 216 artificial_uses: { u3175(29){ }u3176(31){ }u3177(64){ }u3178(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 66 [cc]
;; live  in  	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861

( 216 )->[217]->( 218 239 )
;; bb 217 artificial_defs: { }
;; bb 217 artificial_uses: { u3182(29){ }u3183(31){ }u3184(64){ }u3185(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647 745
;; lr  def 	 66 [cc] 809 1730 1731
;; live  in  	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861
;; live  gen 	 66 [cc] 809 1730 1731
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861

( 217 )->[218]->( 220 )
;; bb 218 artificial_defs: { }
;; bb 218 artificial_uses: { u3197(29){ }u3198(31){ }u3199(64){ }u3200(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 745 809
;; lr  def 	 456 581 609
;; live  in  	 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861
;; live  gen 	 456 581 609
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 456 581 609 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861

( 223 )->[219]->( 220 )
;; bb 219 artificial_defs: { }
;; bb 219 artificial_uses: { u3204(29){ }u3205(31){ }u3206(64){ }u3207(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 647 727
;; lr  def 	 456 581
;; live  in  	 581 609 623 624 625 626 647 668 672 715 727 745 746 777 809 811 1710 1861
;; live  gen 	 456 581
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 456 581 609 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861

( 218 219 )->[220]->( 221 222 )
;; bb 220 artificial_defs: { }
;; bb 220 artificial_uses: { u3211(29){ }u3212(31){ }u3213(64){ }u3214(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581
;; lr  def 	 66 [cc]
;; live  in  	 456 581 609 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 581 609 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861

( 220 )->[221]->( )
;; bb 221 artificial_defs: { }
;; bb 221 artificial_uses: { u3220(29){ }u3221(31){ }u3222(64){ }u3223(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1732 1733 1735 1736 1737 1738 1739
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1732 1733 1735 1736 1737 1738 1739
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 220 )->[222]->( 223 277 )
;; bb 222 artificial_defs: { }
;; bb 222 artificial_uses: { u3236(29){ }u3237(31){ }u3238(64){ }u3239(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609
;; lr  def 	 66 [cc] 609
;; live  in  	 581 609 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc] 609
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 581 609 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861

( 222 )->[223]->( 219 224 )
;; bb 223 artificial_defs: { }
;; bb 223 artificial_uses: { u3244(29){ }u3245(31){ }u3246(64){ }u3247(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 668 1861
;; lr  def 	 66 [cc] 727 731 1741 1742
;; live  in  	 581 609 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc] 727 731 1741 1742
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 581 609 623 624 625 626 647 668 672 715 727 731 745 746 777 809 811 1710 1861

( 223 )->[224]->( 225 278 )
;; bb 224 artificial_defs: { }
;; bb 224 artificial_uses: { u3261(29){ }u3262(31){ }u3263(64){ }u3264(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 1861
;; lr  def 	 66 [cc]
;; live  in  	 609 623 624 625 626 647 668 672 715 731 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 609 623 624 625 626 647 668 672 715 731 745 746 777 809 811 1710 1861

( 224 )->[225]->( 227 226 )
;; bb 225 artificial_defs: { }
;; bb 225 artificial_uses: { u3270(29){ }u3271(31){ }u3272(64){ }u3273(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 731
;; lr  def 	 66 [cc] 733
;; live  in  	 609 623 624 625 626 647 668 672 715 731 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc] 733
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 733 745 746 777 809 811 1710 1861

( 225 )->[226]->( 230 )
;; bb 226 artificial_defs: { }
;; bb 226 artificial_uses: { u3280(29){ }u3281(31){ }u3282(64){ }u3283(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672 809
;; lr  def 	 461 805
;; live  in  	 623 624 625 626 647 668 672 715 733 745 746 777 809 811 1710 1861
;; live  gen 	 461 805
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 461 623 624 625 626 647 668 672 715 733 745 746 777 805 809 811 1710 1861

( 225 228 )->[227]->( )
;; bb 227 artificial_defs: { }
;; bb 227 artificial_uses: { u3286(29){ }u3287(31){ }u3288(64){ }u3289(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1743 1744 1746 1747 1748 1749 1750
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1743 1744 1746 1747 1748 1749 1750
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 230 )->[228]->( 227 229 )
;; bb 228 artificial_defs: { }
;; bb 228 artificial_uses: { u3302(29){ }u3303(31){ }u3304(64){ }u3305(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 734
;; lr  def 	 66 [cc]
;; live  in  	 461 623 624 625 626 647 668 672 715 734 735 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 461 623 624 625 626 647 668 672 715 734 735 745 746 777 809 811 1710 1861

( 228 )->[229]->( 230 )
;; bb 229 artificial_defs: { }
;; bb 229 artificial_uses: { u3308(29){ }u3309(31){ }u3310(64){ }u3311(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 734 735
;; lr  def 	 733 805
;; live  in  	 461 623 624 625 626 647 668 672 715 734 735 745 746 777 809 811 1710 1861
;; live  gen 	 733 805
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 461 623 624 625 626 647 668 672 715 733 745 746 777 805 809 811 1710 1861

( 226 229 )->[230]->( 228 231 )
;; bb 230 artificial_defs: { }
;; bb 230 artificial_uses: { u3315(29){ }u3316(31){ }u3317(64){ }u3318(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 668 733 805
;; lr  def 	 66 [cc] 461 734 735 737
;; live  in  	 461 623 624 625 626 647 668 672 715 733 745 746 777 805 809 811 1710 1861
;; live  gen 	 66 [cc] 461 734 735 737
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 461 623 624 625 626 647 668 672 715 734 735 737 745 746 777 809 811 1710 1861

( 230 )->[231]->( 232 233 )
;; bb 231 artificial_defs: { }
;; bb 231 artificial_uses: { u3332(29){ }u3333(31){ }u3334(64){ }u3335(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 734 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 734 737
;; lr  def 	 66 [cc]
;; live  in  	 623 624 625 626 647 668 672 715 734 737 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861

( 231 )->[232]->( )
;; bb 232 artificial_defs: { }
;; bb 232 artificial_uses: { u3339(29){ }u3340(31){ }u3341(64){ }u3342(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1751 1752 1754 1755 1756 1757 1758
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1751 1752 1754 1755 1756 1757 1758
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 231 )->[233]->( 238 239 )
;; bb 233 artificial_defs: { }
;; bb 233 artificial_uses: { u3355(29){ }u3356(31){ }u3357(64){ }u3358(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672
;; lr  def 	 66 [cc] 738
;; live  in  	 623 624 625 626 647 668 672 715 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc] 738
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 738 745 746 777 809 811 1710 1861

( 238 )->[235]->( 237 236 )
;; bb 235 artificial_defs: { }
;; bb 235 artificial_uses: { u3369(29){ }u3370(31){ }u3371(64){ }u3372(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 738 739
;; lr  def 	 66 [cc] 1759
;; live  in  	 623 624 625 626 647 668 672 715 738 739 741 745 746 777 811 1710 1861
;; live  gen 	 66 [cc] 1759
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 739 741 745 746 777 811 1710 1861

( 235 )->[236]->( 238 )
;; bb 236 artificial_defs: { }
;; bb 236 artificial_uses: { u3377(29){ }u3378(31){ }u3379(64){ }u3380(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 739 741
;; lr  def 	 738 809
;; live  in  	 623 624 625 626 647 668 672 715 739 741 745 746 777 811 1710 1861
;; live  gen 	 738 809
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 738 745 746 777 809 811 1710 1861

( 235 )->[237]->( )
;; bb 237 artificial_defs: { }
;; bb 237 artificial_uses: { u3384(29){ }u3385(31){ }u3386(64){ }u3387(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1760 1761 1763 1764 1765 1766 1767
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1760 1761 1763 1764 1765 1766 1767
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 233 236 )->[238]->( 235 239 )
;; bb 238 artificial_defs: { }
;; bb 238 artificial_uses: { u3400(29){ }u3401(31){ }u3402(64){ }u3403(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 809
;; lr  def 	 66 [cc] 739 741
;; live  in  	 623 624 625 626 647 668 672 715 738 745 746 777 809 811 1710 1861
;; live  gen 	 66 [cc] 739 741
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 738 739 741 745 746 777 811 1710 1861

( 215 238 278 216 217 233 277 )->[239]->( 215 289 )
;; bb 239 artificial_defs: { }
;; bb 239 artificial_uses: { u3410(29){ }u3411(31){ }u3412(64){ }u3413(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672 745 1861
;; lr  def 	 66 [cc] 672 745
;; live  in  	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861
;; live  gen 	 66 [cc] 672 745
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861

( 199 242 )->[241]->( 243 296 )
;; bb 241 artificial_defs: { }
;; bb 241 artificial_uses: { u3422(29){ }u3423(31){ }u3424(64){ }u3425(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 626
;; lr  def 	 66 [cc] 763
;; live  in  	 623 624 625 626 647 668 746 777 811 1710 1861
;; live  gen 	 66 [cc] 763
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 647 668 746 763 777 811 1710 1861

( 289 )->[242]->( 241 )
;; bb 242 artificial_defs: { }
;; bb 242 artificial_uses: { u3429(29){ }u3430(31){ }u3431(64){ }u3432(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1768 1770 1771
;; live  in  	 623 624 625 626 647 668 746 777 811 1710 1861
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 1768 1770 1771
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 746 777 811 1710 1861

( 241 )->[243]->( 244 )
;; bb 243 artificial_defs: { }
;; bb 243 artificial_uses: { u3446(29){ }u3447(31){ }u3448(64){ }u3449(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 625 763
;; lr  def 	 610 708 715 720 1775 1776 1777 1778 1872 1873 1874
;; live  in  	 623 624 625 647 668 746 763 777 811 1710 1861
;; live  gen 	 610 708 715 720 1775 1776 1777 1778 1872 1873 1874
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 720 746 777 811 1710 1861 1872 1873 1874

( 243 257 )->[244]->( 257 245 )
;; bb 244 artificial_defs: { }
;; bb 244 artificial_uses: { u3457(29){ }u3458(31){ }u3459(64){ }u3460(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 708 715
;; lr  def 	 66 [cc] 674 675 716 1780 1781
;; live  in  	 610 623 624 647 668 708 715 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 674 675 716 1780 1781
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 675 708 715 716 720 746 777 811 1710 1861 1872 1873 1874

( 244 )->[245]->( 279 246 )
;; bb 245 artificial_defs: { }
;; bb 245 artificial_uses: { u3477(29){ }u3478(31){ }u3479(64){ }u3480(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 679 1783 1785 1786 1788
;; live  in  	 610 623 624 647 668 674 675 708 715 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 679 1783 1785 1786 1788
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 675 679 708 715 720 746 777 811 1710 1861 1872 1873 1874

( 245 )->[246]->( 290 247 )
;; bb 246 artificial_defs: { }
;; bb 246 artificial_uses: { u3496(29){ }u3497(31){ }u3498(64){ }u3499(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 1790 1791
;; live  in  	 610 623 624 647 668 674 675 679 708 715 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 1790 1791
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 675 679 708 715 720 746 777 811 1710 1861 1872 1873 1874

( 246 )->[247]->( 257 248 )
;; bb 247 artificial_defs: { }
;; bb 247 artificial_uses: { u3511(29){ }u3512(31){ }u3513(64){ }u3514(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 679 715
;; lr  def 	 66 [cc] 716 1793 1794 1796
;; live  in  	 610 623 624 647 668 674 675 679 708 715 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 716 1793 1794 1796
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 675 708 715 716 720 746 777 811 1710 1861 1872 1873 1874

( 247 )->[248]->( 249 293 )
;; bb 248 artificial_defs: { }
;; bb 248 artificial_uses: { u3525(29){ }u3526(31){ }u3527(64){ }u3528(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 674
;; lr  def 	 66 [cc] 688 690
;; live  in  	 610 623 624 647 668 674 675 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 688 690
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 675 688 690 708 720 746 777 811 1710 1861 1872 1873 1874

( 248 )->[249]->( 280 292 )
;; bb 249 artificial_defs: { }
;; bb 249 artificial_uses: { u3534(29){ }u3535(31){ }u3536(64){ }u3537(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 675
;; lr  def 	 66 [cc] 692 694
;; live  in  	 610 623 624 647 668 674 675 688 690 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 692 694
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 675 688 690 692 694 708 720 746 777 811 1710 1861 1872 1873 1874

( 292 )->[250]->( 251 252 )
;; bb 250 artificial_defs: { }
;; bb 250 artificial_uses: { u3543(29){ }u3544(31){ }u3545(64){ }u3546(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 675 690
;; lr  def 	 66 [cc]
;; live  in  	 610 623 624 647 668 674 675 688 690 692 694 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 688 692 694 708 720 746 777 811 1710 1861 1872 1873 1874

( 250 )->[251]->( 252 )
;; bb 251 artificial_defs: { }
;; bb 251 artificial_uses: { u3550(29){ }u3551(31){ }u3552(64){ }u3553(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 688 746 1874
;; lr  def 	 1797
;; live  in  	 610 623 624 647 668 674 688 692 694 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 1797
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 688 692 694 708 720 746 777 811 1710 1861 1872 1873 1874

( 250 251 )->[252]->( 253 254 )
;; bb 252 artificial_defs: { }
;; bb 252 artificial_uses: { u3557(29){ }u3558(31){ }u3559(64){ }u3560(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 674 694
;; lr  def 	 66 [cc]
;; live  in  	 610 623 624 647 668 674 688 692 694 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 688 692 708 720 746 777 811 1710 1861 1872 1873 1874

( 252 )->[253]->( 254 )
;; bb 253 artificial_defs: { }
;; bb 253 artificial_uses: { u3564(29){ }u3565(31){ }u3566(64){ }u3567(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 692 746 1874
;; lr  def 	 1798
;; live  in  	 610 623 624 647 668 688 692 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 1798
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 688 692 708 720 746 777 811 1710 1861 1872 1873 1874

( 253 252 292 )->[254]->( 256 255 )
;; bb 254 artificial_defs: { }
;; bb 254 artificial_uses: { u3571(29){ }u3572(31){ }u3573(64){ }u3574(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 688 692
;; lr  def 	 66 [cc] 1799 1800 1801 1802
;; live  in  	 610 623 624 647 668 688 692 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 1799 1800 1801 1802
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 720 746 777 811 1710 1861 1872 1873 1874

( 254 )->[255]->( 257 )
;; bb 255 artificial_defs: { }
;; bb 255 artificial_uses: { u3588(29){ }u3589(31){ }u3590(64){ }u3591(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1872
;; lr  def 	 715 716
;; live  in  	 610 623 624 647 668 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 715 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 716 720 746 777 811 1710 1861 1872 1873 1874

( 254 )->[256]->( 257 )
;; bb 256 artificial_defs: { }
;; bb 256 artificial_uses: { u3602(29){ }u3603(31){ }u3604(64){ }u3605(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1873
;; lr  def 	 715 716
;; live  in  	 610 623 624 647 668 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 715 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 716 720 746 777 811 1710 1861 1872 1873 1874

( 255 244 291 294 256 281 247 )->[257]->( 244 259 )
;; bb 257 artificial_defs: { }
;; bb 257 artificial_uses: { u3607(29){ }u3608(31){ }u3609(64){ }u3610(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 708 720
;; lr  def 	 66 [cc] 708
;; live  in  	 610 623 624 647 668 708 715 716 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 708
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 716 720 746 777 811 1710 1861 1872 1873 1874

( 257 )->[259]->( 260 268 )
;; bb 259 artificial_defs: { }
;; bb 259 artificial_uses: { u3618(29){ }u3619(31){ }u3620(64){ }u3621(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 716 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 716
;; lr  def 	 66 [cc]
;; live  in  	 610 624 647 715 716 746 777 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 610 624 647 715 746 777 811 1710 1861

( 259 )->[260]->( 261 268 )
;; bb 260 artificial_defs: { }
;; bb 260 artificial_uses: { u3624(29){ }u3625(31){ }u3626(64){ }u3627(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1861
;; lr  def 	 66 [cc]
;; live  in  	 610 624 647 715 746 777 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 610 624 647 715 746 777 811 1710 1861

( 296 260 )->[261]->( 262 )
;; bb 261 artificial_defs: { }
;; bb 261 artificial_uses: { u3635(29){ }u3636(31){ }u3637(64){ }u3638(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 436 1869 1870 1871
;; live  in  	 610 624 647 715 746 777 811 1710 1861
;; live  gen 	 436 1869 1870 1871
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; live  out 	 436 610 624 647 715 746 777 811 1710 1861 1869 1870 1871

( 261 266 )->[262]->( 263 266 )
;; bb 262 artificial_defs: { }
;; bb 262 artificial_uses: { u3640(29){ }u3641(31){ }u3642(64){ }u3643(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 624 715
;; lr  def 	 66 [cc] 1804 1805
;; live  in  	 436 610 624 647 715 746 777 811 1710 1861 1869 1870 1871
;; live  gen 	 66 [cc] 1804 1805
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; live  out 	 436 610 624 647 715 746 777 811 1710 1861 1869 1870 1871

( 262 )->[263]->( 264 265 )
;; bb 263 artificial_defs: { }
;; bb 263 artificial_uses: { u3656(29){ }u3657(31){ }u3658(64){ }u3659(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 647
;; lr  def 	 66 [cc] 710
;; live  in  	 436 610 624 647 746 777 811 1710 1861 1869 1870 1871
;; live  gen 	 66 [cc] 710
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; live  out 	 436 610 624 647 710 746 777 811 1710 1861 1869 1870 1871

( 263 )->[264]->( 266 )
;; bb 264 artificial_defs: { }
;; bb 264 artificial_uses: { u3665(29){ }u3666(31){ }u3667(64){ }u3668(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 710 746 1869 1870 1871
;; lr  def 	 66 [cc] 715 1806 1865 1866 1868
;; live  in  	 436 610 624 647 710 746 777 811 1710 1861 1869 1870 1871
;; live  gen 	 66 [cc] 715 1806 1865 1866 1868
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; live  out 	 436 610 624 647 715 746 777 811 1710 1861 1869 1870 1871

( 263 )->[265]->( 266 )
;; bb 265 artificial_defs: { }
;; bb 265 artificial_uses: { u3689(29){ }u3690(31){ }u3691(64){ }u3692(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 436 610 624 647 746 777 811 1710 1861 1869 1870 1871
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; live  out 	 436 610 624 647 715 746 777 811 1710 1861 1869 1870 1871

( 262 265 264 )->[266]->( 262 268 )
;; bb 266 artificial_defs: { }
;; bb 266 artificial_uses: { u3698(29){ }u3699(31){ }u3700(64){ }u3701(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 1861
;; lr  def 	 66 [cc] 436
;; live  in  	 436 610 624 647 715 746 777 811 1710 1861 1869 1870 1871
;; live  gen 	 66 [cc] 436
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
;; live  out 	 436 610 624 647 715 746 777 811 1710 1861 1869 1870 1871

( 266 259 260 )->[268]->( 269 271 )
;; bb 268 artificial_defs: { }
;; bb 268 artificial_uses: { u3709(29){ }u3710(31){ }u3711(64){ }u3712(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 610 647 715 746 777 811 1710
;; live  gen 	 0 [x0] 66 [cc]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 610 647 715 777 811 1710

( 268 282 )->[269]->( 272 270 )
;; bb 269 artificial_defs: { }
;; bb 269 artificial_uses: { u3721(29){ }u3722(31){ }u3723(64){ }u3724(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715 811 1616
;; lr  def 	 66 [cc] 712 1807 1808 1810 1812 1860
;; live  in  	 647 715 777 811 1710
;; live  gen 	 66 [cc] 712 1807 1808 1810 1812 1860
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 811 1616 1710 1853 1854 1859 1860 1875 1876 1877 1878
;; live  out 	 647 777 811 1710 1860

( 269 )->[270]->( 273 )
;; bb 270 artificial_defs: { }
;; bb 270 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853
;; live  gen 	 1856
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856

( 268 295 )->[271]->( 272 274 )
;; bb 271 artificial_defs: { }
;; bb 271 artificial_uses: { u3736(29){ }u3737(31){ }u3738(64){ }u3739(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 811 1616
;; lr  def 	 66 [cc] 1813 1814 1816 1817 1819 1860
;; live  in  	 610 647 777 811 1710
;; live  gen 	 66 [cc] 1813 1814 1816 1817 1819 1860
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1876 1877 1878
;; live  out 	 647 777 811 1710 1860

( 271 297 269 )->[272]->( 273 274 )
;; bb 272 artificial_defs: { }
;; bb 272 artificial_uses: { u3750(29){ }u3751(31){ }u3752(64){ }u3753(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1860
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 712 1820 1821 1822 1824 1825 1826 1856
;; live  in  	 647 777 811 1710 1860
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 712 1820 1821 1822 1824 1825 1826 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 1616 1710 1853 1854 1856 1859 1875 1876 1877 1878
;; live  out 	 647 777 1710

( 272 270 298 )->[273]->( )
;; bb 273 artificial_defs: { }
;; bb 273 artificial_uses: { u3769(29){ }u3770(31){ }u3771(64){ }u3772(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1828 1831 1832 1833 1834
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 1828 1831 1832 1833 1834
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 272 271 )->[274]->( 184 177 )
;; bb 274 artificial_defs: { }
;; bb 274 artificial_uses: { u3792(29){ }u3793(31){ }u3794(64){ }u3795(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 732 777 1837 1839
;; live  in  	 647 777 1710
;; live  gen 	 0 [x0] 66 [cc] 732 777 1837 1839
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 777 1710

( 75 76 74 )->[276]->( 77 )
;; bb 276 artificial_defs: { }
;; bb 276 artificial_uses: { u3813(29){ }u3814(31){ }u3815(64){ }u3816(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 416
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1853 1854
;; live  gen 	 416
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

( 222 )->[277]->( 239 )
;; bb 277 artificial_defs: { }
;; bb 277 artificial_uses: { u3817(29){ }u3818(31){ }u3819(64){ }u3820(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 623 624 625 626 647 668 672 745 746 777 811 1710 1861
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861

( 224 )->[278]->( 239 )
;; bb 278 artificial_defs: { }
;; bb 278 artificial_uses: { u3821(29){ }u3822(31){ }u3823(64){ }u3824(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 623 624 625 626 647 668 672 745 746 777 811 1710 1861
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 672 715 745 746 777 811 1710 1861

( 245 )->[279]->( 291 )
;; bb 279 artificial_defs: { }
;; bb 279 artificial_uses: { u3826(29){ }u3827(31){ }u3828(64){ }u3829(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 715 1842 1843 1867
;; live  in  	 610 623 624 647 668 674 675 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 715 1842 1843 1867
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 720 746 777 811 1710 1861 1872 1873 1874

( 249 )->[280]->( 281 )
;; bb 280 artificial_defs: { }
;; bb 280 artificial_uses: { u3844(29){ }u3845(31){ }u3846(64){ }u3847(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 610 623 624 647 668 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 720 746 777 811 1710 1861 1872 1873 1874

( 293 280 )->[281]->( 257 )
;; bb 281 artificial_defs: { }
;; bb 281 artificial_uses: { u3852(29){ }u3853(31){ }u3854(64){ }u3855(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 716
;; live  in  	 610 623 624 647 668 708 715 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 716 720 746 777 811 1710 1861 1872 1873 1874

( 289 )->[282]->( 269 )
;; bb 282 artificial_defs: { }
;; bb 282 artificial_uses: { u3859(29){ }u3860(31){ }u3861(64){ }u3862(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 647 715 746 777 811 1710
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 647 715 777 811 1710

( 111 )->[283]->( 285 )
;; bb 283 artificial_defs: { }
;; bb 283 artificial_uses: { u3868(29){ }u3869(31){ }u3870(64){ }u3871(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1897 1898
;; lr  def 	 828 829
;; live  in  	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 828 829
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 828 829 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 113 )->[284]->( 285 )
;; bb 284 artificial_defs: { }
;; bb 284 artificial_uses: { u3872(29){ }u3873(31){ }u3874(64){ }u3875(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1897 1900
;; lr  def 	 828 829
;; live  in  	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 828 829
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 828 829 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 284 114 283 )->[285]->( 286 287 )
;; bb 285 artificial_defs: { }
;; bb 285 artificial_uses: { u3877(29){ }u3878(31){ }u3879(64){ }u3880(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 435 442 443 576 695 714 747 750 751 826 828 829 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 828 829 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 285 )->[286]->( 117 )
;; bb 286 artificial_defs: { }
;; bb 286 artificial_uses: { u3884(29){ }u3885(31){ }u3886(64){ }u3887(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 285 )->[287]->( 299 )
;; bb 287 artificial_defs: { }
;; bb 287 artificial_uses: { u3898(29){ }u3899(31){ }u3900(64){ }u3901(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 828
;; lr  def 	 442 830 831
;; live  in  	 435 442 443 576 695 714 747 750 751 826 828 829 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 442 830 831
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 829 831 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 190 )->[288]->( 192 195 )
;; bb 288 artificial_defs: { }
;; bb 288 artificial_uses: { u3906(29){ }u3907(31){ }u3908(64){ }u3909(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618
;; lr  def 	 66 [cc]
;; live  in  	 618 647 777 811 1710
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 647 777 811 1710

( 239 )->[289]->( 282 242 )
;; bb 289 artificial_defs: { }
;; bb 289 artificial_uses: { u3912(29){ }u3913(31){ }u3914(64){ }u3915(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 66 [cc]
;; live  in  	 623 624 625 626 647 668 715 746 777 811 1710 1861
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 623 624 625 626 647 668 715 746 777 811 1710 1861

( 246 )->[290]->( 291 )
;; bb 290 artificial_defs: { }
;; bb 290 artificial_uses: { u3918(29){ }u3919(31){ }u3920(64){ }u3921(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 610 623 624 647 668 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 720 746 777 811 1710 1861 1872 1873 1874

( 290 279 )->[291]->( 257 )
;; bb 291 artificial_defs: { }
;; bb 291 artificial_uses: { u3926(29){ }u3927(31){ }u3928(64){ }u3929(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 716
;; live  in  	 610 623 624 647 668 708 715 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 716 720 746 777 811 1710 1861 1872 1873 1874

( 249 )->[292]->( 250 254 )
;; bb 292 artificial_defs: { }
;; bb 292 artificial_uses: { u3932(29){ }u3933(31){ }u3934(64){ }u3935(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 674 675
;; lr  def 	 66 [cc] 610
;; live  in  	 610 623 624 647 668 674 675 688 690 692 694 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 610
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 674 675 688 690 692 694 708 720 746 777 811 1710 1861 1872 1873 1874

( 248 )->[293]->( 281 294 )
;; bb 293 artificial_defs: { }
;; bb 293 artificial_uses: { u3941(29){ }u3942(31){ }u3943(64){ }u3944(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 675
;; lr  def 	 66 [cc] 715 1844
;; live  in  	 610 623 624 647 668 675 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 66 [cc] 715 1844
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 720 746 777 811 1710 1861 1872 1873 1874

( 293 )->[294]->( 257 )
;; bb 294 artificial_defs: { }
;; bb 294 artificial_uses: { u3949(29){ }u3950(31){ }u3951(64){ }u3952(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1872
;; lr  def 	 715 716
;; live  in  	 610 623 624 647 668 708 720 746 777 811 1710 1861 1872 1873 1874
;; live  gen 	 715 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
;; live  out 	 610 623 624 647 668 708 715 716 720 746 777 811 1710 1861 1872 1873 1874

( 296 )->[295]->( 271 )
;; bb 295 artificial_defs: { }
;; bb 295 artificial_uses: { u3953(29){ }u3954(31){ }u3955(64){ }u3956(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 746 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 610
;; live  in  	 647 746 777 811 1710
;; live  gen 	 0 [x0] 610
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; live  out 	 610 647 777 811 1710

( 241 )->[296]->( 261 295 )
;; bb 296 artificial_defs: { }
;; bb 296 artificial_uses: { u3961(29){ }u3962(31){ }u3963(64){ }u3964(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1861
;; lr  def 	 66 [cc] 610 715
;; live  in  	 624 647 746 777 811 1710 1861
;; live  gen 	 66 [cc] 610 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
;; live  out 	 610 624 647 715 746 777 811 1710 1861

( 195 196 )->[297]->( 272 298 )
;; bb 297 artificial_defs: { }
;; bb 297 artificial_uses: { u3967(29){ }u3968(31){ }u3969(64){ }u3970(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1616
;; lr  def 	 66 [cc] 1845 1846 1848 1849 1851 1860
;; live  in  	 647 777 811 1710
;; live  gen 	 66 [cc] 1845 1846 1848 1849 1851 1860
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1876 1877 1878
;; live  out 	 647 777 811 1710 1860

( 297 )->[298]->( 273 )
;; bb 298 artificial_defs: { }
;; bb 298 artificial_uses: { u3980(29){ }u3981(31){ }u3982(64){ }u3983(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1853
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 712 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1853
;; live  gen 	 712 1856
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856

( 287 120 119 )->[299]->( 98 121 )
;; bb 299 artificial_defs: { }
;; bb 299 artificial_uses: { u3985(29){ }u3986(31){ }u3987(64){ }u3988(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 443 747 829 831
;; lr  def 	 66 [cc] 443 747 1852
;; live  in  	 435 442 443 576 695 714 747 750 751 826 829 831 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  gen 	 66 [cc] 443 747 1852
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
;; live  out 	 435 442 443 576 695 714 747 750 751 826 1303 1306 1313 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900

( 177 134 136 )->[300]->( 1 )
;; bb 300 artificial_defs: { }
;; bb 300 artificial_uses: { u4001(29){ }u4002(31){ }u4003(64){ }u4004(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  gen 	 0 [x0]
;; live  kill	
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 300 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u4007(0){ }u4008(29){ }u4009(31){ }u4010(64){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; lr  def 	
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 290 to worklist
  Adding insn 307 to worklist
  Adding insn 304 to worklist
  Adding insn 312 to worklist
  Adding insn 320 to worklist
  Adding insn 323 to worklist
  Adding insn 341 to worklist
  Adding insn 338 to worklist
  Adding insn 363 to worklist
  Adding insn 360 to worklist
  Adding insn 370 to worklist
  Adding insn 378 to worklist
  Adding insn 393 to worklist
  Adding insn 391 to worklist
  Adding insn 386 to worklist
  Adding insn 404 to worklist
  Adding insn 422 to worklist
  Adding insn 420 to worklist
  Adding insn 415 to worklist
  Adding insn 433 to worklist
  Adding insn 456 to worklist
  Adding insn 453 to worklist
  Adding insn 449 to worklist
  Adding insn 443 to worklist
  Adding insn 441 to worklist
  Adding insn 470 to worklist
  Adding insn 481 to worklist
  Adding insn 492 to worklist
  Adding insn 515 to worklist
  Adding insn 512 to worklist
  Adding insn 508 to worklist
  Adding insn 502 to worklist
  Adding insn 500 to worklist
  Adding insn 529 to worklist
  Adding insn 540 to worklist
  Adding insn 551 to worklist
  Adding insn 573 to worklist
  Adding insn 570 to worklist
  Adding insn 566 to worklist
  Adding insn 561 to worklist
  Adding insn 559 to worklist
  Adding insn 584 to worklist
  Adding insn 593 to worklist
  Adding insn 607 to worklist
  Adding insn 618 to worklist
  Adding insn 632 to worklist
  Adding insn 661 to worklist
  Adding insn 658 to worklist
  Adding insn 654 to worklist
  Adding insn 649 to worklist
  Adding insn 647 to worklist
  Adding insn 672 to worklist
  Adding insn 681 to worklist
  Adding insn 695 to worklist
  Adding insn 706 to worklist
  Adding insn 720 to worklist
  Adding insn 749 to worklist
  Adding insn 746 to worklist
  Adding insn 742 to worklist
  Adding insn 737 to worklist
  Adding insn 735 to worklist
  Adding insn 760 to worklist
  Adding insn 769 to worklist
  Adding insn 783 to worklist
  Adding insn 794 to worklist
  Adding insn 808 to worklist
  Adding insn 837 to worklist
  Adding insn 834 to worklist
  Adding insn 830 to worklist
  Adding insn 825 to worklist
  Adding insn 823 to worklist
  Adding insn 848 to worklist
  Adding insn 857 to worklist
  Adding insn 871 to worklist
  Adding insn 882 to worklist
  Adding insn 896 to worklist
  Adding insn 920 to worklist
  Adding insn 941 to worklist
  Adding insn 936 to worklist
  Adding insn 944 to worklist
  Adding insn 947 to worklist
  Adding insn 952 to worklist
  Adding insn 956 to worklist
  Adding insn 959 to worklist
  Adding insn 980 to worklist
  Adding insn 1000 to worklist
  Adding insn 1020 to worklist
  Adding insn 1040 to worklist
  Adding insn 1057 to worklist
  Adding insn 1054 to worklist
  Adding insn 1065 to worklist
  Adding insn 1071 to worklist
  Adding insn 1077 to worklist
  Adding insn 1084 to worklist
  Adding insn 1113 to worklist
  Adding insn 1109 to worklist
  Adding insn 1118 to worklist
  Adding insn 1196 to worklist
  Adding insn 1189 to worklist
  Adding insn 1185 to worklist
  Adding insn 1182 to worklist
  Adding insn 1179 to worklist
  Adding insn 1175 to worklist
  Adding insn 1172 to worklist
  Adding insn 1169 to worklist
  Adding insn 1165 to worklist
  Adding insn 1162 to worklist
  Adding insn 1156 to worklist
  Adding insn 1152 to worklist
  Adding insn 1145 to worklist
  Adding insn 1141 to worklist
  Adding insn 1134 to worklist
  Adding insn 1130 to worklist
  Adding insn 1123 to worklist
  Adding insn 1215 to worklist
  Adding insn 1212 to worklist
  Adding insn 1207 to worklist
  Adding insn 1233 to worklist
  Adding insn 1228 to worklist
  Adding insn 1223 to worklist
  Adding insn 1219 to worklist
  Adding insn 1217 to worklist
  Adding insn 1237 to worklist
  Adding insn 1308 to worklist
  Adding insn 1298 to worklist
  Adding insn 1295 to worklist
  Adding insn 1292 to worklist
  Adding insn 1289 to worklist
  Adding insn 1286 to worklist
  Adding insn 1279 to worklist
  Adding insn 1270 to worklist
  Adding insn 1265 to worklist
  Adding insn 1260 to worklist
  Adding insn 1252 to worklist
  Adding insn 1243 to worklist
  Adding insn 1320 to worklist
  Adding insn 1325 to worklist
  Adding insn 1337 to worklist
  Adding insn 1345 to worklist
  Adding insn 1351 to worklist
  Adding insn 1362 to worklist
  Adding insn 1369 to worklist
  Adding insn 1412 to worklist
  Adding insn 1408 to worklist
  Adding insn 1407 to worklist
  Adding insn 1387 to worklist
  Adding insn 1382 to worklist
  Adding insn 1377 to worklist
  Adding insn 1373 to worklist
  Adding insn 1521 to worklist
  Adding insn 1511 to worklist
  Adding insn 1503 to worklist
  Adding insn 1493 to worklist
  Adding insn 1489 to worklist
  Adding insn 1484 to worklist
  Adding insn 1483 to worklist
  Adding insn 1482 to worklist
  Adding insn 1481 to worklist
  Adding insn 1480 to worklist
  Adding insn 1462 to worklist
  Adding insn 1457 to worklist
  Adding insn 1454 to worklist
  Adding insn 1421 to worklist
  Adding insn 1546 to worklist
  Adding insn 1535 to worklist
  Adding insn 1534 to worklist
  Adding insn 1533 to worklist
  Adding insn 1532 to worklist
  Adding insn 1531 to worklist
  Adding insn 1572 to worklist
  Adding insn 1584 to worklist
  Adding insn 1611 to worklist
  Adding insn 1622 to worklist
  Adding insn 1641 to worklist
  Adding insn 1667 to worklist
  Adding insn 1674 to worklist
  Adding insn 1721 to worklist
  Adding insn 1727 to worklist
  Adding insn 1726 to worklist
  Adding insn 1725 to worklist
  Adding insn 1724 to worklist
  Adding insn 1723 to worklist
  Adding insn 1736 to worklist
  Adding insn 1735 to worklist
  Adding insn 1734 to worklist
  Adding insn 1733 to worklist
  Adding insn 1732 to worklist
  Adding insn 1749 to worklist
  Adding insn 1801 to worklist
  Adding insn 1843 to worklist
  Adding insn 1872 to worklist
  Adding insn 1894 to worklist
  Adding insn 1899 to worklist
  Adding insn 1905 to worklist
  Adding insn 1917 to worklist
  Adding insn 1923 to worklist
  Adding insn 1922 to worklist
  Adding insn 1921 to worklist
  Adding insn 1920 to worklist
  Adding insn 1919 to worklist
  Adding insn 1937 to worklist
  Adding insn 1942 to worklist
  Adding insn 1957 to worklist
  Adding insn 1956 to worklist
  Adding insn 1955 to worklist
  Adding insn 1954 to worklist
  Adding insn 1953 to worklist
  Adding insn 2001 to worklist
  Adding insn 2007 to worklist
  Adding insn 2041 to worklist
  Adding insn 2053 to worklist
  Adding insn 2102 to worklist
  Adding insn 2133 to worklist
  Adding insn 2147 to worklist
  Adding insn 2146 to worklist
  Adding insn 2169 to worklist
  Adding insn 2200 to worklist
  Adding insn 2196 to worklist
  Adding insn 2207 to worklist
  Adding insn 2222 to worklist
  Adding insn 2237 to worklist
  Adding insn 2231 to worklist
  Adding insn 2242 to worklist
  Adding insn 2266 to worklist
  Adding insn 2260 to worklist
  Adding insn 2271 to worklist
  Adding insn 2277 to worklist
  Adding insn 2285 to worklist
  Adding insn 2296 to worklist
  Adding insn 2322 to worklist
  Adding insn 2317 to worklist
  Adding insn 2313 to worklist
  Adding insn 2310 to worklist
  Adding insn 2303 to worklist
  Adding insn 2333 to worklist
  Adding insn 2337 to worklist
  Adding insn 2352 to worklist
  Adding insn 2348 to worklist
  Adding insn 2360 to worklist
  Adding insn 2369 to worklist
  Adding insn 2377 to worklist
  Adding insn 2385 to worklist
  Adding insn 2407 to worklist
  Adding insn 2412 to worklist
  Adding insn 2410 to worklist
  Adding insn 2423 to worklist
  Adding insn 2454 to worklist
  Adding insn 2457 to worklist
  Adding insn 2473 to worklist
  Adding insn 2470 to worklist
  Adding insn 2467 to worklist
  Adding insn 2464 to worklist
  Adding insn 2461 to worklist
  Adding insn 2497 to worklist
  Adding insn 2500 to worklist
  Adding insn 2516 to worklist
  Adding insn 2513 to worklist
  Adding insn 2510 to worklist
  Adding insn 2507 to worklist
  Adding insn 2504 to worklist
  Adding insn 2561 to worklist
  Adding insn 2577 to worklist
  Adding insn 2574 to worklist
  Adding insn 2571 to worklist
  Adding insn 2568 to worklist
  Adding insn 2565 to worklist
  Adding insn 2602 to worklist
  Adding insn 2617 to worklist
  Adding insn 2628 to worklist
  Adding insn 2639 to worklist
  Adding insn 2643 to worklist
  Adding insn 2646 to worklist
  Adding insn 2662 to worklist
  Adding insn 2659 to worklist
  Adding insn 2656 to worklist
  Adding insn 2653 to worklist
  Adding insn 2650 to worklist
  Adding insn 2666 to worklist
  Adding insn 2684 to worklist
  Adding insn 2679 to worklist
  Adding insn 2702 to worklist
  Adding insn 2698 to worklist
  Adding insn 2707 to worklist
  Adding insn 2723 to worklist
  Adding insn 2720 to worklist
  Adding insn 2717 to worklist
  Adding insn 2714 to worklist
  Adding insn 2711 to worklist
  Adding insn 2730 to worklist
  Adding insn 2737 to worklist
  Adding insn 2785 to worklist
  Adding insn 2753 to worklist
  Adding insn 2739 to worklist
  Adding insn 2800 to worklist
  Adding insn 2794 to worklist
  Adding insn 2807 to worklist
  Adding insn 2805 to worklist
  Adding insn 2835 to worklist
  Adding insn 2829 to worklist
  Adding insn 2842 to worklist
  Adding insn 2840 to worklist
  Adding insn 2847 to worklist
  Adding insn 2868 to worklist
  Adding insn 2863 to worklist
  Adding insn 2871 to worklist
  Adding insn 2886 to worklist
  Adding insn 2899 to worklist
  Adding insn 2907 to worklist
  Adding insn 2920 to worklist
  Adding insn 2972 to worklist
  Adding insn 2967 to worklist
  Adding insn 2943 to worklist
  Adding insn 2937 to worklist
  Adding insn 2927 to worklist
  Adding insn 2986 to worklist
  Adding insn 2984 to worklist
  Adding insn 2992 to worklist
  Adding insn 2991 to worklist
  Adding insn 3000 to worklist
  Adding insn 3017 to worklist
  Adding insn 3038 to worklist
  Adding insn 3042 to worklist
  Adding insn 3062 to worklist
  Adding insn 3057 to worklist
  Adding insn 3065 to worklist
  Adding insn 3082 to worklist
  Adding insn 3099 to worklist
  Adding insn 3110 to worklist
  Adding insn 3106 to worklist
  Adding insn 3121 to worklist
  Adding insn 3117 to worklist
  Adding insn 3128 to worklist
  Adding insn 3134 to worklist
  Adding insn 3143 to worklist
  Adding insn 3174 to worklist
  Adding insn 3167 to worklist
  Adding insn 3178 to worklist
  Adding insn 3186 to worklist
  Adding insn 3201 to worklist
  Adding insn 3205 to worklist
  Adding insn 3216 to worklist
  Adding insn 3229 to worklist
  Adding insn 3243 to worklist
  Adding insn 3253 to worklist
  Adding insn 3268 to worklist
  Adding insn 3276 to worklist
  Adding insn 3284 to worklist
  Adding insn 3302 to worklist
  Adding insn 3306 to worklist
  Adding insn 3325 to worklist
  Adding insn 3315 to worklist
  Adding insn 3328 to worklist
  Adding insn 3342 to worklist
  Adding insn 3355 to worklist
  Adding insn 3362 to worklist
  Adding insn 3381 to worklist
  Adding insn 3398 to worklist
  Adding insn 3412 to worklist
  Adding insn 3424 to worklist
  Adding insn 3460 to worklist
  Adding insn 3489 to worklist
  Adding insn 3502 to worklist
  Adding insn 3511 to worklist
  Adding insn 3521 to worklist
  Adding insn 3526 to worklist
  Adding insn 3531 to worklist
  Adding insn 3537 to worklist
  Adding insn 3540 to worklist
  Adding insn 3544 to worklist
  Adding insn 3551 to worklist
  Adding insn 3560 to worklist
  Adding insn 3575 to worklist
  Adding insn 3578 to worklist
  Adding insn 3583 to worklist
  Adding insn 3596 to worklist
  Adding insn 3601 to worklist
  Adding insn 3625 to worklist
  Adding insn 3635 to worklist
  Adding insn 3632 to worklist
  Adding insn 3663 to worklist
  Adding insn 3658 to worklist
  Adding insn 3695 to worklist
  Adding insn 3690 to worklist
  Adding insn 3714 to worklist
  Adding insn 3708 to worklist
  Adding insn 3737 to worklist
  Adding insn 3734 to worklist
  Adding insn 3754 to worklist
  Adding insn 3743 to worklist
  Adding insn 3818 to worklist
  Adding insn 3831 to worklist
  Adding insn 3837 to worklist
  Adding insn 3836 to worklist
  Adding insn 3835 to worklist
  Adding insn 3834 to worklist
  Adding insn 3833 to worklist
  Adding insn 3851 to worklist
  Adding insn 3870 to worklist
  Adding insn 3889 to worklist
  Adding insn 3899 to worklist
  Adding insn 3908 to worklist
  Adding insn 3918 to worklist
  Adding insn 3948 to worklist
  Adding insn 3943 to worklist
  Adding insn 3970 to worklist
  Adding insn 3978 to worklist
Finished finding needed instructions:
processing block 53 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 186 to worklist
  Adding insn 919 to worklist
  Adding insn 918 to worklist
  Adding insn 917 to worklist
  Adding insn 916 to worklist
  Adding insn 915 to worklist
processing block 10 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 362 to worklist
  Adding insn 359 to worklist
  Adding insn 358 to worklist
  Adding insn 357 to worklist
  Adding insn 356 to worklist
  Adding insn 355 to worklist
  Adding insn 354 to worklist
  Adding insn 353 to worklist
  Adding insn 352 to worklist
  Adding insn 351 to worklist
  Adding insn 350 to worklist
  Adding insn 349 to worklist
  Adding insn 347 to worklist
  Adding insn 346 to worklist
processing block 31 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 641 to worklist
  Adding insn 639 to worklist
processing block 30 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 176 to worklist
  Adding insn 631 to worklist
  Adding insn 630 to worklist
  Adding insn 629 to worklist
  Adding insn 628 to worklist
  Adding insn 627 to worklist
  Adding insn 626 to worklist
  Adding insn 625 to worklist
processing block 29 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 617 to worklist
  Adding insn 616 to worklist
  Adding insn 615 to worklist
processing block 28 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
  Adding insn 175 to worklist
  Adding insn 606 to worklist
  Adding insn 605 to worklist
  Adding insn 604 to worklist
  Adding insn 603 to worklist
  Adding insn 602 to worklist
  Adding insn 601 to worklist
  Adding insn 600 to worklist
  Adding insn 599 to worklist
  Adding insn 598 to worklist
processing block 27 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 592 to worklist
  Adding insn 591 to worklist
processing block 26 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 174 to worklist
  Adding insn 583 to worklist
  Adding insn 582 to worklist
  Adding insn 581 to worklist
  Adding insn 580 to worklist
  Adding insn 579 to worklist
  Adding insn 578 to worklist
  Adding insn 577 to worklist
processing block 25 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 572 to worklist
  Adding insn 571 to worklist
  Adding insn 569 to worklist
  Adding insn 568 to worklist
  Adding insn 567 to worklist
  Adding insn 565 to worklist
  Adding insn 564 to worklist
  Adding insn 563 to worklist
  Adding insn 562 to worklist
  Adding insn 560 to worklist
processing block 38 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 729 to worklist
  Adding insn 727 to worklist
processing block 37 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 179 to worklist
  Adding insn 719 to worklist
  Adding insn 718 to worklist
  Adding insn 717 to worklist
  Adding insn 716 to worklist
  Adding insn 715 to worklist
  Adding insn 714 to worklist
  Adding insn 713 to worklist
processing block 36 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 705 to worklist
  Adding insn 704 to worklist
  Adding insn 703 to worklist
processing block 35 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
  Adding insn 178 to worklist
  Adding insn 694 to worklist
  Adding insn 693 to worklist
  Adding insn 692 to worklist
  Adding insn 691 to worklist
  Adding insn 690 to worklist
  Adding insn 689 to worklist
  Adding insn 688 to worklist
  Adding insn 687 to worklist
  Adding insn 686 to worklist
processing block 34 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 680 to worklist
  Adding insn 679 to worklist
processing block 33 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 177 to worklist
  Adding insn 671 to worklist
  Adding insn 670 to worklist
  Adding insn 669 to worklist
  Adding insn 668 to worklist
  Adding insn 667 to worklist
  Adding insn 666 to worklist
  Adding insn 665 to worklist
processing block 32 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 660 to worklist
  Adding insn 659 to worklist
  Adding insn 657 to worklist
  Adding insn 656 to worklist
  Adding insn 655 to worklist
  Adding insn 653 to worklist
  Adding insn 652 to worklist
  Adding insn 651 to worklist
  Adding insn 650 to worklist
  Adding insn 648 to worklist
processing block 45 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 817 to worklist
  Adding insn 815 to worklist
processing block 44 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 182 to worklist
  Adding insn 807 to worklist
  Adding insn 806 to worklist
  Adding insn 805 to worklist
  Adding insn 804 to worklist
  Adding insn 803 to worklist
  Adding insn 802 to worklist
  Adding insn 801 to worklist
processing block 43 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 793 to worklist
  Adding insn 792 to worklist
  Adding insn 791 to worklist
processing block 42 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
  Adding insn 181 to worklist
  Adding insn 782 to worklist
  Adding insn 781 to worklist
  Adding insn 780 to worklist
  Adding insn 779 to worklist
  Adding insn 778 to worklist
  Adding insn 777 to worklist
  Adding insn 776 to worklist
  Adding insn 775 to worklist
  Adding insn 774 to worklist
processing block 41 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 768 to worklist
  Adding insn 767 to worklist
processing block 40 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 180 to worklist
  Adding insn 759 to worklist
  Adding insn 758 to worklist
  Adding insn 757 to worklist
  Adding insn 756 to worklist
  Adding insn 755 to worklist
  Adding insn 754 to worklist
  Adding insn 753 to worklist
processing block 39 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 748 to worklist
  Adding insn 747 to worklist
  Adding insn 745 to worklist
  Adding insn 744 to worklist
  Adding insn 743 to worklist
  Adding insn 741 to worklist
  Adding insn 740 to worklist
  Adding insn 739 to worklist
  Adding insn 738 to worklist
  Adding insn 736 to worklist
processing block 52 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 905 to worklist
  Adding insn 903 to worklist
processing block 51 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 185 to worklist
  Adding insn 895 to worklist
  Adding insn 894 to worklist
  Adding insn 893 to worklist
  Adding insn 892 to worklist
  Adding insn 891 to worklist
  Adding insn 890 to worklist
  Adding insn 889 to worklist
processing block 50 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 881 to worklist
  Adding insn 880 to worklist
  Adding insn 879 to worklist
processing block 49 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
  Adding insn 184 to worklist
  Adding insn 870 to worklist
  Adding insn 869 to worklist
  Adding insn 868 to worklist
  Adding insn 867 to worklist
  Adding insn 866 to worklist
  Adding insn 865 to worklist
  Adding insn 864 to worklist
  Adding insn 863 to worklist
  Adding insn 862 to worklist
processing block 48 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 856 to worklist
  Adding insn 855 to worklist
processing block 47 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 183 to worklist
  Adding insn 847 to worklist
  Adding insn 846 to worklist
  Adding insn 845 to worklist
  Adding insn 844 to worklist
  Adding insn 843 to worklist
  Adding insn 842 to worklist
  Adding insn 841 to worklist
processing block 46 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1908 1909 1910 1911
  Adding insn 836 to worklist
  Adding insn 835 to worklist
  Adding insn 833 to worklist
  Adding insn 832 to worklist
  Adding insn 831 to worklist
  Adding insn 829 to worklist
  Adding insn 828 to worklist
  Adding insn 827 to worklist
  Adding insn 826 to worklist
  Adding insn 824 to worklist
processing block 12 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 377 to worklist
  Adding insn 376 to worklist
  Adding insn 375 to worklist
processing block 11 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 369 to worklist
  Adding insn 368 to worklist
  Adding insn 367 to worklist
processing block 24 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 187 to worklist
  Adding insn 550 to worklist
  Adding insn 549 to worklist
  Adding insn 548 to worklist
  Adding insn 547 to worklist
  Adding insn 546 to worklist
  Adding insn 545 to worklist
  Adding insn 544 to worklist
processing block 23 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 539 to worklist
  Adding insn 538 to worklist
  Adding insn 537 to worklist
processing block 22 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
  Adding insn 173 to worklist
  Adding insn 528 to worklist
  Adding insn 527 to worklist
  Adding insn 526 to worklist
  Adding insn 525 to worklist
  Adding insn 524 to worklist
  Adding insn 523 to worklist
  Adding insn 522 to worklist
  Adding insn 521 to worklist
processing block 21 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 899 1013 1710 1854 1908 1909 1910 1911
  Adding insn 514 to worklist
  Adding insn 513 to worklist
  Adding insn 511 to worklist
  Adding insn 510 to worklist
  Adding insn 509 to worklist
  Adding insn 507 to worklist
  Adding insn 506 to worklist
  Adding insn 505 to worklist
  Adding insn 504 to worklist
  Adding insn 503 to worklist
  Adding insn 501 to worklist
processing block 14 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 190 to worklist
  Adding insn 403 to worklist
  Adding insn 402 to worklist
  Adding insn 401 to worklist
  Adding insn 400 to worklist
  Adding insn 399 to worklist
  Adding insn 398 to worklist
  Adding insn 397 to worklist
processing block 13 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 392 to worklist
  Adding insn 390 to worklist
  Adding insn 389 to worklist
  Adding insn 387 to worklist
  Adding insn 385 to worklist
  Adding insn 384 to worklist
  Adding insn 383 to worklist
processing block 16 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 189 to worklist
  Adding insn 432 to worklist
  Adding insn 431 to worklist
  Adding insn 430 to worklist
  Adding insn 429 to worklist
  Adding insn 428 to worklist
  Adding insn 427 to worklist
  Adding insn 426 to worklist
processing block 15 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 421 to worklist
  Adding insn 419 to worklist
  Adding insn 418 to worklist
  Adding insn 416 to worklist
  Adding insn 414 to worklist
  Adding insn 413 to worklist
  Adding insn 412 to worklist
processing block 20 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 188 to worklist
  Adding insn 491 to worklist
  Adding insn 490 to worklist
  Adding insn 489 to worklist
  Adding insn 488 to worklist
  Adding insn 487 to worklist
  Adding insn 486 to worklist
  Adding insn 485 to worklist
processing block 19 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 480 to worklist
  Adding insn 479 to worklist
  Adding insn 478 to worklist
processing block 18 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1908 1909 1910 1911
  Adding insn 172 to worklist
  Adding insn 469 to worklist
  Adding insn 468 to worklist
  Adding insn 467 to worklist
  Adding insn 466 to worklist
  Adding insn 465 to worklist
  Adding insn 464 to worklist
  Adding insn 463 to worklist
  Adding insn 462 to worklist
processing block 17 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 881 1013 1710 1854 1908 1909 1910 1911
  Adding insn 455 to worklist
  Adding insn 454 to worklist
  Adding insn 452 to worklist
  Adding insn 451 to worklist
  Adding insn 450 to worklist
  Adding insn 448 to worklist
  Adding insn 447 to worklist
  Adding insn 446 to worklist
  Adding insn 445 to worklist
  Adding insn 444 to worklist
  Adding insn 442 to worklist
processing block 9 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 340 to worklist
  Adding insn 337 to worklist
  Adding insn 336 to worklist
  Adding insn 335 to worklist
  Adding insn 334 to worklist
  Adding insn 333 to worklist
  Adding insn 332 to worklist
  Adding insn 331 to worklist
  Adding insn 330 to worklist
processing block 8 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
processing block 7 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1710 1908 1909 1910 1911
  Adding insn 319 to worklist
  Adding insn 318 to worklist
processing block 57 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 946 to worklist
processing block 65 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1053 to worklist
  Adding insn 1052 to worklist
  Adding insn 1051 to worklist
  Adding insn 1049 to worklist
  Adding insn 1048 to worklist
  Adding insn 1047 to worklist
processing block 70 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1112 to worklist
  Adding insn 1108 to worklist
  Adding insn 1107 to worklist
  Adding insn 1106 to worklist
  Adding insn 1105 to worklist
  Adding insn 1104 to worklist
  Adding insn 1103 to worklist
  Adding insn 1102 to worklist
  Adding insn 1100 to worklist
  Adding insn 1099 to worklist
  Adding insn 1098 to worklist
  Adding insn 1093 to worklist
processing block 78 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1319 to worklist
  Adding insn 1318 to worklist
  Adding insn 1317 to worklist
  Adding insn 1316 to worklist
  Adding insn 1315 to worklist
  Adding insn 1314 to worklist
  Adding insn 1313 to worklist
  Adding insn 1312 to worklist
  Adding insn 1311 to worklist
  Adding insn 1310 to worklist
processing block 80 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1336 to worklist
  Adding insn 1335 to worklist
  Adding insn 1334 to worklist
  Adding insn 1333 to worklist
  Adding insn 1332 to worklist
  Adding insn 1331 to worklist
  Adding insn 1330 to worklist
  Adding insn 1329 to worklist
  Adding insn 1328 to worklist
  Adding insn 1327 to worklist
processing block 143 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2351 to worklist
  Adding insn 2347 to worklist
  Adding insn 2346 to worklist
  Adding insn 2345 to worklist
  Adding insn 2343 to worklist
  Adding insn 2342 to worklist
  Adding insn 2341 to worklist
processing block 146 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
  Adding insn 2378 to worklist
processing block 151 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
  Adding insn 2417 to worklist
  Adding insn 2415 to worklist
processing block 150 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
processing block 149 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1710 1853 1854 1859 1862 1888
  Adding insn 2406 to worklist
  Adding insn 2402 to worklist
  Adding insn 2398 to worklist
processing block 97 lr out =  31 [sp] 64 [sfp] 65 [ap]
processing block 156 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2460 to worklist
processing block 155 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
  Adding insn 2456 to worklist
processing block 102 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1748 to worklist
  Adding insn 1747 to worklist
  Adding insn 1746 to worklist
  Adding insn 1745 to worklist
  Adding insn 1744 to worklist
  Adding insn 1743 to worklist
  Adding insn 1742 to worklist
  Adding insn 1741 to worklist
  Adding insn 1740 to worklist
  Adding insn 1739 to worklist
processing block 159 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2503 to worklist
processing block 158 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
  Adding insn 2499 to worklist
processing block 161 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2564 to worklist
processing block 165 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 226 to worklist
  Adding insn 225 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
  Adding insn 222 to worklist
  Adding insn 4376 to worklist
  Adding insn 2631 to worklist
processing block 164 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 218 to worklist
  Adding insn 2627 to worklist
  Adding insn 2619 to worklist
processing block 163 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 2616 to worklist
  Adding insn 2615 to worklist
  Adding insn 2614 to worklist
  Adding insn 2613 to worklist
  Adding insn 2612 to worklist
  Adding insn 2611 to worklist
  Adding insn 2610 to worklist
  Adding insn 2609 to worklist
  Adding insn 2607 to worklist
  Adding insn 2606 to worklist
  Adding insn 2604 to worklist
processing block 162 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 2601 to worklist
  Adding insn 2600 to worklist
  Adding insn 2589 to worklist
  Adding insn 2588 to worklist
  Adding insn 2586 to worklist
  Adding insn 2584 to worklist
  Adding insn 2583 to worklist
processing block 160 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 2560 to worklist
  Adding insn 2550 to worklist
  Adding insn 2549 to worklist
  Adding insn 2547 to worklist
  Adding insn 2545 to worklist
  Adding insn 2530 to worklist
  Adding insn 2529 to worklist
  Adding insn 2527 to worklist
  Adding insn 2525 to worklist
  Adding insn 2524 to worklist
processing block 157 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 2496 to worklist
  Adding insn 2486 to worklist
  Adding insn 2485 to worklist
  Adding insn 2483 to worklist
  Adding insn 2481 to worklist
processing block 154 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 2453 to worklist
processing block 185 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2870 to worklist
processing block 187 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2898 to worklist
  Adding insn 2897 to worklist
  Adding insn 2896 to worklist
  Adding insn 2895 to worklist
  Adding insn 2894 to worklist
  Adding insn 2893 to worklist
  Adding insn 2892 to worklist
  Adding insn 2891 to worklist
  Adding insn 2890 to worklist
  Adding insn 2889 to worklist
  Adding insn 2888 to worklist
processing block 192 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2990 to worklist
  Adding insn 2989 to worklist
  Adding insn 2988 to worklist
processing block 273 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3733 to worklist
  Adding insn 3732 to worklist
  Adding insn 3731 to worklist
  Adding insn 3730 to worklist
  Adding insn 3729 to worklist
  Adding insn 3728 to worklist
  Adding insn 3725 to worklist
  Adding insn 3724 to worklist
  Adding insn 3723 to worklist
  Adding insn 3722 to worklist
  Adding insn 3720 to worklist
processing block 300 lr out =  0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3977 to worklist
processing block 177 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
  Adding insn 267 to worklist
  Adding insn 2784 to worklist
  Adding insn 2783 to worklist
  Adding insn 2782 to worklist
  Adding insn 2781 to worklist
  Adding insn 2780 to worklist
  Adding insn 2779 to worklist
  Adding insn 2778 to worklist
  Adding insn 2777 to worklist
  Adding insn 2776 to worklist
  Adding insn 2775 to worklist
  Adding insn 2756 to worklist
  Adding insn 2752 to worklist
  Adding insn 2751 to worklist
processing block 274 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 3753 to worklist
  Adding insn 3752 to worklist
  Adding insn 3751 to worklist
  Adding insn 3748 to worklist
  Adding insn 3745 to worklist
  Adding insn 3742 to worklist
processing block 272 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 1616 1710 1853 1854 1856 1859 1875 1876 1877 1878
  Adding insn 3713 to worklist
  Adding insn 3712 to worklist
  Adding insn 3711 to worklist
  Adding insn 3710 to worklist
  Adding insn 3707 to worklist
  Adding insn 3706 to worklist
  Adding insn 3705 to worklist
  Adding insn 3704 to worklist
  Adding insn 3703 to worklist
  Adding insn 3702 to worklist
  Adding insn 3701 to worklist
  Adding insn 3700 to worklist
processing block 298 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
  Adding insn 4204 to worklist
  Adding insn 264 to worklist
processing block 297 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1876 1877 1878
  Adding insn 3947 to worklist
  Adding insn 3946 to worklist
  Adding insn 3942 to worklist
  Adding insn 3941 to worklist
  Adding insn 3940 to worklist
  Adding insn 3939 to worklist
processing block 198 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3064 to worklist
processing block 270 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
  Adding insn 4203 to worklist
processing block 269 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 811 1616 1710 1853 1854 1859 1860 1875 1876 1877 1878
  Adding insn 3662 to worklist
  Adding insn 3661 to worklist
  Adding insn 3657 to worklist
  Adding insn 3656 to worklist
  Adding insn 3655 to worklist
  Adding insn 3640 to worklist
processing block 282 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 3817 to worklist
processing block 271 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1876 1877 1878
  Adding insn 3694 to worklist
  Adding insn 3693 to worklist
  Adding insn 3689 to worklist
  Adding insn 3688 to worklist
  Adding insn 3687 to worklist
  Adding insn 3686 to worklist
processing block 268 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 3634 to worklist
  Adding insn 3631 to worklist
processing block 266 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
  Adding insn 3624 to worklist
  Adding insn 3619 to worklist
processing block 264 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
  Adding insn 4330 to worklist
  Adding insn 4329 to worklist
  Adding insn 4324 to worklist
  Adding insn 4323 to worklist
  Adding insn 3603 to worklist
processing block 265 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
  Adding insn 261 to worklist
processing block 263 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
  Adding insn 3600 to worklist
  Adding insn 3599 to worklist
processing block 262 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
  Adding insn 3595 to worklist
  Adding insn 3594 to worklist
  Adding insn 3592 to worklist
  Adding insn 3591 to worklist
  Adding insn 3590 to worklist
processing block 261 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1876 1877 1878
  Adding insn 4328 to worklist
  Adding insn 4322 to worklist
  Adding insn 4321 to worklist
  Adding insn 258 to worklist
processing block 260 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3582 to worklist
processing block 259 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3577 to worklist
processing block 257 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3574 to worklist
  Adding insn 3572 to worklist
processing block 291 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 255 to worklist
processing block 279 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 4327 to worklist
  Adding insn 4326 to worklist
  Adding insn 4325 to worklist
  Adding insn 3790 to worklist
  Adding insn 3788 to worklist
  Adding insn 3787 to worklist
  Adding insn 3786 to worklist
processing block 290 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 280 to worklist
processing block 281 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 254 to worklist
processing block 280 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 270 to worklist
processing block 256 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 253 to worklist
  Adding insn 4353 to worklist
processing block 255 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 251 to worklist
  Adding insn 4354 to worklist
processing block 254 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3559 to worklist
  Adding insn 3558 to worklist
  Adding insn 3557 to worklist
  Adding insn 3556 to worklist
  Adding insn 3555 to worklist
processing block 253 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
processing block 252 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3543 to worklist
processing block 251 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
processing block 250 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3536 to worklist
processing block 292 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3888 to worklist
  Adding insn 3885 to worklist
processing block 249 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3530 to worklist
  Adding insn 3529 to worklist
  Adding insn 3528 to worklist
processing block 294 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 249 to worklist
  Adding insn 4352 to worklist
processing block 293 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3898 to worklist
  Adding insn 271 to worklist
  Adding insn 3897 to worklist
processing block 248 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3525 to worklist
  Adding insn 3524 to worklist
  Adding insn 3523 to worklist
processing block 247 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3520 to worklist
  Adding insn 247 to worklist
  Adding insn 3519 to worklist
  Adding insn 3517 to worklist
  Adding insn 3515 to worklist
  Adding insn 3514 to worklist
processing block 246 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3510 to worklist
  Adding insn 3509 to worklist
  Adding insn 3507 to worklist
  Adding insn 3506 to worklist
  Adding insn 3505 to worklist
processing block 245 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3501 to worklist
  Adding insn 3500 to worklist
  Adding insn 3498 to worklist
  Adding insn 3496 to worklist
  Adding insn 3495 to worklist
  Adding insn 3494 to worklist
  Adding insn 3492 to worklist
  Adding insn 3491 to worklist
processing block 244 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3488 to worklist
  Adding insn 246 to worklist
  Adding insn 3487 to worklist
  Adding insn 3485 to worklist
  Adding insn 3484 to worklist
  Adding insn 3483 to worklist
  Adding insn 3480 to worklist
  Adding insn 3478 to worklist
processing block 243 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1876 1877 1878
  Adding insn 3550 to worklist
  Adding insn 252 to worklist
  Adding insn 248 to worklist
  Adding insn 245 to worklist
  Adding insn 244 to worklist
  Adding insn 3471 to worklist
  Adding insn 3470 to worklist
  Adding insn 3469 to worklist
  Adding insn 3468 to worklist
  Adding insn 3467 to worklist
  Adding insn 3466 to worklist
processing block 295 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 263 to worklist
  Adding insn 3907 to worklist
processing block 296 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3917 to worklist
  Adding insn 257 to worklist
  Adding insn 256 to worklist
processing block 241 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3423 to worklist
  Adding insn 3422 to worklist
processing block 242 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3459 to worklist
  Adding insn 3458 to worklist
  Adding insn 3457 to worklist
  Adding insn 3454 to worklist
  Adding insn 3453 to worklist
  Adding insn 3452 to worklist
  Adding insn 3451 to worklist
processing block 289 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3869 to worklist
processing block 239 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3411 to worklist
  Adding insn 3409 to worklist
  Adding insn 3405 to worklist
processing block 221 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3242 to worklist
  Adding insn 3241 to worklist
  Adding insn 3240 to worklist
  Adding insn 3239 to worklist
  Adding insn 3238 to worklist
  Adding insn 3237 to worklist
  Adding insn 3236 to worklist
  Adding insn 3235 to worklist
  Adding insn 3234 to worklist
  Adding insn 3232 to worklist
  Adding insn 3231 to worklist
processing block 219 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3222 to worklist
  Adding insn 3221 to worklist
processing block 227 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3301 to worklist
  Adding insn 3300 to worklist
  Adding insn 3299 to worklist
  Adding insn 3298 to worklist
  Adding insn 3297 to worklist
  Adding insn 3296 to worklist
  Adding insn 3295 to worklist
  Adding insn 3294 to worklist
  Adding insn 3293 to worklist
  Adding insn 3291 to worklist
  Adding insn 3290 to worklist
processing block 229 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 242 to worklist
  Adding insn 3308 to worklist
processing block 228 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3305 to worklist
processing block 232 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3341 to worklist
  Adding insn 3340 to worklist
  Adding insn 3339 to worklist
  Adding insn 3338 to worklist
  Adding insn 3337 to worklist
  Adding insn 3336 to worklist
  Adding insn 3335 to worklist
  Adding insn 3334 to worklist
  Adding insn 3333 to worklist
  Adding insn 3331 to worklist
  Adding insn 3330 to worklist
processing block 237 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3380 to worklist
  Adding insn 3379 to worklist
  Adding insn 3378 to worklist
  Adding insn 3377 to worklist
  Adding insn 3376 to worklist
  Adding insn 3375 to worklist
  Adding insn 3374 to worklist
  Adding insn 3373 to worklist
  Adding insn 3372 to worklist
  Adding insn 3370 to worklist
  Adding insn 3369 to worklist
processing block 236 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 243 to worklist
  Adding insn 3364 to worklist
processing block 235 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3361 to worklist
  Adding insn 3360 to worklist
processing block 238 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3397 to worklist
  Adding insn 3395 to worklist
  Adding insn 3394 to worklist
processing block 233 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3354 to worklist
  Adding insn 3348 to worklist
processing block 231 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3327 to worklist
processing block 230 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3324 to worklist
  Adding insn 3322 to worklist
  Adding insn 3321 to worklist
  Adding insn 3320 to worklist
  Adding insn 3313 to worklist
processing block 226 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 241 to worklist
  Adding insn 240 to worklist
processing block 225 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3283 to worklist
  Adding insn 3278 to worklist
processing block 278 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 269 to worklist
processing block 224 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3275 to worklist
processing block 223 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3267 to worklist
  Adding insn 3266 to worklist
  Adding insn 3264 to worklist
  Adding insn 3263 to worklist
  Adding insn 3262 to worklist
  Adding insn 3260 to worklist
  Adding insn 3259 to worklist
processing block 277 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 268 to worklist
processing block 222 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3252 to worklist
  Adding insn 3248 to worklist
processing block 220 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3228 to worklist
processing block 218 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 239 to worklist
  Adding insn 238 to worklist
  Adding insn 237 to worklist
processing block 217 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3215 to worklist
  Adding insn 3214 to worklist
  Adding insn 3212 to worklist
  Adding insn 3211 to worklist
  Adding insn 3210 to worklist
  Adding insn 3209 to worklist
processing block 216 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3204 to worklist
processing block 215 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3200 to worklist
  Adding insn 3199 to worklist
processing block 214 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 235 to worklist
  Adding insn 234 to worklist
processing block 213 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3185 to worklist
  Adding insn 3184 to worklist
  Adding insn 3183 to worklist
  Adding insn 3182 to worklist
processing block 212 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3177 to worklist
  Adding insn 3176 to worklist
processing block 210 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1876 1877 1878
  Adding insn 3173 to worklist
  Adding insn 3171 to worklist
  Adding insn 3170 to worklist
  Adding insn 3166 to worklist
  Adding insn 3165 to worklist
  Adding insn 3163 to worklist
  Adding insn 3161 to worklist
  Adding insn 3159 to worklist
processing block 209 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1876 1877 1878
  Adding insn 4202 to worklist
  Adding insn 4201 to worklist
  Adding insn 233 to worklist
  Adding insn 3156 to worklist
  Adding insn 3155 to worklist
  Adding insn 3154 to worklist
  Adding insn 3152 to worklist
  Adding insn 3150 to worklist
  Adding insn 3149 to worklist
  Adding insn 3147 to worklist
  Adding insn 3145 to worklist
processing block 208 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3142 to worklist
  Adding insn 3141 to worklist
  Adding insn 3140 to worklist
  Adding insn 3139 to worklist
  Adding insn 3138 to worklist
  Adding insn 3137 to worklist
processing block 206 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3133 to worklist
processing block 203 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 229 to worklist
  Adding insn 3127 to worklist
  Adding insn 3126 to worklist
  Adding insn 3125 to worklist
  Adding insn 3124 to worklist
processing block 205 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 231 to worklist
processing block 202 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3120 to worklist
  Adding insn 3116 to worklist
  Adding insn 3115 to worklist
  Adding insn 3114 to worklist
  Adding insn 3113 to worklist
processing block 204 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 230 to worklist
processing block 201 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3109 to worklist
  Adding insn 3105 to worklist
  Adding insn 3104 to worklist
  Adding insn 3103 to worklist
  Adding insn 3102 to worklist
processing block 207 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 232 to worklist
processing block 200 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3098 to worklist
  Adding insn 4320 to worklist
  Adding insn 4319 to worklist
  Adding insn 3092 to worklist
  Adding insn 3091 to worklist
  Adding insn 3090 to worklist
  Adding insn 3089 to worklist
  Adding insn 3088 to worklist
  Adding insn 3087 to worklist
  Adding insn 3086 to worklist
processing block 199 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3081 to worklist
  Adding insn 3074 to worklist
  Adding insn 3073 to worklist
processing block 197 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 666 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3061 to worklist
  Adding insn 3058 to worklist
  Adding insn 3056 to worklist
  Adding insn 3053 to worklist
  Adding insn 3049 to worklist
  Adding insn 3046 to worklist
processing block 196 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3041 to worklist
  Adding insn 3040 to worklist
processing block 195 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1876 1877 1878
  Adding insn 3037 to worklist
  Adding insn 3035 to worklist
  Adding insn 3025 to worklist
  Adding insn 3020 to worklist
processing block 194 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 3016 to worklist
  Adding insn 3015 to worklist
  Adding insn 3014 to worklist
  Adding insn 3013 to worklist
  Adding insn 3012 to worklist
  Adding insn 3009 to worklist
  Adding insn 3008 to worklist
processing block 193 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 2999 to worklist
  Adding insn 2998 to worklist
processing block 191 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 2985 to worklist
  Adding insn 2983 to worklist
  Adding insn 2982 to worklist
  Adding insn 2981 to worklist
  Adding insn 2980 to worklist
  Adding insn 2979 to worklist
  Adding insn 2978 to worklist
  Adding insn 2977 to worklist
  Adding insn 2976 to worklist
processing block 288 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 3850 to worklist
processing block 190 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 2971 to worklist
  Adding insn 2970 to worklist
  Adding insn 2966 to worklist
  Adding insn 2965 to worklist
  Adding insn 2964 to worklist
  Adding insn 2961 to worklist
  Adding insn 2960 to worklist
  Adding insn 2959 to worklist
  Adding insn 2958 to worklist
  Adding insn 2955 to worklist
  Adding insn 2954 to worklist
  Adding insn 2952 to worklist
  Adding insn 2950 to worklist
  Adding insn 2949 to worklist
  Adding insn 2948 to worklist
  Adding insn 2945 to worklist
  Adding insn 2944 to worklist
  Adding insn 2942 to worklist
  Adding insn 2941 to worklist
  Adding insn 2940 to worklist
  Adding insn 2938 to worklist
  Adding insn 2936 to worklist
  Adding insn 2935 to worklist
  Adding insn 2934 to worklist
  Adding insn 2933 to worklist
  Adding insn 2932 to worklist
  Adding insn 2926 to worklist
  Adding insn 2925 to worklist
  Adding insn 2924 to worklist
processing block 189 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 2919 to worklist
  Adding insn 2918 to worklist
  Adding insn 2917 to worklist
  Adding insn 2916 to worklist
  Adding insn 2915 to worklist
  Adding insn 2914 to worklist
  Adding insn 2913 to worklist
processing block 188 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 2906 to worklist
  Adding insn 2905 to worklist
processing block 186 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 2885 to worklist
  Adding insn 2884 to worklist
  Adding insn 2879 to worklist
processing block 184 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 613 647 752 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 2867 to worklist
  Adding insn 2864 to worklist
  Adding insn 2862 to worklist
  Adding insn 2859 to worklist
  Adding insn 2858 to worklist
  Adding insn 2854 to worklist
processing block 183 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1876 1877 1878
  Adding insn 2951 to worklist
  Adding insn 2912 to worklist
  Adding insn 2911 to worklist
  Adding insn 2883 to worklist
  Adding insn 2857 to worklist
processing block 176 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
  Adding insn 2736 to worklist
  Adding insn 227 to worklist
  Adding insn 2735 to worklist
  Adding insn 2734 to worklist
processing block 175 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
  Adding insn 2729 to worklist
processing block 171 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
  Adding insn 2683 to worklist
  Adding insn 2678 to worklist
  Adding insn 2677 to worklist
  Adding insn 2676 to worklist
  Adding insn 2675 to worklist
  Adding insn 2674 to worklist
  Adding insn 2672 to worklist
  Adding insn 2671 to worklist
  Adding insn 2670 to worklist
processing block 172 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2701 to worklist
  Adding insn 2697 to worklist
  Adding insn 2696 to worklist
  Adding insn 2695 to worklist
  Adding insn 2693 to worklist
  Adding insn 2692 to worklist
  Adding insn 2691 to worklist
processing block 170 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
  Adding insn 2665 to worklist
processing block 169 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
  Adding insn 2649 to worklist
processing block 168 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1710 1853 1854 1859 1862
  Adding insn 2645 to worklist
processing block 167 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 2642 to worklist
processing block 174 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
  Adding insn 2710 to worklist
processing block 173 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1710 1853 1854 1859 1862
  Adding insn 2706 to worklist
processing block 166 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 2638 to worklist
processing block 153 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1885 1886 1887
  Adding insn 2632 to worklist
  Adding insn 2626 to worklist
  Adding insn 2624 to worklist
  Adding insn 2608 to worklist
  Adding insn 2605 to worklist
  Adding insn 2523 to worklist
  Adding insn 2482 to worklist
  Adding insn 2480 to worklist
  Adding insn 2452 to worklist
  Adding insn 221 to worklist
  Adding insn 220 to worklist
  Adding insn 219 to worklist
  Adding insn 2442 to worklist
  Adding insn 2439 to worklist
  Adding insn 2436 to worklist
  Adding insn 2433 to worklist
  Adding insn 2430 to worklist
  Adding insn 2429 to worklist
  Adding insn 2427 to worklist
  Adding insn 2426 to worklist
processing block 152 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
  Adding insn 2422 to worklist
processing block 148 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
  Adding insn 2409 to worklist
  Adding insn 217 to worklist
  Adding insn 2392 to worklist
  Adding insn 2389 to worklist
  Adding insn 2388 to worklist
processing block 147 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
  Adding insn 2384 to worklist
processing block 145 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
  Adding insn 216 to worklist
  Adding insn 2370 to worklist
  Adding insn 2368 to worklist
  Adding insn 2367 to worklist
  Adding insn 2364 to worklist
processing block 179 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2806 to worklist
  Adding insn 2804 to worklist
  Adding insn 2803 to worklist
  Adding insn 2802 to worklist
processing block 181 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2841 to worklist
  Adding insn 2839 to worklist
  Adding insn 2838 to worklist
  Adding insn 2837 to worklist
processing block 182 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
  Adding insn 2846 to worklist
processing block 180 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1710 1853 1854 1859
  Adding insn 2834 to worklist
  Adding insn 2830 to worklist
  Adding insn 2827 to worklist
  Adding insn 2826 to worklist
  Adding insn 2825 to worklist
  Adding insn 2824 to worklist
  Adding insn 2816 to worklist
  Adding insn 2815 to worklist
  Adding insn 2813 to worklist
  Adding insn 2812 to worklist
processing block 178 lr out =  0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1710 1853 1854 1859
  Adding insn 2799 to worklist
  Adding insn 2795 to worklist
  Adding insn 2793 to worklist
  Adding insn 2792 to worklist
processing block 144 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1710 1853 1854 1859 1862
  Adding insn 2359 to worklist
  Adding insn 2358 to worklist
  Adding insn 2357 to worklist
processing block 142 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2336 to worklist
processing block 141 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
  Adding insn 2332 to worklist
  Adding insn 2331 to worklist
  Adding insn 2330 to worklist
  Adding insn 2328 to worklist
  Adding insn 2327 to worklist
  Adding insn 2326 to worklist
processing block 140 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
  Adding insn 2321 to worklist
  Adding insn 2320 to worklist
  Adding insn 2314 to worklist
  Adding insn 2311 to worklist
  Adding insn 2309 to worklist
  Adding insn 2308 to worklist
  Adding insn 2305 to worklist
  Adding insn 2302 to worklist
  Adding insn 2301 to worklist
  Adding insn 2300 to worklist
processing block 139 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2295 to worklist
  Adding insn 2294 to worklist
  Adding insn 2293 to worklist
  Adding insn 2291 to worklist
  Adding insn 2290 to worklist
  Adding insn 2289 to worklist
processing block 138 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2284 to worklist
  Adding insn 2283 to worklist
processing block 132 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2221 to worklist
  Adding insn 2220 to worklist
  Adding insn 2219 to worklist
  Adding insn 2217 to worklist
  Adding insn 2216 to worklist
  Adding insn 2215 to worklist
processing block 131 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2206 to worklist
  Adding insn 2205 to worklist
processing block 85 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 1409 to worklist
  Adding insn 1406 to worklist
  Adding insn 1405 to worklist
  Adding insn 1404 to worklist
  Adding insn 1403 to worklist
  Adding insn 1402 to worklist
  Adding insn 1401 to worklist
  Adding insn 1396 to worklist
  Adding insn 1389 to worklist
  Adding insn 1386 to worklist
  Adding insn 1385 to worklist
  Adding insn 1384 to worklist
  Adding insn 1383 to worklist
  Adding insn 1378 to worklist
  Adding insn 1376 to worklist
  Adding insn 1375 to worklist
processing block 101 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 106 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 202 to worklist
  Adding insn 201 to worklist
  Adding insn 200 to worklist
  Adding insn 199 to worklist
processing block 117 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1936 to worklist
  Adding insn 1935 to worklist
  Adding insn 1934 to worklist
  Adding insn 1933 to worklist
  Adding insn 1932 to worklist
  Adding insn 1931 to worklist
  Adding insn 1930 to worklist
  Adding insn 1929 to worklist
  Adding insn 1928 to worklist
  Adding insn 1926 to worklist
  Adding insn 1925 to worklist
processing block 286 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 100 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 98 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1720 to worklist
  Adding insn 1709 to worklist
  Adding insn 1708 to worklist
  Adding insn 1706 to worklist
  Adding insn 1704 to worklist
  Adding insn 1703 to worklist
  Adding insn 1702 to worklist
  Adding insn 1701 to worklist
  Adding insn 1700 to worklist
  Adding insn 1698 to worklist
processing block 123 lr out =  31 [sp] 64 [sfp] 65 [ap]
processing block 125 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2052 to worklist
  Adding insn 2051 to worklist
  Adding insn 2050 to worklist
  Adding insn 2049 to worklist
  Adding insn 2048 to worklist
  Adding insn 2047 to worklist
  Adding insn 2046 to worklist
  Adding insn 2045 to worklist
  Adding insn 2044 to worklist
  Adding insn 2043 to worklist
processing block 128 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 2163 to worklist
  Adding insn 2161 to worklist
processing block 127 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 2132 to worklist
  Adding insn 2131 to worklist
  Adding insn 2128 to worklist
  Adding insn 2127 to worklist
  Adding insn 2124 to worklist
  Adding insn 2123 to worklist
  Adding insn 2122 to worklist
  Adding insn 2121 to worklist
  Adding insn 2119 to worklist
  Adding insn 2118 to worklist
  Adding insn 2117 to worklist
  Adding insn 2116 to worklist
  Adding insn 2115 to worklist
  Adding insn 2113 to worklist
  Adding insn 2112 to worklist
  Adding insn 2111 to worklist
  Adding insn 2110 to worklist
  Adding insn 2109 to worklist
  Adding insn 2107 to worklist
  Adding insn 2106 to worklist
scanning new insn with uid = 4414.
rescanning insn with uid = 2013.
rescanning insn with uid = 2014.
rescanning insn with uid = 2104.
rescanning insn with uid = 2105.
verify found no changes in insn with uid = 4414.
processing block 126 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 2101 to worklist
  Adding insn 2100 to worklist
  Adding insn 2097 to worklist
  Adding insn 2096 to worklist
  Adding insn 2093 to worklist
  Adding insn 2092 to worklist
  Adding insn 2091 to worklist
  Adding insn 2090 to worklist
  Adding insn 2088 to worklist
  Adding insn 2087 to worklist
  Adding insn 2086 to worklist
  Adding insn 2085 to worklist
  Adding insn 2084 to worklist
  Adding insn 2082 to worklist
  Adding insn 2081 to worklist
  Adding insn 2080 to worklist
  Adding insn 2079 to worklist
  Adding insn 2078 to worklist
  Adding insn 2076 to worklist
  Adding insn 2075 to worklist
  Adding insn 2071 to worklist
scanning new insn with uid = 4415.
rescanning insn with uid = 1971.
rescanning insn with uid = 1972.
rescanning insn with uid = 2073.
rescanning insn with uid = 2074.
verify found no changes in insn with uid = 4415.
processing block 124 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 2040 to worklist
  Adding insn 2039 to worklist
  Adding insn 2037 to worklist
  Adding insn 2036 to worklist
  Adding insn 2033 to worklist
  Adding insn 2032 to worklist
  Adding insn 2031 to worklist
  Adding insn 2030 to worklist
  Adding insn 2028 to worklist
  Adding insn 2027 to worklist
  Adding insn 2026 to worklist
  Adding insn 2025 to worklist
  Adding insn 2024 to worklist
  Adding insn 2022 to worklist
  Adding insn 2021 to worklist
  Adding insn 2020 to worklist
  Adding insn 2019 to worklist
  Adding insn 2018 to worklist
  Adding insn 2016 to worklist
  Adding insn 2015 to worklist
processing block 122 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 2000 to worklist
  Adding insn 1999 to worklist
  Adding insn 1997 to worklist
  Adding insn 1996 to worklist
  Adding insn 1995 to worklist
  Adding insn 1994 to worklist
  Adding insn 1991 to worklist
  Adding insn 1990 to worklist
  Adding insn 1989 to worklist
  Adding insn 1988 to worklist
  Adding insn 1986 to worklist
  Adding insn 1985 to worklist
  Adding insn 1984 to worklist
  Adding insn 1983 to worklist
  Adding insn 1982 to worklist
  Adding insn 1980 to worklist
  Adding insn 1979 to worklist
  Adding insn 1978 to worklist
  Adding insn 1977 to worklist
  Adding insn 1976 to worklist
  Adding insn 1974 to worklist
  Adding insn 1973 to worklist
  Adding insn 1967 to worklist
  Adding insn 1966 to worklist
processing block 121 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
processing block 299 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 3969 to worklist
  Adding insn 3962 to worklist
  Adding insn 3961 to worklist
  Adding insn 3959 to worklist
processing block 287 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 281 to worklist
  Adding insn 3844 to worklist
  Adding insn 3843 to worklist
processing block 285 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 3830 to worklist
processing block 283 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 4390 to worklist
  Adding insn 4389 to worklist
processing block 116 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 119 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 4393 to worklist
  Adding insn 4392 to worklist
  Adding insn 1944 to worklist
processing block 120 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 4391 to worklist
  Adding insn 282 to worklist
  Adding insn 1949 to worklist
processing block 118 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1941 to worklist
processing block 115 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1916 to worklist
processing block 114 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 4398 to worklist
  Adding insn 4397 to worklist
processing block 284 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 4396 to worklist
  Adding insn 4395 to worklist
processing block 113 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1904 to worklist
  Adding insn 1902 to worklist
processing block 112 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1898 to worklist
  Adding insn 1897 to worklist
processing block 111 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1893 to worklist
  Adding insn 1891 to worklist
  Adding insn 1890 to worklist
  Adding insn 1888 to worklist
  Adding insn 1887 to worklist
  Adding insn 1886 to worklist
processing block 109 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 212 to worklist
  Adding insn 211 to worklist
  Adding insn 210 to worklist
  Adding insn 209 to worklist
  Adding insn 208 to worklist
  Adding insn 1874 to worklist
processing block 108 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1871 to worklist
  Adding insn 1868 to worklist
  Adding insn 1858 to worklist
  Adding insn 1857 to worklist
  Adding insn 1855 to worklist
  Adding insn 1853 to worklist
  Adding insn 1852 to worklist
  Adding insn 1851 to worklist
  Adding insn 1850 to worklist
  Adding insn 1849 to worklist
  Adding insn 1847 to worklist
  Adding insn 1846 to worklist
processing block 107 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1842 to worklist
  Adding insn 1822 to worklist
  Adding insn 1821 to worklist
  Adding insn 1819 to worklist
  Adding insn 1817 to worklist
  Adding insn 1816 to worklist
  Adding insn 1815 to worklist
  Adding insn 1814 to worklist
  Adding insn 1813 to worklist
  Adding insn 1811 to worklist
processing block 105 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
processing block 110 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 207 to worklist
  Adding insn 206 to worklist
  Adding insn 205 to worklist
  Adding insn 204 to worklist
  Adding insn 203 to worklist
  Adding insn 1879 to worklist
processing block 104 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 1800 to worklist
  Adding insn 1789 to worklist
  Adding insn 1788 to worklist
  Adding insn 1786 to worklist
  Adding insn 1784 to worklist
  Adding insn 1783 to worklist
  Adding insn 1782 to worklist
  Adding insn 1781 to worklist
  Adding insn 1780 to worklist
  Adding insn 1778 to worklist
  Adding insn 1777 to worklist
processing block 103 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1893 1894 1895 1896 1897 1898 1899 1900 1903 1904 1905 1906 1907
  Adding insn 273 to worklist
  Adding insn 1903 to worklist
  Adding insn 277 to worklist
  Adding insn 276 to worklist
  Adding insn 1889 to worklist
  Adding insn 1885 to worklist
  Adding insn 4379 to worklist
  Adding insn 4378 to worklist
  Adding insn 1841 to worklist
  Adding insn 1799 to worklist
  Adding insn 1779 to worklist
  Adding insn 1776 to worklist
  Adding insn 198 to worklist
  Adding insn 197 to worklist
  Adding insn 196 to worklist
  Adding insn 1755 to worklist
  Adding insn 1754 to worklist
  Adding insn 1753 to worklist
processing block 96 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 1666 to worklist
  Adding insn 1659 to worklist
  Adding insn 1655 to worklist
  Adding insn 1654 to worklist
  Adding insn 1652 to worklist
  Adding insn 1650 to worklist
  Adding insn 1649 to worklist
  Adding insn 1648 to worklist
  Adding insn 1647 to worklist
  Adding insn 1646 to worklist
  Adding insn 1645 to worklist
  Adding insn 1644 to worklist
processing block 95 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 1640 to worklist
  Adding insn 1639 to worklist
  Adding insn 1635 to worklist
processing block 89 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 214 to worklist
  Adding insn 213 to worklist
processing block 88 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 1571 to worklist
processing block 93 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
  Adding insn 1621 to worklist
  Adding insn 1616 to worklist
  Adding insn 1614 to worklist
processing block 92 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
  Adding insn 1610 to worklist
  Adding insn 1609 to worklist
  Adding insn 1608 to worklist
  Adding insn 1607 to worklist
  Adding insn 1604 to worklist
  Adding insn 1602 to worklist
  Adding insn 1601 to worklist
  Adding insn 1599 to worklist
  Adding insn 1597 to worklist
  Adding insn 1595 to worklist
  Adding insn 1594 to worklist
  Adding insn 1592 to worklist
  Adding insn 1590 to worklist
processing block 91 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
  Adding insn 1583 to worklist
  Adding insn 1581 to worklist
processing block 90 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1901 1902 1903 1904 1905 1906 1907
  Adding insn 1606 to worklist
  Adding insn 1605 to worklist
processing block 87 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 1545 to worklist
  Adding insn 195 to worklist
  Adding insn 1536 to worklist
processing block 130 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2199 to worklist
  Adding insn 2197 to worklist
processing block 129 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 2168 to worklist
processing block 86 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1904 1905 1906 1907
  Adding insn 2012 to worklist
  Adding insn 2011 to worklist
  Adding insn 1970 to worklist
  Adding insn 1969 to worklist
  Adding insn 1643 to worklist
  Adding insn 215 to worklist
  Adding insn 1527 to worklist
  Adding insn 1524 to worklist
  Adding insn 1523 to worklist
  Adding insn 1520 to worklist
  Adding insn 1516 to worklist
  Adding insn 1514 to worklist
  Adding insn 1510 to worklist
  Adding insn 1506 to worklist
  Adding insn 1505 to worklist
  Adding insn 1502 to worklist
  Adding insn 1498 to worklist
  Adding insn 1497 to worklist
  Adding insn 1496 to worklist
  Adding insn 1492 to worklist
  Adding insn 1488 to worklist
  Adding insn 1487 to worklist
  Adding insn 1486 to worklist
  Adding insn 1485 to worklist
  Adding insn 1469 to worklist
  Adding insn 1468 to worklist
  Adding insn 1458 to worklist
  Adding insn 1456 to worklist
  Adding insn 1455 to worklist
  Adding insn 1448 to worklist
  Adding insn 1447 to worklist
  Adding insn 1446 to worklist
  Adding insn 1445 to worklist
  Adding insn 1444 to worklist
  Adding insn 1443 to worklist
  Adding insn 1442 to worklist
  Adding insn 1441 to worklist
  Adding insn 1440 to worklist
  Adding insn 1428 to worklist
  Adding insn 1425 to worklist
  Adding insn 1424 to worklist
  Adding insn 1420 to worklist
  Adding insn 1419 to worklist
  Adding insn 1418 to worklist
  Adding insn 1417 to worklist
processing block 84 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
  Adding insn 1368 to worklist
  Adding insn 1367 to worklist
  Adding insn 1366 to worklist
processing block 83 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
  Adding insn 1361 to worklist
  Adding insn 1360 to worklist
  Adding insn 1359 to worklist
  Adding insn 1357 to worklist
  Adding insn 1356 to worklist
  Adding insn 1355 to worklist
processing block 82 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
  Adding insn 1350 to worklist
  Adding insn 1349 to worklist
processing block 134 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
  Adding insn 265 to worklist
  Adding insn 2241 to worklist
  Adding insn 2240 to worklist
  Adding insn 2239 to worklist
processing block 136 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
  Adding insn 266 to worklist
  Adding insn 2270 to worklist
  Adding insn 2269 to worklist
  Adding insn 2268 to worklist
processing block 137 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 4200 to worklist
  Adding insn 2276 to worklist
processing block 135 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1710 1853 1854 1862
  Adding insn 2265 to worklist
  Adding insn 2261 to worklist
  Adding insn 2258 to worklist
  Adding insn 2257 to worklist
  Adding insn 2250 to worklist
  Adding insn 2249 to worklist
processing block 133 lr out =  0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1710 1853 1854 1862
  Adding insn 2236 to worklist
  Adding insn 2232 to worklist
  Adding insn 2230 to worklist
  Adding insn 2229 to worklist
processing block 81 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 246 1143 1710 1853 1854 1862
  Adding insn 1344 to worklist
  Adding insn 1343 to worklist
processing block 79 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1710 1853 1854 1862
  Adding insn 1324 to worklist
processing block 77 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1710 1853 1854 1862
  Adding insn 1307 to worklist
  Adding insn 1305 to worklist
  Adding insn 1304 to worklist
  Adding insn 1303 to worklist
  Adding insn 1285 to worklist
  Adding insn 1284 to worklist
  Adding insn 1274 to worklist
  Adding insn 1273 to worklist
  Adding insn 1272 to worklist
  Adding insn 1271 to worklist
  Adding insn 1255 to worklist
  Adding insn 1254 to worklist
  Adding insn 1253 to worklist
  Adding insn 1251 to worklist
  Adding insn 1247 to worklist
  Adding insn 1246 to worklist
  Adding insn 1242 to worklist
processing block 276 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
  Adding insn 194 to worklist
processing block 76 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
  Adding insn 1236 to worklist
processing block 75 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
  Adding insn 1232 to worklist
  Adding insn 1231 to worklist
  Adding insn 1229 to worklist
  Adding insn 1226 to worklist
  Adding insn 1225 to worklist
  Adding insn 1222 to worklist
  Adding insn 1218 to worklist
processing block 74 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1710 1853 1854
  Adding insn 1214 to worklist
  Adding insn 1213 to worklist
  Adding insn 1211 to worklist
  Adding insn 1210 to worklist
  Adding insn 1209 to worklist
  Adding insn 1206 to worklist
  Adding insn 1205 to worklist
  Adding insn 1204 to worklist
  Adding insn 1203 to worklist
  Adding insn 1201 to worklist
processing block 69 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1710 1854
  Adding insn 1083 to worklist
  Adding insn 1082 to worklist
processing block 68 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
  Adding insn 1076 to worklist
  Adding insn 1075 to worklist
processing block 67 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
  Adding insn 1070 to worklist
  Adding insn 1069 to worklist
processing block 66 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
  Adding insn 1064 to worklist
  Adding insn 1063 to worklist
  Adding insn 1062 to worklist
processing block 61 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 979 to worklist
  Adding insn 978 to worklist
  Adding insn 977 to worklist
  Adding insn 976 to worklist
  Adding insn 973 to worklist
  Adding insn 972 to worklist
  Adding insn 971 to worklist
  Adding insn 966 to worklist
  Adding insn 965 to worklist
processing block 62 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 999 to worklist
  Adding insn 998 to worklist
  Adding insn 997 to worklist
  Adding insn 996 to worklist
  Adding insn 993 to worklist
  Adding insn 992 to worklist
  Adding insn 991 to worklist
  Adding insn 986 to worklist
  Adding insn 985 to worklist
processing block 63 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 1019 to worklist
  Adding insn 1018 to worklist
  Adding insn 1017 to worklist
  Adding insn 1016 to worklist
  Adding insn 1013 to worklist
  Adding insn 1012 to worklist
  Adding insn 1011 to worklist
  Adding insn 1006 to worklist
  Adding insn 1005 to worklist
processing block 64 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 1039 to worklist
  Adding insn 1038 to worklist
  Adding insn 1037 to worklist
  Adding insn 1036 to worklist
  Adding insn 1033 to worklist
  Adding insn 1032 to worklist
  Adding insn 1031 to worklist
  Adding insn 1026 to worklist
  Adding insn 1025 to worklist
processing block 60 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
  Adding insn 958 to worklist
  Adding insn 957 to worklist
processing block 59 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015 1710
  Adding insn 955 to worklist
  Adding insn 954 to worklist
processing block 73 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 1195 to worklist
  Adding insn 1194 to worklist
  Adding insn 1193 to worklist
  Adding insn 1192 to worklist
  Adding insn 1186 to worklist
  Adding insn 1181 to worklist
  Adding insn 1180 to worklist
  Adding insn 1176 to worklist
  Adding insn 1171 to worklist
  Adding insn 1170 to worklist
  Adding insn 1166 to worklist
  Adding insn 1161 to worklist
  Adding insn 1160 to worklist
  Adding insn 1157 to worklist
  Adding insn 1154 to worklist
  Adding insn 1151 to worklist
  Adding insn 1146 to worklist
  Adding insn 1144 to worklist
  Adding insn 1143 to worklist
  Adding insn 1142 to worklist
  Adding insn 1140 to worklist
  Adding insn 1135 to worklist
  Adding insn 1133 to worklist
  Adding insn 1132 to worklist
  Adding insn 1131 to worklist
  Adding insn 1129 to worklist
  Adding insn 1124 to worklist
  Adding insn 1122 to worklist
  Adding insn 1121 to worklist
  Adding insn 1120 to worklist
processing block 72 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 4199 to worklist
processing block 71 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
  Adding insn 1117 to worklist
processing block 58 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
  Adding insn 951 to worklist
processing block 56 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
  Adding insn 943 to worklist
processing block 55 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 940 to worklist
  Adding insn 937 to worklist
  Adding insn 935 to worklist
  Adding insn 934 to worklist
  Adding insn 933 to worklist
processing block 6 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1908 1909 1910 1911
  Adding insn 322 to worklist
  Adding insn 321 to worklist
  Adding insn 914 to worklist
  Adding insn 913 to worklist
  Adding insn 932 to worklist
  Adding insn 4198 to worklist
  Adding insn 193 to worklist
  Adding insn 192 to worklist
  Adding insn 191 to worklist
processing block 5 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
  Adding insn 311 to worklist
  Adding insn 309 to worklist
processing block 4 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
  Adding insn 306 to worklist
  Adding insn 305 to worklist
  Adding insn 303 to worklist
  Adding insn 302 to worklist
  Adding insn 301 to worklist
processing block 3 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 4197 to worklist
processing block 2 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
  Adding insn 289 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
DCE: Deleting insn 4365
deleting insn with uid = 4365.
DCE: Deleting insn 3791
deleting insn with uid = 3791.
DCE: Deleting insn 4367
deleting insn with uid = 4367.
DCE: Deleting insn 4366
deleting insn with uid = 4366.
DCE: Deleting insn 4351
deleting insn with uid = 4351.
DCE: Deleting insn 3610
deleting insn with uid = 3610.
DCE: Deleting insn 4350
deleting insn with uid = 4350.
DCE: Deleting insn 4349
deleting insn with uid = 4349.
DCE: Deleting insn 3604
deleting insn with uid = 3604.
DCE: Deleting insn 4355
deleting insn with uid = 4355.
DCE: Deleting insn 4356
deleting insn with uid = 4356.
DCE: Deleting insn 3093
deleting insn with uid = 3093.
DCE: Deleting insn 4364
deleting insn with uid = 4364.
DCE: Deleting insn 4363
deleting insn with uid = 4363.
DCE: Deleting insn 4362
deleting insn with uid = 4362.
DCE: Deleting insn 4361
deleting insn with uid = 4361.
DCE: Deleting insn 4360
deleting insn with uid = 4360.
DCE: Deleting insn 4359
deleting insn with uid = 4359.
DCE: Deleting insn 4358
deleting insn with uid = 4358.
DCE: Deleting insn 4357
deleting insn with uid = 4357.
DCE: Deleting insn 4375
deleting insn with uid = 4375.
DCE: Deleting insn 4374
deleting insn with uid = 4374.
DCE: Deleting insn 4373
deleting insn with uid = 4373.
DCE: Deleting insn 4372
deleting insn with uid = 4372.
DCE: Deleting insn 4371
deleting insn with uid = 4371.
DCE: Deleting insn 4370
deleting insn with uid = 4370.
DCE: Deleting insn 4369
deleting insn with uid = 4369.
DCE: Deleting insn 4368
deleting insn with uid = 4368.
DCE: Deleting insn 4377
deleting insn with uid = 4377.
DCE: Deleting insn 4409
deleting insn with uid = 4409.
DCE: Deleting insn 4408
deleting insn with uid = 4408.
DCE: Deleting insn 4407
deleting insn with uid = 4407.
DCE: Deleting insn 4406
deleting insn with uid = 4406.
DCE: Deleting insn 4394
deleting insn with uid = 4394.
DCE: Deleting insn 4388
deleting insn with uid = 4388.
DCE: Deleting insn 4387
deleting insn with uid = 4387.
DCE: Deleting insn 4386
deleting insn with uid = 4386.
DCE: Deleting insn 4385
deleting insn with uid = 4385.
DCE: Deleting insn 4384
deleting insn with uid = 4384.
DCE: Deleting insn 4383
deleting insn with uid = 4383.
DCE: Deleting insn 4382
deleting insn with uid = 4382.
DCE: Deleting insn 4381
deleting insn with uid = 4381.
DCE: Deleting insn 4380
deleting insn with uid = 4380.
DCE: Deleting insn 4405
deleting insn with uid = 4405.
DCE: Deleting insn 4401
deleting insn with uid = 4401.
DCE: Deleting insn 4400
deleting insn with uid = 4400.
DCE: Deleting insn 4399
deleting insn with uid = 4399.
DCE: Deleting insn 4404
deleting insn with uid = 4404.
DCE: Deleting insn 4403
deleting insn with uid = 4403.
DCE: Deleting insn 4402
deleting insn with uid = 4402.
DCE: Deleting insn 4411
deleting insn with uid = 4411.
DCE: Deleting insn 4410
deleting insn with uid = 4410.
DCE: Deleting insn 4413
deleting insn with uid = 4413.
DCE: Deleting insn 4412
deleting insn with uid = 4412.
df_worklist_dataflow_doublequeue:n_basic_blocks 292 n_edges 426 count 567 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 292 n_edges 426 count 476 (  1.6)
(lo_sum:DI (reg/f:DI 840)
    (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7f3c5d82eab0 *.LC1>))

Cold cost: 4 (final)
(set (reg/f:DI 839)
    (lo_sum:DI (reg/f:DI 840)
        (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7f3c5d82eab0 *.LC1>)))

Cold cost: 4 (final)
(set (mem/c:SI (lo_sum:DI (reg/f:DI 842)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])
    (reg:SI 843))

Cold cost: 0 (final)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (mem/c:SI (lo_sum:DI (reg/f:DI 842)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])
    (const_int 1 [0x1]))

Cold cost: 4 (final)
(set (mem/c:SI (lo_sum:DI (reg/f:DI 842)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])
    (reg:SI 843))

Cold cost: 0 (final)
(set (mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])
    (reg:SI 843))

Cold cost: 0 (final)
(lo_sum:DI (reg/f:DI 1864)
    (symbol_ref/f:DI ("*.LC27") [flags 0x82]  <var_decl 0x7f3c5d840870 *.LC27>))

Cold cost: 4 (final)
(set (reg/f:DI 1013)
    (lo_sum:DI (reg/f:DI 1864)
        (symbol_ref/f:DI ("*.LC27") [flags 0x82]  <var_decl 0x7f3c5d840870 *.LC27>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1908)
    (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>))

Cold cost: 4 (final)
(set (reg/f:DI 1909)
    (lo_sum:DI (reg/f:DI 1908)
        (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>)))

Cold cost: 4 (final)
(lo_sum:DI (high:DI (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>))
    (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>))

Cold cost: 4 (final)
(set (reg/f:DI 1909)
    (lo_sum:DI (high:DI (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>))
        (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1910)
    (label_ref 324))

Cold cost: 4 (final)
(set (reg/f:DI 1911)
    (lo_sum:DI (reg/f:DI 1910)
        (label_ref 324)))

Cold cost: 4 (final)
(lo_sum:DI (high:DI (label_ref 324))
    (label_ref 324))

Cold cost: 4 (final)
(set (reg/f:DI 1911)
    (lo_sum:DI (high:DI (label_ref 324))
        (label_ref 324)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 848)
    (symbol_ref/f:DI ("*.LC2") [flags 0x82]  <var_decl 0x7f3c5d82eb40 *.LC2>))

Cold cost: 4 (final)
(set (reg/f:DI 847)
    (lo_sum:DI (reg/f:DI 848)
        (symbol_ref/f:DI ("*.LC2") [flags 0x82]  <var_decl 0x7f3c5d82eb40 *.LC2>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 850)
    (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>))

Cold cost: 4 (final)
(set (reg/f:DI 849)
    (lo_sum:DI (reg/f:DI 850)
        (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 856)
    (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>))

Cold cost: 4 (final)
(set (reg/f:DI 855)
    (lo_sum:DI (reg/f:DI 856)
        (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>)))

Cold cost: 4 (final)
(set (reg:DF 35 v3)
    (reg:DF 851))

Cold cost: 4 (final)
(set (reg:DF 34 v2)
    (reg:DF 852))

Cold cost: 4 (final)
(set (reg:DF 33 v1)
    (reg:DF 852))

Cold cost: 4 (final)
(set (reg:DF 32 v0)
    (reg:DF 854))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 858)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 857)
    (lo_sum:DI (reg/f:DI 858)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(set (mem/c:SI (reg/f:DI 857) [3 VERBOSE+0 S4 A32])
    (reg:SI 859))

Cold cost: 0 (final)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (mem/c:SI (reg/f:DI 857) [3 VERBOSE+0 S4 A32])
    (const_int 1 [0x1]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 861)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 860)
    (lo_sum:DI (reg/f:DI 861)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(set (mem/c:SI (plus:DI (reg/f:DI 860)
            (const_int 4 [0x4])) [3 use_RMAT+0 S4 A32])
    (reg:SI 862))

Cold cost: 0 (final)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (mem/c:SI (plus:DI (reg/f:DI 860)
            (const_int 4 [0x4])) [3 use_RMAT+0 S4 A32])
    (const_int 1 [0x1]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 864)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 863)
    (lo_sum:DI (reg/f:DI 864)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 867)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 866)
    (lo_sum:DI (reg/f:DI 867)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 869)
    (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>))

Cold cost: 4 (final)
(set (reg/f:DI 868)
    (lo_sum:DI (reg/f:DI 869)
        (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 870)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 873)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 872)
    (lo_sum:DI (reg/f:DI 873)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 876)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 875)
    (lo_sum:DI (reg/f:DI 876)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 878)
    (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>))

Cold cost: 4 (final)
(set (reg/f:DI 877)
    (lo_sum:DI (reg/f:DI 878)
        (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 879)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 882)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 881)
    (lo_sum:DI (reg/f:DI 882)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 883)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 889)
    (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>))

Cold cost: 4 (final)
(set (reg/f:DI 888)
    (lo_sum:DI (reg/f:DI 889)
        (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 890)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 896)
    (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>))

Cold cost: 4 (final)
(set (reg/f:DI 895)
    (lo_sum:DI (reg/f:DI 896)
        (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 897)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 900)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 899)
    (lo_sum:DI (reg/f:DI 900)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 901)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 907)
    (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>))

Cold cost: 4 (final)
(set (reg/f:DI 906)
    (lo_sum:DI (reg/f:DI 907)
        (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 908)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 914)
    (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>))

Cold cost: 4 (final)
(set (reg/f:DI 913)
    (lo_sum:DI (reg/f:DI 914)
        (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 915)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1855)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 917)
    (lo_sum:DI (reg/f:DI 1855)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 919)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 923)
    (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>))

Cold cost: 4 (final)
(set (reg/f:DI 922)
    (lo_sum:DI (reg/f:DI 923)
        (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 924)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 930)
    (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>))

Cold cost: 4 (final)
(set (reg/f:DI 929)
    (lo_sum:DI (reg/f:DI 930)
        (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 931)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 937)
    (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>))

Cold cost: 4 (final)
(set (reg/f:DI 936)
    (lo_sum:DI (reg/f:DI 937)
        (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 938)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1855)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 940)
    (lo_sum:DI (reg/f:DI 1855)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 942)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 946)
    (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>))

Cold cost: 4 (final)
(set (reg/f:DI 945)
    (lo_sum:DI (reg/f:DI 946)
        (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 947)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 953)
    (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>))

Cold cost: 4 (final)
(set (reg/f:DI 952)
    (lo_sum:DI (reg/f:DI 953)
        (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 954)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 960)
    (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>))

Cold cost: 4 (final)
(set (reg/f:DI 959)
    (lo_sum:DI (reg/f:DI 960)
        (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 961)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1855)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 963)
    (lo_sum:DI (reg/f:DI 1855)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 965)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 969)
    (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>))

Cold cost: 4 (final)
(set (reg/f:DI 968)
    (lo_sum:DI (reg/f:DI 969)
        (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 970)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 976)
    (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>))

Cold cost: 4 (final)
(set (reg/f:DI 975)
    (lo_sum:DI (reg/f:DI 976)
        (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 977)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 983)
    (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>))

Cold cost: 4 (final)
(set (reg/f:DI 982)
    (lo_sum:DI (reg/f:DI 983)
        (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 984)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1855)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 986)
    (lo_sum:DI (reg/f:DI 1855)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 988)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 992)
    (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>))

Cold cost: 4 (final)
(set (reg/f:DI 991)
    (lo_sum:DI (reg/f:DI 992)
        (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 993)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 999)
    (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>))

Cold cost: 4 (final)
(set (reg/f:DI 998)
    (lo_sum:DI (reg/f:DI 999)
        (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 1000)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1006)
    (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>))

Cold cost: 4 (final)
(set (reg/f:DI 1005)
    (lo_sum:DI (reg/f:DI 1006)
        (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 1007)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Cold cost: 4 (final)
(set (reg/f:DI 1011)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1017)
    (label_ref 960))

Cold cost: 4 (final)
(set (reg/f:DI 1016)
    (lo_sum:DI (reg/f:DI 1017)
        (label_ref 960)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1018)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(minus:DF (reg:DF 1032)
    (reg:DF 1029 [ D.3804 ]))

Cold cost: 4 (final)
(set (reg:DF 1031 [ D.3804 ])
    (minus:DF (reg:DF 1032)
        (reg:DF 1029 [ D.3804 ])))

Cold cost: 4 (final)
(const_double:DF 1.0e+0 [0x0.8p+1])

Cold cost: 4 (final)
(minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
    (reg:DF 1029 [ D.3804 ]))

Cold cost: 8 (final)
(set (reg:DF 1031 [ D.3804 ])
    (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
        (reg:DF 1029 [ D.3804 ])))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1033)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(minus:DF (reg:DF 1047)
    (reg:DF 1044 [ D.3804 ]))

Cold cost: 4 (final)
(set (reg:DF 1046 [ D.3804 ])
    (minus:DF (reg:DF 1047)
        (reg:DF 1044 [ D.3804 ])))

Cold cost: 4 (final)
(const_double:DF 1.0e+0 [0x0.8p+1])

Cold cost: 4 (final)
(minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
    (reg:DF 1044 [ D.3804 ]))

Cold cost: 8 (final)
(set (reg:DF 1046 [ D.3804 ])
    (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
        (reg:DF 1044 [ D.3804 ])))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1048)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(minus:DF (reg:DF 1062)
    (reg:DF 1059 [ D.3804 ]))

Cold cost: 4 (final)
(set (reg:DF 1061 [ D.3804 ])
    (minus:DF (reg:DF 1062)
        (reg:DF 1059 [ D.3804 ])))

Cold cost: 4 (final)
(const_double:DF 1.0e+0 [0x0.8p+1])

Cold cost: 4 (final)
(minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
    (reg:DF 1059 [ D.3804 ]))

Cold cost: 8 (final)
(set (reg:DF 1061 [ D.3804 ])
    (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
        (reg:DF 1059 [ D.3804 ])))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1063)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(minus:DF (reg:DF 1077)
    (reg:DF 1074 [ D.3804 ]))

Cold cost: 4 (final)
(set (reg:DF 1076 [ D.3804 ])
    (minus:DF (reg:DF 1077)
        (reg:DF 1074 [ D.3804 ])))

Cold cost: 4 (final)
(const_double:DF 1.0e+0 [0x0.8p+1])

Cold cost: 4 (final)
(minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
    (reg:DF 1074 [ D.3804 ]))

Cold cost: 8 (final)
(set (reg:DF 1076 [ D.3804 ])
    (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
        (reg:DF 1074 [ D.3804 ])))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1079)
    (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>))

Cold cost: 4 (final)
(set (reg/f:DI 1078)
    (lo_sum:DI (reg/f:DI 1079)
        (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1081)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1081)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1100)
    (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>))

Cold cost: 4 (final)
(set (reg/f:DI 1099)
    (lo_sum:DI (reg/f:DI 1100)
        (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1102)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1102)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1103)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(minus:DF (reg:DF 1130)
    (reg:DF 1128 [ D.3804 ]))

Cold cost: 4 (final)
(set (reg:DF 1129 [ D.3804 ])
    (minus:DF (reg:DF 1130)
        (reg:DF 1128 [ D.3804 ])))

Cold cost: 4 (final)
(const_double:DF 1.0e+0 [0x0.8p+1])

Cold cost: 4 (final)
(minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
    (reg:DF 1128 [ D.3804 ]))

Cold cost: 8 (final)
(set (reg:DF 1129 [ D.3804 ])
    (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
        (reg:DF 1128 [ D.3804 ])))

Cold cost: 8 (final)
(ashift:DI (reg:DI 1135)
    (subreg:QI (reg:DI 1133 [ SCALE ]) 0))

Cold cost: 4 (partial)
(set (reg:DI 243 [ D.3798 ])
    (ashift:DI (reg:DI 1135)
        (subreg:QI (reg:DI 1133 [ SCALE ]) 0)))

Cold cost: 4 (final)
(ashift:DI (const_int 1 [0x1])
    (subreg:QI (reg:DI 1133 [ SCALE ]) 0))

Cold cost: 4 (partial)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (reg:DI 243 [ D.3798 ])
    (ashift:DI (const_int 1 [0x1])
        (subreg:QI (reg:DI 1133 [ SCALE ]) 0)))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1136)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1139)
    (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>))

Cold cost: 4 (final)
(set (reg/f:DI 1138)
    (lo_sum:DI (reg/f:DI 1139)
        (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1862)
    (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))

Cold cost: 4 (final)
(set (reg/f:DI 1170)
    (lo_sum:DI (reg/f:DI 1862)
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)))

Cold cost: 4 (final)
(set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 421 [ D.3802 ]))

Cold cost: 0 (final)
(set (mem/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 421 [ D.3802 ]))

Cold cost: 0 (final)
(lo_sum:DI (reg/f:DI 1183)
    (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1182)
    (lo_sum:DI (reg/f:DI 1183)
        (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1185)
    (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))

Cold cost: 4 (final)
(set (reg/f:DI 1184)
    (lo_sum:DI (reg/f:DI 1185)
        (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1187)
    (symbol_ref/f:DI ("*.LC32") [flags 0x82]  <var_decl 0x7f3c5d840b40 *.LC32>))

Cold cost: 4 (final)
(set (reg/f:DI 1186)
    (lo_sum:DI (reg/f:DI 1187)
        (symbol_ref/f:DI ("*.LC32") [flags 0x82]  <var_decl 0x7f3c5d840b40 *.LC32>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1189)
    (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1188)
    (lo_sum:DI (reg/f:DI 1189)
        (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1191)
    (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))

Cold cost: 4 (final)
(set (reg/f:DI 1190)
    (lo_sum:DI (reg/f:DI 1191)
        (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1193)
    (symbol_ref/f:DI ("*.LC33") [flags 0x82]  <var_decl 0x7f3c5d840bd0 *.LC33>))

Cold cost: 4 (final)
(set (reg/f:DI 1192)
    (lo_sum:DI (reg/f:DI 1193)
        (symbol_ref/f:DI ("*.LC33") [flags 0x82]  <var_decl 0x7f3c5d840bd0 *.LC33>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1200)
    (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>))

Cold cost: 4 (final)
(set (reg/f:DI 1199)
    (lo_sum:DI (reg/f:DI 1200)
        (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1859)
    (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))

Cold cost: 4 (final)
(set (reg/f:DI 1211)
    (lo_sum:DI (reg/f:DI 1859)
        (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1859)
    (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))

Cold cost: 4 (final)
(set (reg/f:DI 1228)
    (lo_sum:DI (reg/f:DI 1859)
        (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)))

Cold cost: 4 (final)
(ashift:DI (reg:DI 1245)
    (subreg:QI (reg:DI 1232 [ SCALE ]) 0))

Cold cost: 4 (partial)
(set (reg/v:DI 290 [ nverts ])
    (ashift:DI (reg:DI 1245)
        (subreg:QI (reg:DI 1232 [ SCALE ]) 0)))

Cold cost: 4 (final)
(ashift:DI (const_int 1 [0x1])
    (subreg:QI (reg:DI 1232 [ SCALE ]) 0))

Cold cost: 4 (partial)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (reg/v:DI 290 [ nverts ])
    (ashift:DI (const_int 1 [0x1])
        (subreg:QI (reg:DI 1232 [ SCALE ]) 0)))

Cold cost: 8 (final)
(mult:DI (reg:DI 1248 [ new_state.z1 ])
    (reg:DI 1249))

Cold cost: 4 (final)
(set (reg/v:DI 431 [ val0 ])
    (mult:DI (reg:DI 1248 [ new_state.z1 ])
        (reg:DI 1249)))

Cold cost: 4 (final)
(const_int 4294967295 [0xffffffff])

Cold cost: 4 (final)
(mult:DI (reg:DI 1248 [ new_state.z1 ])
    (const_int 4294967295 [0xffffffff]))

Cold cost: 8 (final)
(set (reg/v:DI 431 [ val0 ])
    (mult:DI (reg:DI 1248 [ new_state.z1 ])
        (const_int 4294967295 [0xffffffff])))

Cold cost: 8 (final)
(mult:DI (reg:DI 1253 [ new_state.z1 ])
    (reg:DI 1249))

Cold cost: 4 (final)
(set (reg/v:DI 433 [ val1 ])
    (mult:DI (reg:DI 1253 [ new_state.z1 ])
        (reg:DI 1249)))

Cold cost: 4 (final)
(const_int 4294967295 [0xffffffff])

Cold cost: 4 (final)
(mult:DI (reg:DI 1253 [ new_state.z1 ])
    (const_int 4294967295 [0xffffffff]))

Cold cost: 8 (final)
(set (reg/v:DI 433 [ val1 ])
    (mult:DI (reg:DI 1253 [ new_state.z1 ])
        (const_int 4294967295 [0xffffffff])))

Cold cost: 8 (final)
(ior:DI (reg/v:DI 432 [ val0 ])
    (reg:DI 1904))

Cold cost: 4 (final)
(set (reg:DI 1905 [ D.3802 ])
    (ior:DI (reg/v:DI 432 [ val0 ])
        (reg:DI 1904)))

Cold cost: 4 (final)
(const_int 4979156007449604625 [0x4519840211493211])

Cold cost: 16 (final)
(ior:DI (reg/v:DI 432 [ val0 ])
    (const_int 4979156007449604625 [0x4519840211493211]))

Cold cost: 20 (final)
(set (reg:DI 1905 [ D.3802 ])
    (ior:DI (reg/v:DI 432 [ val0 ])
        (const_int 4979156007449604625 [0x4519840211493211])))

Cold cost: 20 (final)
(ior:DI (reg/v:DI 434 [ val1 ])
    (reg:DI 1906))

Cold cost: 4 (final)
(set (reg:DI 1907 [ D.3802 ])
    (ior:DI (reg/v:DI 434 [ val1 ])
        (reg:DI 1906)))

Cold cost: 4 (final)
(const_int 3481428888784487333 [0x3050852102c843a5])

Cold cost: 16 (final)
(ior:DI (reg/v:DI 434 [ val1 ])
    (const_int 3481428888784487333 [0x3050852102c843a5]))

Cold cost: 20 (final)
(set (reg:DI 1907 [ D.3802 ])
    (ior:DI (reg/v:DI 434 [ val1 ])
        (const_int 3481428888784487333 [0x3050852102c843a5])))

Cold cost: 20 (final)
(lo_sum:DI (reg/f:DI 1901)
    (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))

Hot cost: 4 (final)
(set (reg/f:DI 1902)
    (lo_sum:DI (reg/f:DI 1901)
        (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>)))

Hot cost: 4 (final)
(lo_sum:DI (high:DI (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))
    (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))

Hot cost: 4 (final)
(set (reg/f:DI 1902)
    (lo_sum:DI (high:DI (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))
        (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>)))

Hot cost: 4 (final)
(compare:CC (reg:DI 750 [ D.3802 ])
    (reg:DI 1273))

Hot cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 750 [ D.3802 ])
        (reg:DI 1273)))

Hot cost: 4 (final)
(const_int 2147483646 [0x7ffffffe])

Hot cost: 4 (final)
(compare:CC (reg:DI 750 [ D.3802 ])
    (const_int 2147483646 [0x7ffffffe]))

Hot cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 750 [ D.3802 ])
        (const_int 2147483646 [0x7ffffffe])))

Hot cost: 8 (final)
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1274 [ D.3802 ]))
            (zero_extend:TI (reg:DI 1277)))
        (const_int 64 [0x40])))

Hot cost: 12 (final)
(set (reg:DI 1276)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1274 [ D.3802 ]))
                (zero_extend:TI (reg:DI 1277)))
            (const_int 64 [0x40]))))

Hot cost: 12 (final)

Failed to cost RTX.  Assuming default cost.
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1274 [ D.3802 ]))
            (const_int 8589934597 [0x200000005]))
        (const_int 64 [0x40])))

Hot cost: 4 (final)
(set (reg:DI 1276)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1274 [ D.3802 ]))
                (const_int 8589934597 [0x200000005]))
            (const_int 64 [0x40]))))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1297)
    (symbol_ref:DI ("__PRETTY_FUNCTION__.3503.lto_priv.8") [flags 0xc2]  <var_decl 0x7f3c5e2547e0 __PRETTY_FUNCTION__>))

Cold cost: 4 (final)
(set (reg/f:DI 1296)
    (lo_sum:DI (reg/f:DI 1297)
        (symbol_ref:DI ("__PRETTY_FUNCTION__.3503.lto_priv.8") [flags 0xc2]  <var_decl 0x7f3c5e2547e0 __PRETTY_FUNCTION__>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1299)
    (symbol_ref/f:DI ("*.LC35") [flags 0x82]  <var_decl 0x7f3c5d840d80 *.LC35>))

Cold cost: 4 (final)
(set (reg/f:DI 1298)
    (lo_sum:DI (reg/f:DI 1299)
        (symbol_ref/f:DI ("*.LC35") [flags 0x82]  <var_decl 0x7f3c5d840d80 *.LC35>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1301)
    (symbol_ref/f:DI ("*.LC36") [flags 0x82]  <var_decl 0x7f3c5d840e10 *.LC36>))

Cold cost: 4 (final)
(set (reg/f:DI 1300)
    (lo_sum:DI (reg/f:DI 1301)
        (symbol_ref/f:DI ("*.LC36") [flags 0x82]  <var_decl 0x7f3c5d840e10 *.LC36>)))

Cold cost: 4 (final)
(set (reg:DI 1893)
    (reg:DI 1303))

Hot cost: 4 (final)
(const_int 104480 [0x19820])

Hot cost: 8 (final)
(set (reg:DI 1893)
    (const_int 104480 [0x19820]))

Hot cost: 8 (final)
(set (reg:DI 1894)
    (reg:DI 1313))

Hot cost: 4 (final)
(const_int 7294 [0x1c7e])

Hot cost: 4 (final)
(set (reg:DI 1894)
    (const_int 7294 [0x1c7e]))

Hot cost: 4 (final)
rescanning insn with uid = 4379.
LOCAL CONST-PROP: Replacing reg 1313 in insn 4379 with constant (const_int 7294 [0x1c7e])
(set (reg:DI 1900 [ D.3798 ])
    (reg:DI 1897 [ D.3798 ]))

Hot cost: 4 (final)
(const_int 1 [0x1])

Hot cost: 4 (final)
(set (reg:DI 1900 [ D.3798 ])
    (const_int 1 [0x1]))

Hot cost: 4 (final)
rescanning insn with uid = 273.
LOCAL CONST-PROP: Replacing reg 1897 in insn 273 with constant (const_int 1 [0x1])
(lo_sum:DI (reg/f:DI 1346)
    (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1345)
    (lo_sum:DI (reg/f:DI 1346)
        (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1350)
    (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>))

Cold cost: 4 (final)
(set (reg/f:DI 1349)
    (lo_sum:DI (reg/f:DI 1350)
        (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1352)
    (symbol_ref/f:DI ("*.LC38") [flags 0x82]  <var_decl 0x7f3c5d840f30 *.LC38>))

Cold cost: 4 (final)
(set (reg/f:DI 1351)
    (lo_sum:DI (reg/f:DI 1352)
        (symbol_ref/f:DI ("*.LC38") [flags 0x82]  <var_decl 0x7f3c5d840f30 *.LC38>)))

Cold cost: 4 (final)
(minus:SI (reg:SI 1361)
    (reg:SI 261 [ D.3797 ]))

Cold cost: 4 (final)
(set (reg:SI 539 [ D.3797 ])
    (minus:SI (reg:SI 1361)
        (reg:SI 261 [ D.3797 ])))

Cold cost: 4 (final)
(const_int 64 [0x40])

Cold cost: 4 (final)
(minus:SI (const_int 64 [0x40])
    (reg:SI 261 [ D.3797 ]))

Cold cost: 8 (final)
(set (reg:SI 539 [ D.3797 ])
    (minus:SI (const_int 64 [0x40])
        (reg:SI 261 [ D.3797 ])))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1375)
    (symbol_ref:DI ("__PRETTY_FUNCTION__.3549.lto_priv.17") [flags 0xc2]  <var_decl 0x7f3c5e254990 __PRETTY_FUNCTION__>))

Cold cost: 4 (final)
(set (reg/f:DI 1374)
    (lo_sum:DI (reg/f:DI 1375)
        (symbol_ref:DI ("__PRETTY_FUNCTION__.3549.lto_priv.17") [flags 0xc2]  <var_decl 0x7f3c5e254990 __PRETTY_FUNCTION__>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1377)
    (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>))

Cold cost: 4 (final)
(set (reg/f:DI 1376)
    (lo_sum:DI (reg/f:DI 1377)
        (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1379)
    (symbol_ref/f:DI ("*.LC39") [flags 0x82]  <var_decl 0x7f3c5d82ef30 *.LC39>))

Cold cost: 4 (final)
(set (reg/f:DI 1378)
    (lo_sum:DI (reg/f:DI 1379)
        (symbol_ref/f:DI ("*.LC39") [flags 0x82]  <var_decl 0x7f3c5d82ef30 *.LC39>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1404)
    (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>))

Cold cost: 4 (final)
(set (reg/f:DI 1403)
    (lo_sum:DI (reg/f:DI 1404)
        (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1408)
    (symbol_ref/f:DI ("*.LC41") [flags 0x82]  <var_decl 0x7f3c5d881090 *.LC41>))

Cold cost: 4 (final)
(set (reg/f:DI 1407)
    (lo_sum:DI (reg/f:DI 1408)
        (symbol_ref/f:DI ("*.LC41") [flags 0x82]  <var_decl 0x7f3c5d881090 *.LC41>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1415)
    (symbol_ref/f:DI ("*.LC42") [flags 0x82]  <var_decl 0x7f3c5d881120 *.LC42>))

Cold cost: 4 (final)
(set (reg/f:DI 1414)
    (lo_sum:DI (reg/f:DI 1415)
        (symbol_ref/f:DI ("*.LC42") [flags 0x82]  <var_decl 0x7f3c5d881120 *.LC42>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1420)
    (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>))

Cold cost: 4 (final)
(set (reg/f:DI 1419)
    (lo_sum:DI (reg/f:DI 1420)
        (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1435)
    (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>))

Cold cost: 4 (final)
(set (reg/f:DI 1434)
    (lo_sum:DI (reg/f:DI 1435)
        (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1439)
    (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>))

Cold cost: 4 (final)
(set (reg/f:DI 1438)
    (lo_sum:DI (reg/f:DI 1439)
        (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1441)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1441)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1561)
    (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>))

Cold cost: 4 (final)
(set (reg/f:DI 1560)
    (lo_sum:DI (reg/f:DI 1561)
        (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1567)
    (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>))

Cold cost: 4 (final)
(set (reg/f:DI 1566)
    (lo_sum:DI (reg/f:DI 1567)
        (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>)))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (reg/f:DI 1569)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (reg/f:DI 1569)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1606)
    (symbol_ref/f:DI ("*.LC50") [flags 0x82]  <var_decl 0x7f3c5d881480 *.LC50>))

Cold cost: 4 (final)
(set (reg/f:DI 1605)
    (lo_sum:DI (reg/f:DI 1606)
        (symbol_ref/f:DI ("*.LC50") [flags 0x82]  <var_decl 0x7f3c5d881480 *.LC50>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1615)
    (symbol_ref/f:DI ("*.LC51") [flags 0x82]  <var_decl 0x7f3c5d881510 *.LC51>))

Cold cost: 4 (final)
(set (reg/f:DI 1614)
    (lo_sum:DI (reg/f:DI 1615)
        (symbol_ref/f:DI ("*.LC51") [flags 0x82]  <var_decl 0x7f3c5d881510 *.LC51>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1876)
    (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>))

Cold cost: 4 (final)
(set (reg/f:DI 1877)
    (lo_sum:DI (reg/f:DI 1876)
        (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>)))

Cold cost: 4 (final)
(lo_sum:DI (high:DI (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>))
    (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>))

Cold cost: 4 (final)
(set (reg/f:DI 1877)
    (lo_sum:DI (high:DI (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>))
        (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1625)
    (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1624)
    (lo_sum:DI (reg/f:DI 1625)
        (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1628)
    (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))

Cold cost: 4 (final)
(set (reg/f:DI 1627)
    (lo_sum:DI (reg/f:DI 1628)
        (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1630)
    (symbol_ref/f:DI ("*.LC52") [flags 0x82]  <var_decl 0x7f3c5d8815a0 *.LC52>))

Cold cost: 4 (final)
(set (reg/f:DI 1629)
    (lo_sum:DI (reg/f:DI 1630)
        (symbol_ref/f:DI ("*.LC52") [flags 0x82]  <var_decl 0x7f3c5d8815a0 *.LC52>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Hot cost: 4 (final)
(set (reg/f:DI 1636)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1665)
    (symbol_ref:DI ("bfs_time.lto_priv.14") [flags 0xc2]  <var_decl 0x7f3c5e254240 bfs_time>))

Hot cost: 4 (final)
(set (reg/f:DI 1664)
    (lo_sum:DI (reg/f:DI 1665)
        (symbol_ref:DI ("bfs_time.lto_priv.14") [flags 0xc2]  <var_decl 0x7f3c5e254240 bfs_time>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1670)
    (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>))

Hot cost: 4 (final)
(set (reg/f:DI 1669)
    (lo_sum:DI (reg/f:DI 1670)
        (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Hot cost: 4 (final)
(set (reg/f:DI 1671)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1675)
    (symbol_ref/f:DI ("*.LC56") [flags 0x82]  <var_decl 0x7f3c5d881750 *.LC56>))

Cold cost: 4 (final)
(set (reg/f:DI 1674)
    (lo_sum:DI (reg/f:DI 1675)
        (symbol_ref/f:DI ("*.LC56") [flags 0x82]  <var_decl 0x7f3c5d881750 *.LC56>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1680)
    (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>))

Hot cost: 4 (final)
(set (reg/f:DI 1679)
    (lo_sum:DI (reg/f:DI 1680)
        (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1733)
    (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1732)
    (lo_sum:DI (reg/f:DI 1733)
        (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1737)
    (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))

Cold cost: 4 (final)
(set (reg/f:DI 1736)
    (lo_sum:DI (reg/f:DI 1737)
        (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1739)
    (symbol_ref/f:DI ("*.LC61") [flags 0x82]  <var_decl 0x7f3c5d881900 *.LC61>))

Cold cost: 4 (final)
(set (reg/f:DI 1738)
    (lo_sum:DI (reg/f:DI 1739)
        (symbol_ref/f:DI ("*.LC61") [flags 0x82]  <var_decl 0x7f3c5d881900 *.LC61>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1744)
    (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1743)
    (lo_sum:DI (reg/f:DI 1744)
        (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1748)
    (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))

Cold cost: 4 (final)
(set (reg/f:DI 1747)
    (lo_sum:DI (reg/f:DI 1748)
        (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1750)
    (symbol_ref/f:DI ("*.LC62") [flags 0x82]  <var_decl 0x7f3c5d881990 *.LC62>))

Cold cost: 4 (final)
(set (reg/f:DI 1749)
    (lo_sum:DI (reg/f:DI 1750)
        (symbol_ref/f:DI ("*.LC62") [flags 0x82]  <var_decl 0x7f3c5d881990 *.LC62>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1752)
    (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1751)
    (lo_sum:DI (reg/f:DI 1752)
        (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1756)
    (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))

Cold cost: 4 (final)
(set (reg/f:DI 1755)
    (lo_sum:DI (reg/f:DI 1756)
        (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1758)
    (symbol_ref/f:DI ("*.LC63") [flags 0x82]  <var_decl 0x7f3c5d881a20 *.LC63>))

Cold cost: 4 (final)
(set (reg/f:DI 1757)
    (lo_sum:DI (reg/f:DI 1758)
        (symbol_ref/f:DI ("*.LC63") [flags 0x82]  <var_decl 0x7f3c5d881a20 *.LC63>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1761)
    (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1760)
    (lo_sum:DI (reg/f:DI 1761)
        (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1765)
    (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))

Cold cost: 4 (final)
(set (reg/f:DI 1764)
    (lo_sum:DI (reg/f:DI 1765)
        (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1767)
    (symbol_ref/f:DI ("*.LC64") [flags 0x82]  <var_decl 0x7f3c5d881ab0 *.LC64>))

Cold cost: 4 (final)
(set (reg/f:DI 1766)
    (lo_sum:DI (reg/f:DI 1767)
        (symbol_ref/f:DI ("*.LC64") [flags 0x82]  <var_decl 0x7f3c5d881ab0 *.LC64>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1860)
    (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))

Hot cost: 4 (final)
(set (reg/f:DI 1808)
    (lo_sum:DI (reg/f:DI 1860)
        (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1860)
    (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))

Hot cost: 4 (final)
(set (reg/f:DI 1814)
    (lo_sum:DI (reg/f:DI 1860)
        (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1821)
    (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>))

Hot cost: 4 (final)
(set (reg/f:DI 1820)
    (lo_sum:DI (reg/f:DI 1821)
        (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1856)
    (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))

Hot cost: 4 (final)
(set (reg/f:DI 1822)
    (lo_sum:DI (reg/f:DI 1856)
        (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)))

Hot cost: 4 (final)
(lo_sum:DI (reg/f:DI 1834)
    (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>))

Cold cost: 4 (final)
(set (reg/f:DI 1833)
    (lo_sum:DI (reg/f:DI 1834)
        (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1860)
    (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))

Hot cost: 4 (final)
(set (reg/f:DI 1846)
    (lo_sum:DI (reg/f:DI 1860)
        (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)))

Hot cost: 4 (final)
(set (mem:DI (reg/f:DI 1845) [4 MEM[symbol: bfs_nedge, index: _1361, offset: 0B]+0 S8 A64])
    (reg:DI 1848))

Hot cost: 0 (final)
(const_int -999 [0xfffffffffffffc19])

Hot cost: 4 (final)
(set (mem:DI (reg/f:DI 1845) [4 MEM[symbol: bfs_nedge, index: _1361, offset: 0B]+0 S8 A64])
    (const_int -999 [0xfffffffffffffc19]))

Hot cost: 4 (final)
changing bb of uid 4416
  unscanned insn
verify found no changes in insn with uid = 307.
Edge 4->6 redirected to 301
Implicit set of reg 293 in basic block 301
Implicit set of reg 865 in basic block 14
Implicit set of reg 874 in basic block 16
changing bb of uid 4418
  unscanned insn
verify found no changes in insn with uid = 456.
Edge 17->19 redirected to 302
Implicit set of reg 885 in basic block 302
changing bb of uid 4420
  unscanned insn
verify found no changes in insn with uid = 515.
Edge 21->23 redirected to 303
Implicit set of reg 903 in basic block 303
changing bb of uid 4422
  unscanned insn
verify found no changes in insn with uid = 573.
Edge 25->27 redirected to 304
Implicit set of reg 921 in basic block 304
changing bb of uid 4424
  unscanned insn
verify found no changes in insn with uid = 593.
Edge 27->29 redirected to 305
Implicit set of reg 926 in basic block 305
changing bb of uid 4426
  unscanned insn
verify found no changes in insn with uid = 661.
Edge 32->34 redirected to 306
Implicit set of reg 944 in basic block 306
changing bb of uid 4428
  unscanned insn
verify found no changes in insn with uid = 681.
Edge 34->36 redirected to 307
Implicit set of reg 949 in basic block 307
changing bb of uid 4430
  unscanned insn
verify found no changes in insn with uid = 749.
Edge 39->41 redirected to 308
Implicit set of reg 967 in basic block 308
changing bb of uid 4432
  unscanned insn
verify found no changes in insn with uid = 769.
Edge 41->43 redirected to 309
Implicit set of reg 972 in basic block 309
changing bb of uid 4434
  unscanned insn
verify found no changes in insn with uid = 837.
Edge 46->48 redirected to 310
Implicit set of reg 990 in basic block 310
changing bb of uid 4436
  unscanned insn
verify found no changes in insn with uid = 857.
Edge 48->50 redirected to 311
Implicit set of reg 995 in basic block 311
Implicit set of reg 294 in basic block 56
Implicit set of reg 360 in basic block 58
Implicit set of reg 328 in basic block 59
Implicit set of reg 328 in basic block 72
changing bb of uid 4438
  unscanned insn
verify found no changes in insn with uid = 1215.
Edge 74->276 redirected to 312
Implicit set of reg 286 in basic block 312
Implicit set of reg 1142 in basic block 76
Implicit set of reg 246 in basic block 82
changing bb of uid 4440
  unscanned insn
verify found no changes in insn with uid = 1351.
Edge 82->84 redirected to 313
Implicit set of reg 1198 in basic block 313
Implicit set of reg 1205 in basic block 86
changing bb of uid 4442
  unscanned insn
Redirecting fallthru edge 87->88 to 314
Implicit set of reg 435 in basic block 314
changing bb of uid 4443
  unscanned insn
verify found no changes in insn with uid = 1584.
Edge 91->93 redirected to 315
Implicit set of reg 457 in basic block 315
changing bb of uid 4445
  unscanned insn
Redirecting fallthru edge 93->88 to 316
Implicit set of reg 266 in basic block 316
Implicit set of reg 1363 in basic block 124
Implicit set of reg 1373 in basic block 126
Implicit set of reg 1388 in basic block 127
Implicit set of reg 1397 in basic block 128
changing bb of uid 4446
  unscanned insn
Redirecting fallthru edge 131->140 to 317
Implicit set of reg 1402 in basic block 317
changing bb of uid 4447
  unscanned insn
verify found no changes in insn with uid = 2285.
Edge 138->140 redirected to 318
Implicit set of reg 1418 in basic block 318
changing bb of uid 4449
  unscanned insn
verify found no changes in insn with uid = 2322.
Edge 140->142 redirected to 319
Implicit set of reg 1433 in basic block 319
Implicit set of reg 566 in basic block 144
Implicit set of reg 571 in basic block 145
changing bb of uid 4451
  unscanned insn
verify found no changes in insn with uid = 2457.
Edge 155->97 redirected to 320
Implicit set of reg 791 in basic block 320
changing bb of uid 4453
  unscanned insn
verify found no changes in insn with uid = 2500.
Edge 158->102 redirected to 321
Implicit set of reg 791 in basic block 321
changing bb of uid 4455
  unscanned insn
verify found no changes in insn with uid = 2602.
Edge 162->165 redirected to 322
Implicit set of reg 1532 in basic block 322
changing bb of uid 4457
  unscanned insn
verify found no changes in insn with uid = 2646.
Edge 168->170 redirected to 323
Implicit set of reg 791 in basic block 323
changing bb of uid 4459
  unscanned insn
verify found no changes in insn with uid = 2707.
Edge 173->175 redirected to 324
Implicit set of reg 791 in basic block 324
Implicit set of reg 647 in basic block 185
changing bb of uid 4461
  unscanned insn
verify found no changes in insn with uid = 2907.
Edge 188->190 redirected to 325
Implicit set of reg 1633 in basic block 325
Implicit set of reg 1668 in basic block 288
Implicit set of reg 618 in basic block 193
changing bb of uid 4463
  unscanned insn
Redirecting fallthru edge 193->195 to 326
Implicit set of reg 1678 in basic block 326
Implicit set of reg 746 in basic block 198
Implicit set of reg 742 in basic block 207
Implicit set of reg 742 in basic block 204
Implicit set of reg 742 in basic block 203
Implicit set of reg 715 in basic block 217
changing bb of uid 4464
  unscanned insn
verify found no changes in insn with uid = 3216.
Edge 217->239 redirected to 327
Implicit set of reg 1731 in basic block 327
Implicit set of reg 1742 in basic block 224
changing bb of uid 4466
  unscanned insn
verify found no changes in insn with uid = 3306.
Edge 228->227 redirected to 328
Implicit set of reg 734 in basic block 328
Implicit set of reg 1781 in basic block 245
Implicit set of reg 1788 in basic block 246
Implicit set of reg 1791 in basic block 247
Implicit set of reg 1796 in basic block 248
Implicit set of reg 716 in basic block 260
changing bb of uid 4468
  unscanned insn
verify found no changes in insn with uid = 3596.
Edge 262->266 redirected to 329
Implicit set of reg 1805 in basic block 329
changing bb of uid 4470
  unscanned insn
verify found no changes in insn with uid = 3635.
Edge 268->271 redirected to 330
Implicit set of reg 715 in basic block 330
Implicit set of reg 1812 in basic block 270
changing bb of uid 4472
  unscanned insn
verify found no changes in insn with uid = 3695.
Edge 271->274 redirected to 331
Implicit set of reg 1819 in basic block 331
changing bb of uid 4474
  unscanned insn
Redirecting fallthru edge 288->195 to 332
Implicit set of reg 618 in basic block 332
Implicit set of reg 715 in basic block 242
Implicit set of reg 1851 in basic block 298
Implicit set of reg 442 in basic block 121
Found 65 implicit sets
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 324 n_edges 458 count 623 (  1.9)


main

Dataflow summary:
def_info->table_size = 1887, use_info->table_size = 4121
;;  invalidated by call 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;;  hardware regs used 	 31 [sp] 64 [sfp] 65 [ap]
;;  regular block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap]
;;  exit block uses 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;;  regs ever live 	 0[x0] 1[x1] 2[x2] 3[x3] 4[x4] 5[x5] 16[x16] 17[x17] 30[x30] 31[sp] 32[v0] 33[v1] 34[v2] 35[v3] 36[v4] 37[v5] 66[cc]
;;  ref usage 	r0={240d,136u} r1={205d,70u} r2={193d,57u} r3={160d,24u} r4={138d,2u} r5={137d,1u} r6={136d} r7={136d} r8={136d} r9={135d} r10={135d} r11={135d} r12={135d} r13={135d} r14={135d} r15={135d} r16={270d} r17={270d} r18={136d} r29={1d,323u} r30={136d} r31={1d,458u} r32={149d,33u} r33={146d,10u} r34={140d,4u} r35={139d,3u} r36={137d,1u} r37={137d,1u} r38={136d} r39={136d} r48={135d} r49={135d} r50={135d} r51={135d} r52={135d} r53={135d} r54={135d} r55={135d} r56={135d} r57={135d} r58={135d} r59={135d} r60={135d} r61={135d} r62={135d} r63={135d} r64={1d,395u,9e} r65={1d,322u} r66={306d,169u} r240={3d,1u} r243={1d,3u} r244={1d,2u} r245={1d,11u} r246={1d,3u} r259={1d,1u} r261={1d,5u,1e} r262={1d,7u} r263={1d,1u} r266={2d,4u} r269={1d,4u} r283={1d,3u} r285={1d,1u} r286={1d,1u} r287={2d,6u} r289={1d,1u} r290={1d,4u} r291={1d,6u} r293={1d,1u} r294={1d,3u} r301={1d,2u} r303={1d,1u} r309={1d,2u} r311={1d,1u} r317={1d,2u} r319={1d,1u} r320={5d,14u} r328={5d,11u} r329={1d,2u} r331={1d,1u} r339={1d,2u} r341={1d,1u} r349={1d,2u} r351={1d,1u} r360={20d,16u} r386={1d,2u} r397={1d,2u,1e} r400={1d,2u} r406={1d,2u} r408={1d,2u} r410={1d,2u} r414={1d,2u} r416={2d,9u} r421={1d,4u} r424={1d,4u} r425={1d,2u} r427={1d,2u} r430={1d,2u} r431={1d,3u} r432={1d,2u} r433={1d,3u} r434={1d,2u} r435={2d,7u} r436={2d,8u} r438={1d,6u} r441={1d,6u} r442={4d,8u} r443={3d,9u} r444={1d,2u} r447={1d,3u} r456={2d,2u} r457={1d,4u} r460={2d,6u} r461={2d,2u} r463={2d,3u,2e} r464={2d,7u,1e} r468={4d,8u,2e} r469={3d,10u,3e} r473={2d,4u,1e} r476={2d,7u,2e} r478={1d,3u} r480={1d,3u} r482={1d,1u} r484={1d,1u} r485={1d,3u} r487={1d,1u} r489={1d,1u} r490={1d,3u} r492={1d,1u} r494={1d,1u} r496={1d,5u} r499={1d,3u} r501={1d,1u} r503={1d,1u} r504={1d,3u} r506={1d,1u} r508={1d,1u} r509={1d,3u} r511={1d,1u} r513={1d,1u} r515={1d,3u} r519={1d,2u} r520={1d,4u} r523={1d,3u} r525={1d,1u} r527={1d,1u} r528={1d,3u} r530={1d,1u} r532={1d,1u} r533={1d,3u} r535={1d,1u} r537={1d,1u} r539={1d,4u} r540={1d,5u} r544={1d,3u} r546={1d,1u} r548={1d,1u} r549={1d,3u} r551={1d,1u} r553={1d,1u} r554={1d,3u} r556={1d,1u} r558={1d,1u} r560={1d,3u} r566={1d,2u} r567={1d,1u} r571={1d,3u} r572={1d,5u} r575={2d,5u} r576={2d,3u} r578={2d,4u} r581={2d,4u} r582={1d,2u} r583={1d,2u} r590={1d,1u} r592={2d,4u} r596={2d,8u} r599={1d,2u} r600={1d,3u} r603={1d,3u} r604={1d,1u} r606={1d,4u} r608={1d,1u} r609={2d,8u} r610={4d,6u} r611={1d,2u} r613={1d,4u} r618={1d,3u} r623={1d,12u} r624={1d,12u} r625={1d,2u} r626={1d,1u} r638={1d,2u} r640={1d,2u} r643={1d,6u,1e} r646={1d,2u} r647={1d,17u} r653={1d,2u} r659={1d,1u} r666={1d,4u} r668={1d,15u} r672={2d,4u} r674={1d,8u} r675={1d,9u} r679={1d,2u} r688={1d,4u} r690={1d,2u} r692={1d,4u} r694={1d,2u} r695={4d,8u} r708={2d,4u} r710={1d,2u} r712={3d,3u} r714={4d,8u,2e} r715={15d,32u} r716={7d,2u} r720={1d,1u} r727={1d,2u} r731={1d,2u} r732={1d,2u} r733={2d,5u} r734={1d,5u} r735={1d,2u} r737={1d,2u} r738={2d,4u} r739={1d,3u} r741={1d,2u} r742={2d,8u} r745={2d,11u} r746={1d,14u} r747={3d,7u} r750={4d,13u,3e} r751={3d,11u,3e} r752={1d,3u} r753={1d,2u} r754={1d,2u} r763={1d,2u} r770={2d,2u} r775={2d,10u,2e} r776={2d,3u} r777={2d,6u} r782={1d,1u} r785={2d,6u} r788={2d,7u} r789={2d,9u,2e} r790={2d,8u,2e} r791={2d,4u} r795={1d,1u} r799={1d,3u} r800={1d,1u} r805={2d,1u} r806={5d,6u} r809={2d,4u} r811={1d,8u} r826={4d,8u} r828={3d,1u} r829={5d,1u} r830={1d,2u} r831={3d,2u} r837={1d,3u} r838={1d,2u} r839={1d,1u} r840={1d,1u} r842={1d,1u} r843={1d,1u} r844={1d,2u} r847={1d,1u} r848={1d,1u} r849={1d,1u} r850={1d,1u} r851={1d,1u} r852={1d,2u} r854={1d,1u} r855={1d,1u} r856={1d,1u} r857={1d,1u} r858={1d,1u} r859={1d,1u} r860={1d,1u} r861={1d,1u} r862={1d,1u} r863={1d,1u} r864={1d,1u} r865={1d,2u} r866={1d,1u} r867={1d,1u} r868={1d,1u} r869={1d,1u} r870={1d,1u} r872={1d,1u} r873={1d,1u} r874={1d,2u} r875={1d,1u} r876={1d,1u} r877={1d,1u} r878={1d,1u} r879={1d,1u} r881={1d,2u} r882={1d,1u} r883={1d,1u} r885={1d,1u} r888={1d,1u} r889={1d,1u} r890={1d,1u} r892={1d,1u} r894={1d,1u} r895={1d,1u} r896={1d,1u} r897={1d,1u} r899={1d,2u} r900={1d,1u} r901={1d,1u} r903={1d,1u} r906={1d,1u} r907={1d,1u} r908={1d,1u} r910={1d,1u} r912={1d,1u} r913={1d,1u} r914={1d,1u} r915={1d,1u} r917={1d,1u} r919={1d,1u} r921={1d,1u} r922={1d,1u} r923={1d,1u} r924={1d,1u} r926={1d,1u} r927={1d,1u} r929={1d,1u} r930={1d,1u} r931={1d,1u} r933={1d,1u} r935={1d,1u} r936={1d,1u} r937={1d,1u} r938={1d,1u} r940={1d,1u} r942={1d,1u} r944={1d,1u} r945={1d,1u} r946={1d,1u} r947={1d,1u} r949={1d,1u} r950={1d,1u} r952={1d,1u} r953={1d,1u} r954={1d,1u} r956={1d,1u} r958={1d,1u} r959={1d,1u} r960={1d,1u} r961={1d,1u} r963={1d,1u} r965={1d,1u} r967={1d,1u} r968={1d,1u} r969={1d,1u} r970={1d,1u} r972={1d,1u} r973={1d,1u} r975={1d,1u} r976={1d,1u} r977={1d,1u} r979={1d,1u} r981={1d,1u} r982={1d,1u} r983={1d,1u} r984={1d,1u} r986={1d,1u} r988={1d,1u} r990={1d,1u} r991={1d,1u} r992={1d,1u} r993={1d,1u} r995={1d,1u} r996={1d,1u} r998={1d,1u} r999={1d,1u} r1000={1d,1u} r1002={1d,1u} r1004={1d,1u} r1005={1d,1u} r1006={1d,1u} r1007={1d,1u} r1011={1d,1u} r1013={1d,1u} r1015={1d,2u} r1016={1d,1u} r1017={1d,1u} r1018={1d,4u} r1024={1d,1u} r1025={1d,1u} r1026={1d,1u} r1029={1d,1u,1e} r1030={1d,1u} r1031={1d,1u} r1032={1d,1u} r1033={1d,4u} r1039={1d,1u} r1040={1d,1u} r1041={1d,1u} r1044={1d,1u,1e} r1045={1d,1u} r1046={1d,1u} r1047={1d,1u} r1048={1d,4u} r1054={1d,1u} r1055={1d,1u} r1056={1d,1u} r1059={1d,1u,1e} r1060={1d,1u} r1061={1d,1u} r1062={1d,1u} r1063={1d,4u} r1069={1d,1u} r1070={1d,1u} r1071={1d,1u} r1074={1d,1u,1e} r1075={1d,1u} r1076={1d,1u} r1077={1d,1u} r1078={1d,1u} r1079={1d,1u} r1081={1d,1u} r1082={1d,4u} r1086={1d,1u} r1089={1d,1u} r1092={1d,1u} r1093={1d,3u} r1099={1d,1u} r1100={1d,1u} r1102={1d,1u} r1103={1d,8u} r1105={1d,3u,1e} r1108={1d,2u} r1111={1d,2u} r1115={1d,4u} r1127={1d,1u} r1128={1d,1u,1e} r1129={1d,1u} r1130={1d,1u} r1133={1d,1u,1e} r1135={1d,1u} r1136={1d,1u} r1138={1d,2u} r1139={1d,1u} r1142={1d,1u} r1143={1d,6u} r1145={1d,1u} r1149={1d,4u} r1150={1d,1u} r1151={1d,1u} r1164={1d,1u} r1165={1d,1u} r1170={1d,4u} r1180={1d,1u} r1182={1d,1u} r1183={1d,1u} r1184={1d,1u} r1185={1d,1u} r1186={1d,1u} r1187={1d,1u} r1188={1d,1u} r1189={1d,1u} r1190={1d,1u} r1191={1d,1u} r1192={1d,1u} r1193={1d,1u} r1198={1d,1u} r1199={1d,1u} r1200={1d,1u} r1203={1d,9u} r1205={1d,1u} r1208={1d,1u} r1211={1d,1u} r1213={1d,3u} r1221={1d,1u} r1228={1d,1u} r1232={1d,3u,1e} r1235={1d,1u} r1236={1d,1u} r1237={1d,1u} r1238={1d,1u} r1239={1d,1u} r1242={1d,1u} r1245={1d,1u} r1248={1d,1u,1e} r1249={1d,2u} r1251={1d,2u} r1253={1d,1u,1e} r1256={1d,2u} r1259={1d,2u,1e} r1261={1d,1u} r1262={1d,1u} r1263={1d,1u} r1264={1d,2u,1e} r1266={1d,1u} r1267={1d,1u} r1268={1d,1u} r1269={1d,1u} r1270={1d,1u} r1273={1d,2u} r1274={1d,3u,2e} r1276={1d,2u} r1277={1d,1u} r1278={1d,1u} r1279={1d,1u} r1280={1d,1u} r1282={1d,1u} r1283={1d,1u} r1285={1d,3u,2e} r1287={1d,2u} r1289={1d,1u} r1290={1d,1u} r1291={1d,1u} r1293={1d,1u} r1294={1d,1u} r1296={1d,1u} r1297={1d,1u} r1298={1d,1u} r1299={1d,1u} r1300={1d,1u} r1301={1d,1u} r1302={1d,1u} r1303={1d,3u} r1304={1d,3u,2e} r1305={1d,2u} r1306={1d,4u} r1307={1d,1u} r1308={1d,1u} r1309={1d,1u} r1311={1d,1u} r1312={1d,1u} r1313={1d,2u} r1314={1d,3u,2e} r1316={1d,2u} r1318={1d,1u} r1319={1d,1u} r1320={1d,1u} r1322={1d,1u} r1323={1d,1u} r1325={1d,1u} r1327={1d,3u,2e} r1328={1d,2u} r1330={1d,1u} r1331={1d,1u} r1332={1d,1u} r1334={1d,1u} r1335={1d,1u} r1337={1d,1u} r1339={1d,1u} r1340={1d,1u} r1342={1d,1u} r1343={1d,1u,1e} r1345={1d,1u} r1346={1d,1u} r1348={1d,1u} r1349={1d,1u} r1350={1d,1u} r1351={1d,1u} r1352={1d,1u} r1354={1d,1u} r1355={1d,1u} r1356={1d,1u} r1357={1d,1u} r1358={1d,1u} r1359={1d,1u} r1360={1d,1u} r1361={1d,1u} r1362={1d,1u} r1363={1d,1u} r1365={1d,1u} r1366={1d,1u} r1367={1d,1u} r1368={1d,1u} r1369={1d,1u} r1370={1d,1u} r1371={1d,1u} r1372={1d,1u} r1373={1d,1u} r1374={1d,1u} r1375={1d,1u} r1376={1d,1u} r1377={1d,1u} r1378={1d,1u} r1379={1d,1u} r1380={1d,1u} r1381={1d,1u} r1382={1d,1u} r1383={1d,1u} r1384={1d,1u} r1385={1d,1u} r1386={1d,1u} r1387={1d,1u} r1388={1d,1u} r1389={1d,1u} r1390={1d,1u} r1391={1d,1u} r1392={1d,1u} r1393={1d,1u} r1394={1d,1u} r1395={1d,1u} r1396={1d,1u} r1397={1d,1u} r1398={1d,1u} r1402={1d,1u} r1403={1d,1u} r1404={1d,1u} r1407={1d,1u} r1408={1d,1u} r1411={1d,1u} r1414={1d,1u} r1415={1d,1u} r1418={1d,1u} r1419={1d,1u} r1420={1d,1u} r1423={1d,1u} r1425={1d,3u} r1433={1d,1u} r1434={1d,1u} r1435={1d,1u} r1438={1d,1u} r1439={1d,1u} r1441={1d,1u} r1442={1d,3u} r1446={1d,1u} r1447={1d,2u} r1453={1d,1u} r1455={1d,4u} r1466={1d,4u} r1476={1d,2u,1e} r1480={1d,1u,1e} r1482={1d,1u} r1485={1d,4u} r1495={1d,1u} r1497={1d,2u,1e} r1500={1d,1u,1e} r1502={1d,1u} r1504={1d,2u,1e} r1508={1d,1u,1e} r1510={1d,1u} r1513={1d,4u} r1523={1d,1u} r1525={1d,2u,1e} r1528={1d,1u,1e} r1530={1d,1u} r1532={1d,1u} r1533={1d,1u} r1534={1d,1u} r1536={1d,1u} r1537={1d,1u} r1539={1d,1u} r1540={1d,1u} r1541={1d,1u} r1542={1d,1u} r1543={1d,1u} r1544={1d,1u} r1549={1d,1u} r1550={1d,4u} r1560={1d,1u} r1561={1d,1u} r1564={1d,1u} r1566={1d,1u} r1567={1d,1u} r1569={1d,1u} r1570={1d,4u} r1580={1d,1u} r1582={1d,1u} r1583={1d,4u} r1585={1d,6u} r1605={1d,1u} r1606={1d,1u} r1607={1d,1u} r1609={1d,1u} r1613={1d,1u} r1614={1d,1u} r1615={1d,1u} r1616={1d,10u} r1623={1d,1u} r1624={1d,1u} r1625={1d,1u} r1626={1d,1u} r1627={1d,1u} r1628={1d,1u} r1629={1d,1u} r1630={1d,1u} r1633={1d,1u} r1636={1d,1u} r1638={1d,1u} r1639={1d,3u} r1645={1d,1u} r1646={1d,1u} r1647={1d,1u} r1648={1d,1u} r1649={1d,1u} r1652={1d,1u} r1653={1d,1u} r1654={1d,1u} r1656={1d,1u} r1657={1d,1u} r1660={1d,1u} r1661={1d,1u} r1662={1d,1u} r1663={1d,1u} r1664={1d,1u} r1665={1d,1u} r1668={1d,1u} r1669={1d,1u} r1670={1d,1u} r1671={1d,2u} r1673={1d,1u} r1674={1d,1u} r1675={1d,1u} r1678={1d,1u} r1679={1d,1u} r1680={1d,1u} r1683={1d,1u} r1688={1d,1u} r1694={1d,1u} r1695={1d,1u} r1696={1d,1u} r1697={1d,1u} r1698={1d,2u} r1699={1d,1u} r1700={1d,1u} r1701={1d,1u} r1702={1d,1u} r1703={1d,1u} r1704={1d,1u} r1705={1d,1u} r1706={1d,1u} r1707={1d,1u} r1708={1d,1u} r1709={1d,1u} r1710={2d,3u} r1711={1d,1u} r1716={1d,1u} r1717={1d,1u} r1719={1d,1u} r1720={1d,1u} r1722={1d,1u,1e} r1724={1d,1u} r1725={1d,1u} r1726={1d,1u} r1727={1d,1u} r1728={1d,1u} r1730={1d,1u} r1731={1d,1u} r1732={1d,1u} r1733={1d,1u} r1735={1d,1u} r1736={1d,1u} r1737={1d,1u} r1738={1d,1u} r1739={1d,1u} r1741={1d,1u} r1742={1d,1u} r1743={1d,1u} r1744={1d,1u} r1746={1d,1u} r1747={1d,1u} r1748={1d,1u} r1749={1d,1u} r1750={1d,1u} r1751={1d,1u} r1752={1d,1u} r1754={1d,1u} r1755={1d,1u} r1756={1d,1u} r1757={1d,1u} r1758={1d,1u} r1759={1d,1u} r1760={1d,1u} r1761={1d,1u} r1763={1d,1u} r1764={1d,1u} r1765={1d,1u} r1766={1d,1u} r1767={1d,1u} r1768={1d,1u} r1770={1d,1u} r1771={1d,1u} r1775={1d,1u} r1776={1d,1u} r1777={1d,1u} r1778={1d,1u} r1780={1d,1u} r1781={1d,1u} r1783={1d,1u} r1785={1d,1u} r1786={1d,1u} r1788={1d,1u} r1790={1d,1u} r1791={1d,1u} r1793={1d,1u} r1794={1d,1u} r1796={1d,1u} r1799={1d,1u} r1800={1d,1u} r1801={1d,1u} r1802={1d,1u} r1804={1d,1u} r1805={1d,1u} r1806={1d,1u} r1807={1d,1u} r1808={1d,1u} r1812={1d,1u} r1813={1d,1u} r1814={1d,1u} r1816={1d,1u} r1819={1d,1u} r1820={1d,1u} r1821={1d,1u} r1822={1d,1u} r1824={1d,1u} r1825={1d,1u} r1826={1d,1u} r1828={1d,1u} r1831={1d,1u} r1832={1d,1u} r1833={1d,1u} r1834={1d,1u} r1837={1d,1u} r1839={1d,1u} r1842={1d,1u} r1843={1d,1u} r1844={1d,1u} r1845={1d,1u} r1846={1d,1u} r1848={1d,1u} r1851={1d,1u} r1852={1d,1u} r1853={1d,15u} r1854={13d,31u} r1855={4d,8u} r1856={29d,28u} r1857={1d,1u} r1858={1d,1u} r1859={3d,4u} r1860={3d,4u} r1861={1d,19u} r1862={1d,14u} r1863={1d,7u} r1864={1d,1u} r1867={1d,1u} r1869={1d,1u} r1870={1d,1u} r1871={1d,1u} r1872={1d,2u} r1873={1d,2u} r1874={1d,2u} r1875={1d,3u} r1876={1d,1u} r1877={1d,1u} r1878={1d,1u} r1879={1d,3u} r1880={1d,2u} r1881={1d,8u} r1882={1d,2u} r1883={1d,1u} r1884={1d,1u} r1885={1d,1u} r1886={1d,1u} r1887={1d,1u} r1888={1d,2u} r1892={1d,2u} r1893={1d} r1894={1d} r1895={1d,1u} r1896={1d,1u} r1897={1d,3u} r1898={1d,5u} r1899={1d,1u} r1900={1d,1u} r1901={1d,1u} r1902={1d,1u} r1903={1d,3u} r1904={1d,1u} r1905={1d,3u} r1906={1d,1u} r1907={1d,3u} r1908={1d,1u} r1909={1d,1u} r1910={1d,1u} r1911={1d,1u} 
;;    total ref usage 11651{7840d,3742u,69e} in 2691{2556 regular + 135 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(18){ }d-1(29){ }d-1(30){ }d-1(31){ }d-1(32){ }d-1(33){ }d-1(34){ }d-1(35){ }d-1(36){ }d-1(37){ }d-1(38){ }d-1(39){ }d-1(64){ }d-1(65){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	 1710
;; lr  use 	
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap]
;; live  in  	
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap]
;; live  kill	
;; lr  out 	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; live  out 	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(29){ }u1(31){ }u2(64){ }u3(65){ }}
;; lr  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 66 [cc] 837 838
;; live  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 66 [cc] 837 838
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

( 2 )->[3]->( 74 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 2 )->[4]->( 5 301 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u8(29){ }u9(31){ }u10(64){ }u11(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 293 839 840
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 0 [x0] 66 [cc] 293 839 840
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

( 4 )->[301]->( 6 )
;; bb 301 artificial_defs: { }
;; bb 301 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u21(29){ }u22(31){ }u23(64){ }u24(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 842 843
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 842 843
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

( 301 5 )->[6]->( 55 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u28(29){ }u29(31){ }u30(64){ }u31(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 320 328 360 1013 1864 1908 1909 1910 1911
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 320 328 360 1013 1864 1908 1909 1910 1911
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 55 )->[7]->( 53 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u32(29){ }u33(31){ }u34(64){ }u35(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294
;; lr  def 	 66 [cc] 844
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1909 1911
;; live  gen 	 66 [cc] 844
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1909 1911

( 7 )->[8]->( 53 10 25 32 39 46 12 11 21 13 15 17 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u39(29){ }u40(31){ }u41(64){ }u42(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 844 1911
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1909 1911
;; live  gen 	
;; live  kill	 66 [cc]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[9]->( )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u46(29){ }u47(31){ }u48(64){ }u49(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 847 848 849 850
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 847 848 849 850
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 8 )->[10]->( )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u61(29){ }u62(31){ }u63(64){ }u64(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 851 852 854 855 856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 851 852 854 855 856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 8 )->[11]->( 55 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u83(29){ }u84(31){ }u85(64){ }u86(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 857 858 859
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 857 858 859
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[12]->( 55 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u90(29){ }u91(31){ }u92(64){ }u93(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 860 861 862
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 860 861 862
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[13]->( 14 55 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u97(29){ }u98(31){ }u99(64){ }u100(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 863 864 865 866 867
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 66 [cc] 863 864 865 866 867
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 13 )->[14]->( 55 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u112(29){ }u113(31){ }u114(64){ }u115(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 868 869 870 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 868 869 870 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[15]->( 16 55 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u124(29){ }u125(31){ }u126(64){ }u127(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 872 873 874 875 876
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 66 [cc] 872 873 874 875 876
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 15 )->[16]->( 55 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u139(29){ }u140(31){ }u141(64){ }u142(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 877 878 879 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 877 878 879 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[17]->( 18 302 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u151(29){ }u152(31){ }u153(64){ }u154(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 301 303 881 882 883 885 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 301 303 881 882 883 885 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 881 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 881 1013 1854 1909 1911

( 17 )->[302]->( 19 )
;; bb 302 artificial_defs: { }
;; bb 302 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	

( 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u171(29){ }u172(31){ }u173(64){ }u174(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 881 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 881
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 888 889 890 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 881 1013 1854 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 888 889 890 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

( 302 18 )->[19]->( 20 55 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u187(29){ }u188(31){ }u189(64){ }u190(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 892 894
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 892 894
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 19 )->[20]->( 55 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u196(29){ }u197(31){ }u198(64){ }u199(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 895 896 897 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 895 896 897 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[21]->( 22 303 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u208(29){ }u209(31){ }u210(64){ }u211(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 309 311 899 900 901 903 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 309 311 899 900 901 903 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 899 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 899 1013 1854 1909 1911

( 21 )->[303]->( 23 )
;; bb 303 artificial_defs: { }
;; bb 303 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	

( 21 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u228(29){ }u229(31){ }u230(64){ }u231(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 899 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 899
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 906 907 908 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 899 1013 1854 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 906 907 908 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

( 303 22 )->[23]->( 24 55 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u244(29){ }u245(31){ }u246(64){ }u247(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 910 912
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 910 912
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 23 )->[24]->( 55 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u253(29){ }u254(31){ }u255(64){ }u256(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 913 914 915 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 913 914 915 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[25]->( 26 304 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u265(29){ }u266(31){ }u267(64){ }u268(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 317 319 917 919 921 1854 1855
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 317 319 917 919 921 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1854 1855 1909 1911

( 25 )->[304]->( 27 )
;; bb 304 artificial_defs: { }
;; bb 304 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	

( 25 )->[26]->( 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u284(29){ }u285(31){ }u286(64){ }u287(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 922 923 924 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 922 923 924 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1854 1855 1909 1911

( 304 26 )->[27]->( 28 305 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u296(29){ }u297(31){ }u298(64){ }u299(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317
;; lr  def 	 66 [cc] 926
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1854 1855 1909 1911
;; live  gen 	 66 [cc] 926
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1855 1909 1911

( 27 )->[305]->( 29 )
;; bb 305 artificial_defs: { }
;; bb 305 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	

( 27 )->[28]->( 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u304(29){ }u305(31){ }u306(64){ }u307(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 927 929 930 931 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 927 929 930 931 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

( 305 28 )->[29]->( 30 31 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u319(29){ }u320(31){ }u321(64){ }u322(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 933 935
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 933 935
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 29 )->[30]->( 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u328(29){ }u329(31){ }u330(64){ }u331(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 936 937 938 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 936 937 938 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 30 29 )->[31]->( 55 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u340(29){ }u341(31){ }u342(64){ }u343(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 320 328
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[32]->( 33 306 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u349(29){ }u350(31){ }u351(64){ }u352(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 329 331 940 942 944 1854 1855
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 329 331 940 942 944 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1854 1855 1909 1911

( 32 )->[306]->( 34 )
;; bb 306 artificial_defs: { }
;; bb 306 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	

( 32 )->[33]->( 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u368(29){ }u369(31){ }u370(64){ }u371(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 945 946 947 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 945 946 947 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1854 1855 1909 1911

( 306 33 )->[34]->( 35 307 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u380(29){ }u381(31){ }u382(64){ }u383(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 329
;; lr  def 	 66 [cc] 949
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1854 1855 1909 1911
;; live  gen 	 66 [cc] 949
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1855 1909 1911

( 34 )->[307]->( 36 )
;; bb 307 artificial_defs: { }
;; bb 307 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	

( 34 )->[35]->( 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u388(29){ }u389(31){ }u390(64){ }u391(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 950 952 953 954 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 950 952 953 954 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

( 307 35 )->[36]->( 37 38 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u403(29){ }u404(31){ }u405(64){ }u406(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 956 958
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 956 958
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 36 )->[37]->( 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u412(29){ }u413(31){ }u414(64){ }u415(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 959 960 961 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 959 960 961 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 37 36 )->[38]->( 55 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u424(29){ }u425(31){ }u426(64){ }u427(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 320 328
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[39]->( 40 308 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u433(29){ }u434(31){ }u435(64){ }u436(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 339 341 963 965 967 1854 1855
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 339 341 963 965 967 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1854 1855 1909 1911

( 39 )->[308]->( 41 )
;; bb 308 artificial_defs: { }
;; bb 308 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	

( 39 )->[40]->( 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u452(29){ }u453(31){ }u454(64){ }u455(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 968 969 970 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 968 969 970 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1854 1855 1909 1911

( 308 40 )->[41]->( 42 309 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u464(29){ }u465(31){ }u466(64){ }u467(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 339
;; lr  def 	 66 [cc] 972
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1854 1855 1909 1911
;; live  gen 	 66 [cc] 972
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1855 1909 1911

( 41 )->[309]->( 43 )
;; bb 309 artificial_defs: { }
;; bb 309 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	

( 41 )->[42]->( 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u472(29){ }u473(31){ }u474(64){ }u475(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 973 975 976 977 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 973 975 976 977 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

( 309 42 )->[43]->( 44 45 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u487(29){ }u488(31){ }u489(64){ }u490(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 979 981
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 979 981
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 43 )->[44]->( 45 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u496(29){ }u497(31){ }u498(64){ }u499(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 982 983 984 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 982 983 984 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 44 43 )->[45]->( 55 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u508(29){ }u509(31){ }u510(64){ }u511(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 320 328
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 )->[46]->( 47 310 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u517(29){ }u518(31){ }u519(64){ }u520(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 349 351 986 988 990 1854 1855
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 349 351 986 988 990 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1854 1855 1909 1911

( 46 )->[310]->( 48 )
;; bb 310 artificial_defs: { }
;; bb 310 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	

( 46 )->[47]->( 48 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u536(29){ }u537(31){ }u538(64){ }u539(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 991 992 993 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 991 992 993 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1854 1855 1909 1911

( 310 47 )->[48]->( 49 311 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u548(29){ }u549(31){ }u550(64){ }u551(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 349
;; lr  def 	 66 [cc] 995
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1854 1855 1909 1911
;; live  gen 	 66 [cc] 995
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1855 1909 1911

( 48 )->[311]->( 50 )
;; bb 311 artificial_defs: { }
;; bb 311 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	

( 48 )->[49]->( 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u556(29){ }u557(31){ }u558(64){ }u559(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 996 998 999 1000 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 996 998 999 1000 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

( 311 49 )->[50]->( 51 52 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u571(29){ }u572(31){ }u573(64){ }u574(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 1002 1004
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 1002 1004
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 50 )->[51]->( 52 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u580(29){ }u581(31){ }u582(64){ }u583(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 1005 1006 1007 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 1005 1006 1007 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 51 50 )->[52]->( 55 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u592(29){ }u593(31){ }u594(64){ }u595(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 320 328
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 8 7 )->[53]->( 55 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u601(29){ }u602(31){ }u603(64){ }u604(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1909
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 1011 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 1011 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

( 6 53 11 12 13 14 15 16 19 20 23 24 31 38 45 52 )->[55]->( 7 56 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u617(29){ }u618(31){ }u619(64){ }u620(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1013
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 294
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 294
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1909 1911

( 55 )->[56]->( 57 58 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u636(29){ }u637(31){ }u638(64){ }u639(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 360
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328

( 56 )->[57]->( )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u642(29){ }u643(31){ }u644(64){ }u645(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 56 )->[58]->( 59 71 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u648(29){ }u649(31){ }u650(64){ }u651(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328

( 58 )->[59]->( 65 60 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u654(29){ }u655(31){ }u656(64){ }u657(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 66 [cc] 1015
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; live  gen 	 66 [cc] 1015
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015

( 59 )->[60]->( 65 61 62 63 64 )
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u661(29){ }u662(31){ }u663(64){ }u664(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015
;; lr  def 	 66 [cc] 1016 1017
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015
;; live  gen 	 1016 1017
;; live  kill	 66 [cc]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 60 )->[61]->( 66 )
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u668(29){ }u669(31){ }u670(64){ }u671(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1018 1024 1025 1026 1029 1030 1031 1032 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1018 1024 1025 1026 1029 1030 1031 1032 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 60 )->[62]->( 66 )
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u690(29){ }u691(31){ }u692(64){ }u693(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1033 1039 1040 1041 1044 1045 1046 1047 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1033 1039 1040 1041 1044 1045 1046 1047 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 60 )->[63]->( 66 )
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u712(29){ }u713(31){ }u714(64){ }u715(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1048 1054 1055 1056 1059 1060 1061 1062 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1048 1054 1055 1056 1059 1060 1061 1062 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 60 )->[64]->( 66 )
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u734(29){ }u735(31){ }u736(64){ }u737(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1063 1069 1070 1071 1074 1075 1076 1077 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1063 1069 1070 1071 1074 1075 1076 1077 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 60 59 )->[65]->( )
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u756(29){ }u757(31){ }u758(64){ }u759(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1078 1079 1081
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1078 1079 1081
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 61 62 63 64 )->[66]->( 70 67 )
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u769(29){ }u770(31){ }u771(64){ }u772(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 386 1082
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; live  gen 	 66 [cc] 386 1082
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

( 66 )->[67]->( 70 68 )
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u777(29){ }u778(31){ }u779(64){ }u780(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1086
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1086
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

( 67 )->[68]->( 70 69 )
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u786(29){ }u787(31){ }u788(64){ }u789(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1089
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1089
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

( 68 )->[69]->( 70 74 )
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u795(29){ }u796(31){ }u797(64){ }u798(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1092
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1092
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854

( 67 66 69 68 )->[70]->( )
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u804(29){ }u805(31){ }u806(64){ }u807(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1093 1099 1100 1102
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 1093 1099 1100 1102
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 58 )->[71]->( 73 72 )
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u831(29){ }u832(31){ }u833(64){ }u834(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 71 )->[72]->( 74 )
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1854
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 71 )->[73]->( 74 )
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u837(29){ }u838(31){ }u839(64){ }u840(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 397 400 406 408 410 1103 1105 1108 1111 1115 1127 1128 1129 1130 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 32 [v0] 33 [v1] 397 400 406 408 410 1103 1105 1108 1111 1115 1127 1128 1129 1130 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

( 3 73 69 72 )->[74]->( 75 312 )
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u944(29){ }u945(31){ }u946(64){ }u947(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 243 286 1133 1135 1136 1138 1139 1853
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; live  gen 	 0 [x0] 66 [cc] 243 286 1133 1135 1136 1138 1139 1853
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1853 1854

( 74 )->[312]->( 276 )
;; bb 312 artificial_defs: { }
;; bb 312 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1710 1853 1854
;; live  out 	

( 74 )->[75]->( 276 76 )
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u963(29){ }u964(31){ }u965(64){ }u966(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1138
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 414 416 1142
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1853 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 414 416 1142
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

( 75 )->[76]->( 276 77 )
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u986(29){ }u987(31){ }u988(64){ }u989(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 416
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

( 76 276 )->[77]->( 78 79 )
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u993(29){ }u994(31){ }u995(64){ }u996(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; lr  def 	 66 [cc] 244 245 421 424 425 427 1143 1145 1149 1150 1151 1164 1165 1170 1180 1862
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; live  gen 	 66 [cc] 244 245 421 424 425 427 1143 1145 1149 1150 1151 1164 1165 1170 1180 1862
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1853 1854 1862

( 77 )->[78]->( )
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u1065(29){ }u1066(31){ }u1067(64){ }u1068(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1182 1183 1184 1185 1186 1187
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1182 1183 1184 1185 1186 1187
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 77 )->[79]->( 80 81 )
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u1080(29){ }u1081(31){ }u1082(64){ }u1083(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1853 1854 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1853 1854 1862

( 79 )->[80]->( )
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u1087(29){ }u1088(31){ }u1089(64){ }u1090(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1188 1189 1190 1191 1192 1193
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1188 1189 1190 1191 1192 1193
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 79 )->[81]->( 82 133 )
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u1102(29){ }u1103(31){ }u1104(64){ }u1105(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1143
;; lr  def 	 66 [cc] 246
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1853 1854 1862
;; live  gen 	 66 [cc] 246
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 246 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 246 1143 1853 1854 1862

( 81 )->[82]->( 83 313 )
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u1111(29){ }u1112(31){ }u1113(64){ }u1114(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1198
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 66 [cc] 1198
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862

( 82 )->[313]->( 84 )
;; bb 313 artificial_defs: { }
;; bb 313 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; live  out 	

( 82 )->[83]->( 84 )
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u1120(29){ }u1121(31){ }u1122(64){ }u1123(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1199 1200 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1199 1200 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862

( 313 83 )->[84]->( 85 86 )
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u1132(29){ }u1133(31){ }u1134(64){ }u1135(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1203 1205
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 66 [cc] 1203 1205
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862

( 84 )->[85]->( 131 )
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u1140(29){ }u1141(31){ }u1142(64){ }u1143(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 259 289 1208 1211 1213 1221 1859
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 32 [v0] 33 [v1] 34 [v2] 259 289 1208 1211 1213 1221 1859
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 84 )->[86]->( 129 )
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u1194(29){ }u1195(31){ }u1196(64){ }u1197(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 261 262 290 430 431 432 433 434 435 438 441 444 447 576 1228 1232 1235 1236 1237 1238 1239 1242 1245 1248 1249 1251 1253 1256 1859 1863 1903 1904 1905 1906 1907
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 261 262 290 430 431 432 433 434 435 438 441 444 447 576 1228 1232 1235 1236 1237 1238 1239 1242 1245 1248 1249 1251 1253 1256 1859 1863 1903 1904 1905 1906 1907
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907

( 129 )->[87]->( 90 314 )
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u1313(29){ }u1314(31){ }u1315(64){ }u1316(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 435 438 441 447
;; lr  def 	 66 [cc] 266 460
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 266 460
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1903 1905 1907

( 87 )->[314]->( 88 )
;; bb 314 artificial_defs: { }
;; bb 314 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	

( 314 316 )->[88]->( 95 89 )
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u1332(29){ }u1333(31){ }u1334(64){ }u1335(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 290
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907

( 88 )->[89]->( 122 )
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u1340(29){ }u1341(31){ }u1342(64){ }u1343(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 443 747
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 443 747
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1853 1854 1859 1862 1863 1903 1905 1907

( 87 )->[90]->( 91 )
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u1348(29){ }u1349(31){ }u1350(64){ }u1351(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1901 1902
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 1901 1902
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907

( 90 93 )->[91]->( 92 315 )
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 266
;; lr  def 	 66 [cc] 457
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  gen 	 66 [cc] 457
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907

( 91 )->[315]->( 93 )
;; bb 315 artificial_defs: { }
;; bb 315 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	

( 91 )->[92]->( 93 )
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u1357(29){ }u1358(31){ }u1359(64){ }u1360(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 457 460 1863 1902
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1259 1261 1262 1263 1264 1266 1267 1268 1269 1270
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1259 1261 1262 1263 1264 1266 1267 1268 1269 1270
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907

( 315 92 )->[93]->( 91 316 )
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u1401(29){ }u1402(31){ }u1403(64){ }u1404(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 266 460
;; lr  def 	 66 [cc] 266 460
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  gen 	 66 [cc] 266 460
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907

( 93 )->[316]->( 88 )
;; bb 316 artificial_defs: { }
;; bb 316 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	

( 88 )->[95]->( 97 96 )
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u1412(29){ }u1413(31){ }u1414(64){ }u1415(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 66 [cc] 750 1273
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 750 1273
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1853 1854 1859 1862 1863 1903 1905 1907

( 95 )->[96]->( 102 103 )
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u1425(29){ }u1426(31){ }u1427(64){ }u1428(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 750 1273 1903
;; lr  def 	 66 [cc] 468 751 1274 1276 1277 1278 1279 1280 1282 1283
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 468 751 1274 1276 1277 1278 1279 1280 1282 1283
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1853 1854 1859 1862 1863 1903 1905 1907

( 156 95 320 )->[97]->( )
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u1457(29){ }u1458(31){ }u1459(64){ }u1460(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 299 )->[98]->( 100 104 )
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u1462(29){ }u1463(31){ }u1464(64){ }u1465(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 750 751 1306 1892 1903
;; lr  def 	 66 [cc] 468 1285 1287 1289 1290 1291 1293 1294
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 468 1285 1287 1289 1290 1291 1293 1294
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 98 )->[100]->( 102 )
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u1495(29){ }u1496(31){ }u1497(64){ }u1498(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 107 )->[101]->( 102 )
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u1509(29){ }u1510(31){ }u1511(64){ }u1512(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 161 96 101 159 100 321 )->[102]->( )
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u1523(29){ }u1524(31){ }u1525(64){ }u1526(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1296 1297 1298 1299 1300 1301
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1296 1297 1298 1299 1300 1301
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 96 )->[103]->( 104 )
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u1538(29){ }u1539(31){ }u1540(64){ }u1541(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 290
;; lr  def 	 442 443 695 714 747 826 1303 1306 1313 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 442 443 695 714 747 826 1303 1306 1313 1892 1893 1894 1895 1896 1897 1898 1899 1900
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 103 98 )->[104]->( 105 110 )
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u1546(29){ }u1547(31){ }u1548(64){ }u1549(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 468 751 1303 1306 1313
;; lr  def 	 66 [cc] 469 1302 1304 1305 1307 1308 1309 1311 1312
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 469 1302 1304 1305 1307 1308 1309 1311 1312
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 104 )->[105]->( 107 )
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u1584(29){ }u1585(31){ }u1586(64){ }u1587(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 108 )->[106]->( 107 )
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u1588(29){ }u1589(31){ }u1590(64){ }u1591(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 476 695 750
;; lr  def 	 469 695 750 826
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 469 695 750 826
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 106 105 )->[107]->( 101 108 )
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u1596(29){ }u1597(31){ }u1598(64){ }u1599(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 714 1306 1892 1903
;; lr  def 	 66 [cc] 473 1314 1316 1318 1319 1320 1322 1323
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 473 1314 1316 1318 1319 1320 1322 1323
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 107 )->[108]->( 106 109 )
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u1628(29){ }u1629(31){ }u1630(64){ }u1631(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 473 714 826 1303 1306 1313
;; lr  def 	 66 [cc] 476 714 1325 1327 1328 1330 1331 1332 1334 1335
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 476 714 1325 1327 1328 1330 1331 1332 1334 1335
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 108 )->[109]->( 111 )
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u1660(29){ }u1661(31){ }u1662(64){ }u1663(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 476 695 750 826
;; lr  def 	 463 695 714 750 751 826
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 463 695 714 750 751 826
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 104 )->[110]->( 111 )
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u1670(29){ }u1671(31){ }u1672(64){ }u1673(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  def 	 463 695 714 750 751 826
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 463 695 714 750 751 826
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 110 109 )->[111]->( 283 112 )
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u1680(29){ }u1681(31){ }u1682(64){ }u1683(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 463 1895 1896
;; lr  def 	 66 [cc] 464 1337 1339 1340
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 464 1337 1339 1340
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 111 )->[112]->( 115 113 )
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u1697(29){ }u1698(31){ }u1699(64){ }u1700(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 464
;; lr  def 	 66 [cc] 1342
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 1342
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 112 )->[113]->( 114 284 )
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u1705(29){ }u1706(31){ }u1707(64){ }u1708(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 464 1899
;; lr  def 	 66 [cc] 1343
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 1343
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 113 )->[114]->( 285 )
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u1714(29){ }u1715(31){ }u1716(64){ }u1717(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1898
;; lr  def 	 828 829
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 828 829
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 112 )->[115]->( 116 118 )
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u1718(29){ }u1719(31){ }u1720(64){ }u1721(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 115 )->[116]->( 117 )
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u1725(29){ }u1726(31){ }u1727(64){ }u1728(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 286 116 )->[117]->( )
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u1739(29){ }u1740(31){ }u1741(64){ }u1742(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1345 1346 1348 1349 1350 1351 1352
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1345 1346 1348 1349 1350 1351 1352
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 115 )->[118]->( 119 120 )
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u1755(29){ }u1756(31){ }u1757(64){ }u1758(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 118 )->[119]->( 299 )
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u1762(29){ }u1763(31){ }u1764(64){ }u1765(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 1897 1898
;; lr  def 	 442 829 831
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 442 829 831
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 118 )->[120]->( 299 )
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u1768(29){ }u1769(31){ }u1770(64){ }u1771(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 1898
;; lr  def 	 442 829 831
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 442 829 831
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 299 )->[121]->( 122 )
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u1774(29){ }u1775(31){ }u1776(64){ }u1777(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 695 714 747 750 751 826 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 695 714 747 750 751 826 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1853 1854 1859 1862 1863 1903 1905 1907

( 121 89 )->[122]->( 123 124 )
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u1788(29){ }u1789(31){ }u1790(64){ }u1791(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 432 434 747 1905
;; lr  def 	 66 [cc] 519 520 523 525 527 528 530 532 533 535 537 539 540 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 519 520 523 525 527 528 530 532 533 535 537 539 540 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1853 1854 1859 1862 1863 1903 1905 1907

( 122 126 )->[123]->( )
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u1838(29){ }u1839(31){ }u1840(64){ }u1841(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 122 )->[124]->( 125 126 )
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u1843(29){ }u1844(31){ }u1845(64){ }u1846(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 539 540 1907
;; lr  def 	 66 [cc] 544 546 548 549 551 553 554 556 558 560 1365 1366 1367 1368 1369 1370 1371 1372 1373
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 544 546 548 549 551 553 554 556 558 560 1365 1366 1367 1368 1369 1370 1371 1372 1373
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1853 1854 1859 1862 1863 1903 1905 1907

( 124 127 )->[125]->( )
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u1884(29){ }u1885(31){ }u1886(64){ }u1887(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1374 1375 1376 1377 1378 1379
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1374 1375 1376 1377 1378 1379
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 124 )->[126]->( 123 127 )
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u1899(29){ }u1900(31){ }u1901(64){ }u1902(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 443 519 539 1905
;; lr  def 	 66 [cc] 478 480 482 484 485 487 489 490 492 494 496 1380 1381 1382 1383 1384 1385 1386 1387 1388
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 478 480 482 484 485 487 489 490 492 494 496 1380 1381 1382 1383 1384 1385 1386 1387 1388
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1853 1854 1859 1862 1863 1903 1905 1907

( 126 )->[127]->( 125 128 )
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u1944(29){ }u1945(31){ }u1946(64){ }u1947(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 496 539 1907
;; lr  def 	 66 [cc] 499 501 503 504 506 508 509 511 513 515 1389 1390 1391 1392 1393 1394 1395 1396 1397
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 499 501 503 504 506 508 509 511 513 515 1389 1390 1391 1392 1393 1394 1395 1396 1397
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1853 1854 1859 1862 1863 1903 1905 1907

( 127 )->[128]->( 129 )
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u1983(29){ }u1984(31){ }u1985(64){ }u1986(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 435 515 560 576
;; lr  def 	 435 576
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 435 576
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907

( 86 128 )->[129]->( 87 130 )
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u1995(29){ }u1996(31){ }u1997(64){ }u1998(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 435
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907

( 129 )->[130]->( 131 )
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u2003(29){ }u2004(31){ }u2005(64){ }u2006(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 263 1398
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 32 [v0] 263 1398
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 85 130 )->[131]->( 132 317 )
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u2012(29){ }u2013(31){ }u2014(64){ }u2015(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1402
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 1402
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 131 )->[317]->( 140 )
;; bb 317 artificial_defs: { }
;; bb 317 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	

( 131 )->[132]->( 138 )
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u2020(29){ }u2021(31){ }u2022(64){ }u2023(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1403 1404 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1403 1404 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 81 )->[133]->( 134 135 )
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u2032(29){ }u2033(31){ }u2034(64){ }u2035(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 283
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246 1143 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 66 [cc] 283
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1710 1853 1854 1862
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1853 1854 1862

( 133 )->[134]->( 300 )
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u2044(29){ }u2045(31){ }u2046(64){ }u2047(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1407 1408
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 240 1407 1408
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

( 133 )->[135]->( 136 137 )
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u2052(29){ }u2053(31){ }u2054(64){ }u2055(65){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1710 1853 1854 1862
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1143
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 269 285 1411
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 269 285 1411
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1853 1854 1862

( 135 )->[136]->( 300 )
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u2076(29){ }u2077(31){ }u2078(64){ }u2079(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1414 1415
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 240 1414 1415
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

( 135 )->[137]->( 138 )
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u2084(29){ }u2085(31){ }u2086(64){ }u2087(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1859
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1853 1854 1862
;; live  gen 	 0 [x0] 1859
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 137 132 )->[138]->( 139 318 )
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u2091(29){ }u2092(31){ }u2093(64){ }u2094(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1418
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 1418
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 138 )->[318]->( 140 )
;; bb 318 artificial_defs: { }
;; bb 318 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	

( 138 )->[139]->( 140 )
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u2099(29){ }u2100(31){ }u2101(64){ }u2102(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1419 1420 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1419 1420 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 139 317 318 )->[140]->( 141 319 )
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u2111(29){ }u2112(31){ }u2113(64){ }u2114(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1859
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 566 567 1423 1425 1433
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 566 567 1423 1425 1433
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862

( 140 )->[319]->( 142 )
;; bb 319 artificial_defs: { }
;; bb 319 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; live  out 	

( 140 )->[141]->( 142 )
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u2141(29){ }u2142(31){ }u2143(64){ }u2144(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1434 1435 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1434 1435 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862

( 319 141 )->[142]->( 143 144 )
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u2153(29){ }u2154(31){ }u2155(64){ }u2156(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

( 142 )->[143]->( )
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u2159(29){ }u2160(31){ }u2161(64){ }u2162(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1438 1439 1441
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1438 1439 1441
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 142 )->[144]->( 145 178 )
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u2173(29){ }u2174(31){ }u2175(64){ }u2176(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 571 1442
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 571 1442
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1853 1854 1859 1862

( 144 )->[145]->( 147 )
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u2181(29){ }u2182(31){ }u2183(64){ }u2184(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 291 572 575 1446
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1853 1854 1859 1862
;; live  gen 	 0 [x0] 291 572 575 1446
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862

( 147 )->[146]->( 147 )
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u2195(29){ }u2196(31){ }u2197(64){ }u2198(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 575
;; lr  def 	 575
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862
;; live  gen 	 575
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862

( 145 146 )->[147]->( 146 148 )
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u2203(29){ }u2204(31){ }u2205(64){ }u2206(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 575
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862

( 147 )->[148]->( 152 )
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u2211(29){ }u2212(31){ }u2213(64){ }u2214(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 578 590 592 1447 1888
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1853 1854 1859 1862
;; live  gen 	 578 590 592 1447 1888
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888

( 152 )->[149]->( 150 151 )
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u2220(29){ }u2221(31){ }u2222(64){ }u2223(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 592
;; lr  def 	 66 [cc] 582 583
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888
;; live  gen 	 66 [cc] 582 583
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1853 1854 1859 1862 1888

( 149 )->[150]->( 151 )
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u2231(29){ }u2232(31){ }u2233(64){ }u2234(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 582 583 1888
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1853 1854 1859 1862 1888
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888

( 149 150 )->[151]->( 152 )
;; bb 151 artificial_defs: { }
;; bb 151 artificial_uses: { u2242(29){ }u2243(31){ }u2244(64){ }u2245(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 578 592
;; lr  def 	 578 592
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888
;; live  gen 	 578 592
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888

( 148 151 )->[152]->( 149 153 )
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u2249(29){ }u2250(31){ }u2251(64){ }u2252(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 578 590
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888

( 152 )->[153]->( 166 )
;; bb 153 artificial_defs: { }
;; bb 153 artificial_uses: { u2257(29){ }u2258(31){ }u2259(64){ }u2260(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1862
;; lr  def 	 287 596 600 775 785 788 789 790 791 1453 1455 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1853 1854 1859 1862
;; live  gen 	 287 596 600 775 785 788 789 790 791 1453 1455 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 167 )->[154]->( 155 157 )
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u2277(29){ }u2278(31){ }u2279(64){ }u2280(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 775 1879
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 154 )->[155]->( 320 156 )
;; bb 155 artificial_defs: { }
;; bb 155 artificial_uses: { u2286(29){ }u2287(31){ }u2288(64){ }u2289(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862

( 155 )->[320]->( 97 )
;; bb 320 artificial_defs: { }
;; bb 320 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	

( 155 )->[156]->( 97 )
;; bb 156 artificial_defs: { }
;; bb 156 artificial_uses: { u2292(29){ }u2293(31){ }u2294(64){ }u2295(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1466
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  gen 	 1466
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 154 )->[157]->( 158 160 )
;; bb 157 artificial_defs: { }
;; bb 157 artificial_uses: { u2315(29){ }u2316(31){ }u2317(64){ }u2318(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 775 790 1879 1880 1881
;; lr  def 	 66 [cc] 640 1476 1480 1482
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc] 640 1476 1480 1482
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 157 )->[158]->( 321 159 )
;; bb 158 artificial_defs: { }
;; bb 158 artificial_uses: { u2335(29){ }u2336(31){ }u2337(64){ }u2338(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862

( 158 )->[321]->( 102 )
;; bb 321 artificial_defs: { }
;; bb 321 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	

( 158 )->[159]->( 102 )
;; bb 159 artificial_defs: { }
;; bb 159 artificial_uses: { u2341(29){ }u2342(31){ }u2343(64){ }u2344(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1485
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  gen 	 1485
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 157 )->[160]->( 161 162 )
;; bb 160 artificial_defs: { }
;; bb 160 artificial_uses: { u2364(29){ }u2365(31){ }u2366(64){ }u2367(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 640 789 790 1879 1880 1881 1882
;; lr  def 	 66 [cc] 638 643 1495 1497 1500 1502 1504 1508 1510
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc] 638 643 1495 1497 1500 1502 1504 1508 1510
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 160 )->[161]->( 102 )
;; bb 161 artificial_defs: { }
;; bb 161 artificial_uses: { u2400(29){ }u2401(31){ }u2402(64){ }u2403(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; lr  def 	 1513
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; live  gen 	 1513
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 160 )->[162]->( 322 163 )
;; bb 162 artificial_defs: { }
;; bb 162 artificial_uses: { u2423(29){ }u2424(31){ }u2425(64){ }u2426(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 638 788 789 1881 1882
;; lr  def 	 66 [cc] 646 1523 1525 1528 1530 1532
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc] 646 1523 1525 1528 1530 1532
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 162 )->[322]->( 165 )
;; bb 322 artificial_defs: { }
;; bb 322 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	

( 162 )->[163]->( 165 164 )
;; bb 163 artificial_defs: { }
;; bb 163 artificial_uses: { u2444(29){ }u2445(31){ }u2446(64){ }u2447(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 596 600 643 646 788 1883 1884
;; lr  def 	 66 [cc] 1533 1534 1536 1537 1539 1540 1541 1542 1543 1544
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc] 1533 1534 1536 1537 1539 1540 1541 1542 1543 1544
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 163 )->[164]->( 165 )
;; bb 164 artificial_defs: { }
;; bb 164 artificial_uses: { u2467(29){ }u2468(31){ }u2469(64){ }u2470(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 788 1886
;; lr  def 	 596 599 1549
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 596 599 1549
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 322 164 163 )->[165]->( 166 )
;; bb 165 artificial_defs: { }
;; bb 165 artificial_uses: { u2481(29){ }u2482(31){ }u2483(64){ }u2484(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 646 775 785 788 1887
;; lr  def 	 287 775 785 788 789 790 791
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 287 775 785 788 789 790 791
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 153 165 )->[166]->( 167 173 )
;; bb 166 artificial_defs: { }
;; bb 166 artificial_uses: { u2491(29){ }u2492(31){ }u2493(64){ }u2494(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 600
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 166 )->[167]->( 154 168 )
;; bb 167 artificial_defs: { }
;; bb 167 artificial_uses: { u2501(29){ }u2502(31){ }u2503(64){ }u2504(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 788
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

( 167 )->[168]->( 323 169 )
;; bb 168 artificial_defs: { }
;; bb 168 artificial_uses: { u2508(29){ }u2509(31){ }u2510(64){ }u2511(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 791 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 791 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1853 1854 1859 1862

( 168 )->[323]->( 170 )
;; bb 323 artificial_defs: { }
;; bb 323 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; live  out 	

( 168 )->[169]->( 170 )
;; bb 169 artificial_defs: { }
;; bb 169 artificial_uses: { u2514(29){ }u2515(31){ }u2516(64){ }u2517(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1550
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1853 1854 1859 1862
;; live  gen 	 1550
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859

( 323 169 )->[170]->( 171 172 )
;; bb 170 artificial_defs: { }
;; bb 170 artificial_uses: { u2537(29){ }u2538(31){ }u2539(64){ }u2540(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859

( 170 )->[171]->( 175 )
;; bb 171 artificial_defs: { }
;; bb 171 artificial_uses: { u2543(29){ }u2544(31){ }u2545(64){ }u2546(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 600 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1560 1561 1564 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 1560 1561 1564 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859

( 170 )->[172]->( )
;; bb 172 artificial_defs: { }
;; bb 172 artificial_uses: { u2562(29){ }u2563(31){ }u2564(64){ }u2565(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1566 1567 1569
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1566 1567 1569
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 166 )->[173]->( 324 174 )
;; bb 173 artificial_defs: { }
;; bb 173 artificial_uses: { u2576(29){ }u2577(31){ }u2578(64){ }u2579(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 791 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 791 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1853 1854 1859 1862

( 173 )->[324]->( 175 )
;; bb 324 artificial_defs: { }
;; bb 324 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; live  out 	

( 173 )->[174]->( 175 )
;; bb 174 artificial_defs: { }
;; bb 174 artificial_uses: { u2582(29){ }u2583(31){ }u2584(64){ }u2585(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1570
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1853 1854 1859 1862
;; live  gen 	 1570
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859

( 171 174 324 )->[175]->( 176 )
;; bb 175 artificial_defs: { }
;; bb 175 artificial_uses: { u2605(29){ }u2606(31){ }u2607(64){ }u2608(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859

( 182 175 )->[176]->( 183 177 )
;; bb 176 artificial_defs: { }
;; bb 176 artificial_uses: { u2613(29){ }u2614(31){ }u2615(64){ }u2616(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 777 1580 1582
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859
;; live  gen 	 66 [cc] 777 1580 1582
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1853 1854 1859

( 176 274 )->[177]->( 300 )
;; bb 177 artificial_defs: { }
;; bb 177 artificial_uses: { u2621(29){ }u2622(31){ }u2623(64){ }u2624(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1583 1585
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 240 1583 1585
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

( 144 )->[178]->( 179 180 )
;; bb 178 artificial_defs: { }
;; bb 178 artificial_uses: { u2670(29){ }u2671(31){ }u2672(64){ }u2673(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 603
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 66 [cc] 603
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1710 1853 1854 1859
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1853 1854 1859

( 178 )->[179]->( )
;; bb 179 artificial_defs: { }
;; bb 179 artificial_uses: { u2682(29){ }u2683(31){ }u2684(64){ }u2685(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1605 1606
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1605 1606
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 178 )->[180]->( 181 182 )
;; bb 180 artificial_defs: { }
;; bb 180 artificial_uses: { u2692(29){ }u2693(31){ }u2694(64){ }u2695(65){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1710 1853 1854 1859
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 604 606 608 1607 1609 1613
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 66 [cc] 604 606 608 1607 1609 1613
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1853 1854 1859

( 180 )->[181]->( )
;; bb 181 artificial_defs: { }
;; bb 181 artificial_uses: { u2718(29){ }u2719(31){ }u2720(64){ }u2721(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1614 1615
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1614 1615
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 180 )->[182]->( 176 )
;; bb 182 artificial_defs: { }
;; bb 182 artificial_uses: { u2728(29){ }u2729(31){ }u2730(64){ }u2731(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1853 1854 1859
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859

( 176 )->[183]->( 184 )
;; bb 183 artificial_defs: { }
;; bb 183 artificial_uses: { u2739(29){ }u2740(31){ }u2741(64){ }u2742(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 1616 1875 1876 1877 1878
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1853 1854 1859
;; live  gen 	 1616 1875 1876 1877 1878
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1853 1854 1859 1875 1877 1878

( 183 274 )->[184]->( 185 186 )
;; bb 184 artificial_defs: { }
;; bb 184 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 611 613 647 752
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 66 [cc] 611 613 647 752
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 613 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 613 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878

( 184 )->[185]->( )
;; bb 185 artificial_defs: { }
;; bb 185 artificial_uses: { u2758(29){ }u2759(31){ }u2760(64){ }u2761(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 184 )->[186]->( 187 188 )
;; bb 186 artificial_defs: { }
;; bb 186 artificial_uses: { u2765(29){ }u2766(31){ }u2767(64){ }u2768(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 777 1875
;; lr  def 	 66 [cc] 811 1623
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 811 1623
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 186 )->[187]->( )
;; bb 187 artificial_defs: { }
;; bb 187 artificial_uses: { u2778(29){ }u2779(31){ }u2780(64){ }u2781(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1624 1625 1626 1627 1628 1629 1630
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1624 1625 1626 1627 1628 1629 1630
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 186 )->[188]->( 189 325 )
;; bb 188 artificial_defs: { }
;; bb 188 artificial_uses: { u2794(29){ }u2795(31){ }u2796(64){ }u2797(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616
;; lr  def 	 66 [cc] 1633
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 1633
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 188 )->[325]->( 190 )
;; bb 325 artificial_defs: { }
;; bb 325 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	

( 188 )->[189]->( 190 )
;; bb 189 artificial_defs: { }
;; bb 189 artificial_uses: { u2803(29){ }u2804(31){ }u2805(64){ }u2806(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1877
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1636 1638 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1636 1638 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 189 325 )->[190]->( 191 288 )
;; bb 190 artificial_defs: { }
;; bb 190 artificial_uses: { u2818(29){ }u2819(31){ }u2820(64){ }u2821(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 811 1616 1859 1875 1878
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 618 653 659 1639 1645 1646 1647 1648 1649 1652 1653 1654 1656 1657 1660 1661 1662 1663 1664 1665 1668
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 618 653 659 1639 1645 1646 1647 1648 1649 1652 1653 1654 1656 1657 1660 1661 1662 1663 1664 1665 1668
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 190 )->[191]->( 192 193 )
;; bb 191 artificial_defs: { }
;; bb 191 artificial_uses: { u2879(29){ }u2880(31){ }u2881(64){ }u2882(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1669 1670 1671 1673 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 1669 1670 1671 1673 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878

( 191 288 )->[192]->( )
;; bb 192 artificial_defs: { }
;; bb 192 artificial_uses: { u2894(29){ }u2895(31){ }u2896(64){ }u2897(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1674 1675
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1674 1675
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 191 )->[193]->( 194 326 )
;; bb 193 artificial_defs: { }
;; bb 193 artificial_uses: { u2903(29){ }u2904(31){ }u2905(64){ }u2906(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616
;; lr  def 	 66 [cc] 1678
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 1678
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878

( 193 )->[326]->( 195 )
;; bb 326 artificial_defs: { }
;; bb 326 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	

( 193 )->[194]->( 195 )
;; bb 194 artificial_defs: { }
;; bb 194 artificial_uses: { u2912(29){ }u2913(31){ }u2914(64){ }u2915(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1671
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1679 1680 1683
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1679 1680 1683
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 326 194 332 )->[195]->( 297 196 )
;; bb 195 artificial_defs: { }
;; bb 195 artificial_uses: { u2928(29){ }u2929(31){ }u2930(64){ }u2931(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1875
;; lr  def 	 66 [cc] 623 624 1861
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 623 624 1861
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 195 )->[196]->( 297 197 )
;; bb 196 artificial_defs: { }
;; bb 196 artificial_uses: { u2946(29){ }u2947(31){ }u2948(64){ }u2949(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647
;; lr  def 	 66 [cc] 1688
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1688
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 196 )->[197]->( 198 199 )
;; bb 197 artificial_defs: { }
;; bb 197 artificial_uses: { u2955(29){ }u2956(31){ }u2957(64){ }u2958(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616 1861
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 625 626 666 746
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 0 [x0] 66 [cc] 625 626 666 746
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 666 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 666 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 197 )->[198]->( )
;; bb 198 artificial_defs: { }
;; bb 198 artificial_uses: { u2977(29){ }u2978(31){ }u2979(64){ }u2980(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 197 )->[199]->( 200 241 )
;; bb 199 artificial_defs: { }
;; bb 199 artificial_uses: { u2984(29){ }u2985(31){ }u2986(64){ }u2987(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746 1861
;; lr  def 	 66 [cc] 668 1694
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 668 1694
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 199 )->[200]->( 201 207 )
;; bb 200 artificial_defs: { }
;; bb 200 artificial_uses: { u2998(29){ }u2999(31){ }u3000(64){ }u3001(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 1861
;; lr  def 	 66 [cc] 672 742 1695 1696 1697 1698
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 672 742 1695 1696 1697 1698
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 200 )->[201]->( 202 204 )
;; bb 201 artificial_defs: { }
;; bb 201 artificial_uses: { u3027(29){ }u3028(31){ }u3029(64){ }u3030(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 742
;; lr  def 	 66 [cc] 1699 1700 1701
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1699 1700 1701
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 201 )->[202]->( 203 205 )
;; bb 202 artificial_defs: { }
;; bb 202 artificial_uses: { u3039(29){ }u3040(31){ }u3041(64){ }u3042(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 742
;; lr  def 	 66 [cc] 1702 1703 1704
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1702 1703 1704
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 202 )->[203]->( 206 )
;; bb 203 artificial_defs: { }
;; bb 203 artificial_uses: { u3051(29){ }u3052(31){ }u3053(64){ }u3054(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668
;; lr  def 	 66 [cc] 806 1705 1706 1707
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 806 1705 1706 1707
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 201 )->[204]->( 206 )
;; bb 204 artificial_defs: { }
;; bb 204 artificial_uses: { u3062(29){ }u3063(31){ }u3064(64){ }u3065(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 202 )->[205]->( 206 )
;; bb 205 artificial_defs: { }
;; bb 205 artificial_uses: { u3067(29){ }u3068(31){ }u3069(64){ }u3070(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 205 203 204 )->[206]->( 208 214 )
;; bb 206 artificial_defs: { }
;; bb 206 artificial_uses: { u3071(29){ }u3072(31){ }u3073(64){ }u3074(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 742 1861
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 200 )->[207]->( 208 )
;; bb 207 artificial_defs: { }
;; bb 207 artificial_uses: { u3078(29){ }u3079(31){ }u3080(64){ }u3081(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 207 206 )->[208]->( 209 213 )
;; bb 208 artificial_defs: { }
;; bb 208 artificial_uses: { u3082(29){ }u3083(31){ }u3084(64){ }u3085(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 742 1861
;; lr  def 	 66 [cc] 753 754 799 1708 1709
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 753 754 799 1708 1709
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 208 )->[209]->( 210 )
;; bb 209 artificial_defs: { }
;; bb 209 artificial_uses: { u3095(29){ }u3096(31){ }u3097(64){ }u3098(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 742 746 806 1710 1861
;; lr  def 	 770 776 782 800 1710 1711 1716 1717 1857 1858
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 770 776 782 800 1710 1711 1716 1717 1857 1858
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878

( 209 210 )->[210]->( 210 212 )
;; bb 210 artificial_defs: { }
;; bb 210 artificial_uses: { u3115(29){ }u3116(31){ }u3117(64){ }u3118(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 753 770 776 782 800 1857 1858
;; lr  def 	 66 [cc] 770 776 795 1719 1720 1722 1724
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 770 776 795 1719 1720 1722 1724
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878

( 210 )->[212]->( 213 214 )
;; bb 212 artificial_defs: { }
;; bb 212 artificial_uses: { u3137(29){ }u3138(31){ }u3139(64){ }u3140(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 754 799 806
;; lr  def 	 66 [cc] 806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 212 208 )->[213]->( 214 )
;; bb 213 artificial_defs: { }
;; bb 213 artificial_uses: { u3148(29){ }u3149(31){ }u3150(64){ }u3151(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 806
;; lr  def 	 66 [cc] 1725 1726 1727
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1725 1726 1727
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 213 206 212 )->[214]->( 215 )
;; bb 214 artificial_defs: { }
;; bb 214 artificial_uses: { u3160(29){ }u3161(31){ }u3162(64){ }u3163(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715 745
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 715 745
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 214 239 )->[215]->( 239 216 )
;; bb 215 artificial_defs: { }
;; bb 215 artificial_uses: { u3165(29){ }u3166(31){ }u3167(64){ }u3168(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672
;; lr  def 	 66 [cc] 1728
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1728
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 215 )->[216]->( 217 239 )
;; bb 216 artificial_defs: { }
;; bb 216 artificial_uses: { u3175(29){ }u3176(31){ }u3177(64){ }u3178(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 216 )->[217]->( 218 327 )
;; bb 217 artificial_defs: { }
;; bb 217 artificial_uses: { u3182(29){ }u3183(31){ }u3184(64){ }u3185(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647 745
;; lr  def 	 66 [cc] 809 1730 1731
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 809 1730 1731
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 217 )->[327]->( 239 )
;; bb 327 artificial_defs: { }
;; bb 327 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	

( 217 )->[218]->( 220 )
;; bb 218 artificial_defs: { }
;; bb 218 artificial_uses: { u3197(29){ }u3198(31){ }u3199(64){ }u3200(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 745 809
;; lr  def 	 456 581 609
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 456 581 609
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 223 )->[219]->( 220 )
;; bb 219 artificial_defs: { }
;; bb 219 artificial_uses: { u3204(29){ }u3205(31){ }u3206(64){ }u3207(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 647 727
;; lr  def 	 456 581
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 456 581
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 218 219 )->[220]->( 221 222 )
;; bb 220 artificial_defs: { }
;; bb 220 artificial_uses: { u3211(29){ }u3212(31){ }u3213(64){ }u3214(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 220 )->[221]->( )
;; bb 221 artificial_defs: { }
;; bb 221 artificial_uses: { u3220(29){ }u3221(31){ }u3222(64){ }u3223(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1732 1733 1735 1736 1737 1738 1739
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1732 1733 1735 1736 1737 1738 1739
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 220 )->[222]->( 223 277 )
;; bb 222 artificial_defs: { }
;; bb 222 artificial_uses: { u3236(29){ }u3237(31){ }u3238(64){ }u3239(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609
;; lr  def 	 66 [cc] 609
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 609
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 222 )->[223]->( 219 224 )
;; bb 223 artificial_defs: { }
;; bb 223 artificial_uses: { u3244(29){ }u3245(31){ }u3246(64){ }u3247(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 668 1861
;; lr  def 	 66 [cc] 727 731 1741 1742
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 727 731 1741 1742
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 223 )->[224]->( 225 278 )
;; bb 224 artificial_defs: { }
;; bb 224 artificial_uses: { u3261(29){ }u3262(31){ }u3263(64){ }u3264(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 1861
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 224 )->[225]->( 227 226 )
;; bb 225 artificial_defs: { }
;; bb 225 artificial_uses: { u3270(29){ }u3271(31){ }u3272(64){ }u3273(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 731
;; lr  def 	 66 [cc] 733
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 733
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 225 )->[226]->( 230 )
;; bb 226 artificial_defs: { }
;; bb 226 artificial_uses: { u3280(29){ }u3281(31){ }u3282(64){ }u3283(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672 809
;; lr  def 	 461 805
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 461 805
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 225 328 )->[227]->( )
;; bb 227 artificial_defs: { }
;; bb 227 artificial_uses: { u3286(29){ }u3287(31){ }u3288(64){ }u3289(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1743 1744 1746 1747 1748 1749 1750
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1743 1744 1746 1747 1748 1749 1750
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 230 )->[228]->( 328 229 )
;; bb 228 artificial_defs: { }
;; bb 228 artificial_uses: { u3302(29){ }u3303(31){ }u3304(64){ }u3305(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 734
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 228 )->[328]->( 227 )
;; bb 328 artificial_defs: { }
;; bb 328 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	

( 228 )->[229]->( 230 )
;; bb 229 artificial_defs: { }
;; bb 229 artificial_uses: { u3308(29){ }u3309(31){ }u3310(64){ }u3311(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 734 735
;; lr  def 	 733 805
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 733 805
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 226 229 )->[230]->( 228 231 )
;; bb 230 artificial_defs: { }
;; bb 230 artificial_uses: { u3315(29){ }u3316(31){ }u3317(64){ }u3318(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 668 733 805
;; lr  def 	 66 [cc] 461 734 735 737
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 461 734 735 737
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 230 )->[231]->( 232 233 )
;; bb 231 artificial_defs: { }
;; bb 231 artificial_uses: { u3332(29){ }u3333(31){ }u3334(64){ }u3335(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 734 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 734 737
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 734 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 231 )->[232]->( )
;; bb 232 artificial_defs: { }
;; bb 232 artificial_uses: { u3339(29){ }u3340(31){ }u3341(64){ }u3342(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1751 1752 1754 1755 1756 1757 1758
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1751 1752 1754 1755 1756 1757 1758
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 231 )->[233]->( 238 239 )
;; bb 233 artificial_defs: { }
;; bb 233 artificial_uses: { u3355(29){ }u3356(31){ }u3357(64){ }u3358(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672
;; lr  def 	 66 [cc] 738
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 738
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 238 )->[235]->( 237 236 )
;; bb 235 artificial_defs: { }
;; bb 235 artificial_uses: { u3369(29){ }u3370(31){ }u3371(64){ }u3372(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 738 739
;; lr  def 	 66 [cc] 1759
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1759
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 235 )->[236]->( 238 )
;; bb 236 artificial_defs: { }
;; bb 236 artificial_uses: { u3377(29){ }u3378(31){ }u3379(64){ }u3380(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 739 741
;; lr  def 	 738 809
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 738 809
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 235 )->[237]->( )
;; bb 237 artificial_defs: { }
;; bb 237 artificial_uses: { u3384(29){ }u3385(31){ }u3386(64){ }u3387(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1760 1761 1763 1764 1765 1766 1767
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1760 1761 1763 1764 1765 1766 1767
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 233 236 )->[238]->( 235 239 )
;; bb 238 artificial_defs: { }
;; bb 238 artificial_uses: { u3400(29){ }u3401(31){ }u3402(64){ }u3403(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 809
;; lr  def 	 66 [cc] 739 741
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 739 741
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 215 238 278 216 327 233 277 )->[239]->( 215 289 )
;; bb 239 artificial_defs: { }
;; bb 239 artificial_uses: { u3410(29){ }u3411(31){ }u3412(64){ }u3413(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672 745 1861
;; lr  def 	 66 [cc] 672 745
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 672 745
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 199 242 )->[241]->( 243 296 )
;; bb 241 artificial_defs: { }
;; bb 241 artificial_uses: { u3422(29){ }u3423(31){ }u3424(64){ }u3425(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 626
;; lr  def 	 66 [cc] 763
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 763
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 289 )->[242]->( 241 )
;; bb 242 artificial_defs: { }
;; bb 242 artificial_uses: { u3429(29){ }u3430(31){ }u3431(64){ }u3432(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1768 1770 1771
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 1768 1770 1771
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 241 )->[243]->( 244 )
;; bb 243 artificial_defs: { }
;; bb 243 artificial_uses: { u3446(29){ }u3447(31){ }u3448(64){ }u3449(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 625 763
;; lr  def 	 610 708 715 720 1775 1776 1777 1778 1872 1873 1874
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 610 708 715 720 1775 1776 1777 1778 1872 1873 1874
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 243 257 )->[244]->( 257 245 )
;; bb 244 artificial_defs: { }
;; bb 244 artificial_uses: { u3457(29){ }u3458(31){ }u3459(64){ }u3460(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 708 715
;; lr  def 	 66 [cc] 674 675 716 1780 1781
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 674 675 716 1780 1781
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 244 )->[245]->( 279 246 )
;; bb 245 artificial_defs: { }
;; bb 245 artificial_uses: { u3477(29){ }u3478(31){ }u3479(64){ }u3480(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 679 1783 1785 1786 1788
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 679 1783 1785 1786 1788
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 245 )->[246]->( 290 247 )
;; bb 246 artificial_defs: { }
;; bb 246 artificial_uses: { u3496(29){ }u3497(31){ }u3498(64){ }u3499(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 1790 1791
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 1790 1791
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 246 )->[247]->( 257 248 )
;; bb 247 artificial_defs: { }
;; bb 247 artificial_uses: { u3511(29){ }u3512(31){ }u3513(64){ }u3514(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 679 715
;; lr  def 	 66 [cc] 716 1793 1794 1796
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 716 1793 1794 1796
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 247 )->[248]->( 249 293 )
;; bb 248 artificial_defs: { }
;; bb 248 artificial_uses: { u3525(29){ }u3526(31){ }u3527(64){ }u3528(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 674
;; lr  def 	 66 [cc] 688 690
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 688 690
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 248 )->[249]->( 280 292 )
;; bb 249 artificial_defs: { }
;; bb 249 artificial_uses: { u3534(29){ }u3535(31){ }u3536(64){ }u3537(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 675
;; lr  def 	 66 [cc] 692 694
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 692 694
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 292 )->[250]->( 251 252 )
;; bb 250 artificial_defs: { }
;; bb 250 artificial_uses: { u3543(29){ }u3544(31){ }u3545(64){ }u3546(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 675 690
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 250 )->[251]->( 252 )
;; bb 251 artificial_defs: { }
;; bb 251 artificial_uses: { u3550(29){ }u3551(31){ }u3552(64){ }u3553(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 688 746 1874
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 250 251 )->[252]->( 253 254 )
;; bb 252 artificial_defs: { }
;; bb 252 artificial_uses: { u3557(29){ }u3558(31){ }u3559(64){ }u3560(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 674 694
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 252 )->[253]->( 254 )
;; bb 253 artificial_defs: { }
;; bb 253 artificial_uses: { u3564(29){ }u3565(31){ }u3566(64){ }u3567(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 692 746 1874
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 253 252 292 )->[254]->( 256 255 )
;; bb 254 artificial_defs: { }
;; bb 254 artificial_uses: { u3571(29){ }u3572(31){ }u3573(64){ }u3574(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 688 692
;; lr  def 	 66 [cc] 1799 1800 1801 1802
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 1799 1800 1801 1802
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 254 )->[255]->( 257 )
;; bb 255 artificial_defs: { }
;; bb 255 artificial_uses: { u3588(29){ }u3589(31){ }u3590(64){ }u3591(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1872
;; lr  def 	 715 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 254 )->[256]->( 257 )
;; bb 256 artificial_defs: { }
;; bb 256 artificial_uses: { u3602(29){ }u3603(31){ }u3604(64){ }u3605(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1873
;; lr  def 	 715 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 255 244 291 294 256 281 247 )->[257]->( 244 259 )
;; bb 257 artificial_defs: { }
;; bb 257 artificial_uses: { u3607(29){ }u3608(31){ }u3609(64){ }u3610(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 708 720
;; lr  def 	 66 [cc] 708
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 708
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 257 )->[259]->( 260 268 )
;; bb 259 artificial_defs: { }
;; bb 259 artificial_uses: { u3618(29){ }u3619(31){ }u3620(64){ }u3621(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 716 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 716
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 716 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 259 )->[260]->( 261 268 )
;; bb 260 artificial_defs: { }
;; bb 260 artificial_uses: { u3624(29){ }u3625(31){ }u3626(64){ }u3627(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1861
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 296 260 )->[261]->( 262 )
;; bb 261 artificial_defs: { }
;; bb 261 artificial_uses: { u3635(29){ }u3636(31){ }u3637(64){ }u3638(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 436 1869 1870 1871
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 436 1869 1870 1871
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

( 261 266 )->[262]->( 263 329 )
;; bb 262 artificial_defs: { }
;; bb 262 artificial_uses: { u3640(29){ }u3641(31){ }u3642(64){ }u3643(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 624 715
;; lr  def 	 66 [cc] 1804 1805
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 66 [cc] 1804 1805
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

( 262 )->[329]->( 266 )
;; bb 329 artificial_defs: { }
;; bb 329 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	

( 262 )->[263]->( 264 265 )
;; bb 263 artificial_defs: { }
;; bb 263 artificial_uses: { u3656(29){ }u3657(31){ }u3658(64){ }u3659(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 647
;; lr  def 	 66 [cc] 710
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 66 [cc] 710
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

( 263 )->[264]->( 266 )
;; bb 264 artificial_defs: { }
;; bb 264 artificial_uses: { u3665(29){ }u3666(31){ }u3667(64){ }u3668(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 710 746 1869 1870 1871
;; lr  def 	 66 [cc] 715 1806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 66 [cc] 715 1806
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

( 263 )->[265]->( 266 )
;; bb 265 artificial_defs: { }
;; bb 265 artificial_uses: { u3689(29){ }u3690(31){ }u3691(64){ }u3692(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

( 329 265 264 )->[266]->( 262 268 )
;; bb 266 artificial_defs: { }
;; bb 266 artificial_uses: { u3698(29){ }u3699(31){ }u3700(64){ }u3701(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 1861
;; lr  def 	 66 [cc] 436
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 66 [cc] 436
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

( 266 259 260 )->[268]->( 269 330 )
;; bb 268 artificial_defs: { }
;; bb 268 artificial_uses: { u3709(29){ }u3710(31){ }u3711(64){ }u3712(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 66 [cc]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 268 )->[330]->( 271 )
;; bb 330 artificial_defs: { }
;; bb 330 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	

( 268 282 )->[269]->( 272 270 )
;; bb 269 artificial_defs: { }
;; bb 269 artificial_uses: { u3721(29){ }u3722(31){ }u3723(64){ }u3724(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715 811 1616
;; lr  def 	 66 [cc] 712 1807 1808 1812 1860
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 712 1807 1808 1812 1860
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878

( 269 )->[270]->( 273 )
;; bb 270 artificial_defs: { }
;; bb 270 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853
;; live  gen 	 1856
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856

( 330 295 )->[271]->( 272 331 )
;; bb 271 artificial_defs: { }
;; bb 271 artificial_uses: { u3736(29){ }u3737(31){ }u3738(64){ }u3739(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 811 1616
;; lr  def 	 66 [cc] 1813 1814 1816 1819 1860
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 1813 1814 1816 1819 1860
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878

( 271 )->[331]->( 274 )
;; bb 331 artificial_defs: { }
;; bb 331 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	

( 271 297 269 )->[272]->( 273 274 )
;; bb 272 artificial_defs: { }
;; bb 272 artificial_uses: { u3750(29){ }u3751(31){ }u3752(64){ }u3753(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1860
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 712 1820 1821 1822 1824 1825 1826 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 712 1820 1821 1822 1824 1825 1826 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 1616 1710 1853 1854 1856 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 1616 1710 1853 1854 1856 1859 1875 1877 1878

( 272 270 298 )->[273]->( )
;; bb 273 artificial_defs: { }
;; bb 273 artificial_uses: { u3769(29){ }u3770(31){ }u3771(64){ }u3772(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1828 1831 1832 1833 1834
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 1828 1831 1832 1833 1834
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

( 272 331 )->[274]->( 184 177 )
;; bb 274 artificial_defs: { }
;; bb 274 artificial_uses: { u3792(29){ }u3793(31){ }u3794(64){ }u3795(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 732 777 1837 1839
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 66 [cc] 732 777 1837 1839
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878

( 75 76 312 )->[276]->( 77 )
;; bb 276 artificial_defs: { }
;; bb 276 artificial_uses: { u3813(29){ }u3814(31){ }u3815(64){ }u3816(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 416
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1853 1854
;; live  gen 	 416
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

( 222 )->[277]->( 239 )
;; bb 277 artificial_defs: { }
;; bb 277 artificial_uses: { u3817(29){ }u3818(31){ }u3819(64){ }u3820(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 224 )->[278]->( 239 )
;; bb 278 artificial_defs: { }
;; bb 278 artificial_uses: { u3821(29){ }u3822(31){ }u3823(64){ }u3824(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 245 )->[279]->( 291 )
;; bb 279 artificial_defs: { }
;; bb 279 artificial_uses: { u3826(29){ }u3827(31){ }u3828(64){ }u3829(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 715 1842 1843 1867
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 715 1842 1843 1867
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 249 )->[280]->( 281 )
;; bb 280 artificial_defs: { }
;; bb 280 artificial_uses: { u3844(29){ }u3845(31){ }u3846(64){ }u3847(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 293 280 )->[281]->( 257 )
;; bb 281 artificial_defs: { }
;; bb 281 artificial_uses: { u3852(29){ }u3853(31){ }u3854(64){ }u3855(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 289 )->[282]->( 269 )
;; bb 282 artificial_defs: { }
;; bb 282 artificial_uses: { u3859(29){ }u3860(31){ }u3861(64){ }u3862(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 111 )->[283]->( 285 )
;; bb 283 artificial_defs: { }
;; bb 283 artificial_uses: { u3868(29){ }u3869(31){ }u3870(64){ }u3871(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1897 1898
;; lr  def 	 828 829
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 828 829
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 113 )->[284]->( 285 )
;; bb 284 artificial_defs: { }
;; bb 284 artificial_uses: { u3872(29){ }u3873(31){ }u3874(64){ }u3875(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1897 1900
;; lr  def 	 828 829
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 828 829
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 284 114 283 )->[285]->( 286 287 )
;; bb 285 artificial_defs: { }
;; bb 285 artificial_uses: { u3877(29){ }u3878(31){ }u3879(64){ }u3880(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 285 )->[286]->( 117 )
;; bb 286 artificial_defs: { }
;; bb 286 artificial_uses: { u3884(29){ }u3885(31){ }u3886(64){ }u3887(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 285 )->[287]->( 299 )
;; bb 287 artificial_defs: { }
;; bb 287 artificial_uses: { u3898(29){ }u3899(31){ }u3900(64){ }u3901(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 828
;; lr  def 	 442 830 831
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 442 830 831
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 190 )->[288]->( 192 332 )
;; bb 288 artificial_defs: { }
;; bb 288 artificial_uses: { u3906(29){ }u3907(31){ }u3908(64){ }u3909(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 288 )->[332]->( 195 )
;; bb 332 artificial_defs: { }
;; bb 332 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	

( 239 )->[289]->( 282 242 )
;; bb 289 artificial_defs: { }
;; bb 289 artificial_uses: { u3912(29){ }u3913(31){ }u3914(64){ }u3915(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 246 )->[290]->( 291 )
;; bb 290 artificial_defs: { }
;; bb 290 artificial_uses: { u3918(29){ }u3919(31){ }u3920(64){ }u3921(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 290 279 )->[291]->( 257 )
;; bb 291 artificial_defs: { }
;; bb 291 artificial_uses: { u3926(29){ }u3927(31){ }u3928(64){ }u3929(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 249 )->[292]->( 250 254 )
;; bb 292 artificial_defs: { }
;; bb 292 artificial_uses: { u3932(29){ }u3933(31){ }u3934(64){ }u3935(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 674 675
;; lr  def 	 66 [cc] 610
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 610
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 248 )->[293]->( 281 294 )
;; bb 293 artificial_defs: { }
;; bb 293 artificial_uses: { u3941(29){ }u3942(31){ }u3943(64){ }u3944(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 675
;; lr  def 	 66 [cc] 715 1844
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 715 1844
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 293 )->[294]->( 257 )
;; bb 294 artificial_defs: { }
;; bb 294 artificial_uses: { u3949(29){ }u3950(31){ }u3951(64){ }u3952(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1872
;; lr  def 	 715 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715 716
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

( 296 )->[295]->( 271 )
;; bb 295 artificial_defs: { }
;; bb 295 artificial_uses: { u3953(29){ }u3954(31){ }u3955(64){ }u3956(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 610
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 610
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

( 241 )->[296]->( 261 295 )
;; bb 296 artificial_defs: { }
;; bb 296 artificial_uses: { u3961(29){ }u3962(31){ }u3963(64){ }u3964(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1861
;; lr  def 	 66 [cc] 610 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 610 715
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

( 195 196 )->[297]->( 272 298 )
;; bb 297 artificial_defs: { }
;; bb 297 artificial_uses: { u3967(29){ }u3968(31){ }u3969(64){ }u3970(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1616
;; lr  def 	 66 [cc] 1845 1846 1848 1851 1860
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 1845 1846 1848 1851 1860
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878

( 297 )->[298]->( 273 )
;; bb 298 artificial_defs: { }
;; bb 298 artificial_uses: { u3980(29){ }u3981(31){ }u3982(64){ }u3983(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1853
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 712 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1853
;; live  gen 	 712 1856
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856

( 287 120 119 )->[299]->( 98 121 )
;; bb 299 artificial_defs: { }
;; bb 299 artificial_uses: { u3985(29){ }u3986(31){ }u3987(64){ }u3988(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 443 747 829 831
;; lr  def 	 66 [cc] 443 747 1852
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 443 747 1852
;; live  kill	
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

( 177 134 136 )->[300]->( 1 )
;; bb 300 artificial_defs: { }
;; bb 300 artificial_uses: { u4001(29){ }u4002(31){ }u4003(64){ }u4004(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  gen 	 0 [x0]
;; live  kill	
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

( 300 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u4007(0){ }u4008(29){ }u4009(31){ }u4010(64){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; lr  def 	
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 290 to worklist
  Adding insn 307 to worklist
  Adding insn 304 to worklist
  Adding insn 312 to worklist
  Adding insn 320 to worklist
  Adding insn 323 to worklist
  Adding insn 341 to worklist
  Adding insn 338 to worklist
  Adding insn 363 to worklist
  Adding insn 360 to worklist
  Adding insn 370 to worklist
  Adding insn 378 to worklist
  Adding insn 393 to worklist
  Adding insn 391 to worklist
  Adding insn 386 to worklist
  Adding insn 404 to worklist
  Adding insn 422 to worklist
  Adding insn 420 to worklist
  Adding insn 415 to worklist
  Adding insn 433 to worklist
  Adding insn 456 to worklist
  Adding insn 453 to worklist
  Adding insn 449 to worklist
  Adding insn 443 to worklist
  Adding insn 441 to worklist
  Adding insn 470 to worklist
  Adding insn 481 to worklist
  Adding insn 492 to worklist
  Adding insn 515 to worklist
  Adding insn 512 to worklist
  Adding insn 508 to worklist
  Adding insn 502 to worklist
  Adding insn 500 to worklist
  Adding insn 529 to worklist
  Adding insn 540 to worklist
  Adding insn 551 to worklist
  Adding insn 573 to worklist
  Adding insn 570 to worklist
  Adding insn 566 to worklist
  Adding insn 561 to worklist
  Adding insn 559 to worklist
  Adding insn 584 to worklist
  Adding insn 593 to worklist
  Adding insn 607 to worklist
  Adding insn 618 to worklist
  Adding insn 632 to worklist
  Adding insn 661 to worklist
  Adding insn 658 to worklist
  Adding insn 654 to worklist
  Adding insn 649 to worklist
  Adding insn 647 to worklist
  Adding insn 672 to worklist
  Adding insn 681 to worklist
  Adding insn 695 to worklist
  Adding insn 706 to worklist
  Adding insn 720 to worklist
  Adding insn 749 to worklist
  Adding insn 746 to worklist
  Adding insn 742 to worklist
  Adding insn 737 to worklist
  Adding insn 735 to worklist
  Adding insn 760 to worklist
  Adding insn 769 to worklist
  Adding insn 783 to worklist
  Adding insn 794 to worklist
  Adding insn 808 to worklist
  Adding insn 837 to worklist
  Adding insn 834 to worklist
  Adding insn 830 to worklist
  Adding insn 825 to worklist
  Adding insn 823 to worklist
  Adding insn 848 to worklist
  Adding insn 857 to worklist
  Adding insn 871 to worklist
  Adding insn 882 to worklist
  Adding insn 896 to worklist
  Adding insn 920 to worklist
  Adding insn 941 to worklist
  Adding insn 936 to worklist
  Adding insn 944 to worklist
  Adding insn 947 to worklist
  Adding insn 952 to worklist
  Adding insn 956 to worklist
  Adding insn 959 to worklist
  Adding insn 980 to worklist
  Adding insn 1000 to worklist
  Adding insn 1020 to worklist
  Adding insn 1040 to worklist
  Adding insn 1057 to worklist
  Adding insn 1054 to worklist
  Adding insn 1065 to worklist
  Adding insn 1071 to worklist
  Adding insn 1077 to worklist
  Adding insn 1084 to worklist
  Adding insn 1113 to worklist
  Adding insn 1109 to worklist
  Adding insn 1118 to worklist
  Adding insn 1196 to worklist
  Adding insn 1189 to worklist
  Adding insn 1185 to worklist
  Adding insn 1182 to worklist
  Adding insn 1179 to worklist
  Adding insn 1175 to worklist
  Adding insn 1172 to worklist
  Adding insn 1169 to worklist
  Adding insn 1165 to worklist
  Adding insn 1162 to worklist
  Adding insn 1156 to worklist
  Adding insn 1152 to worklist
  Adding insn 1145 to worklist
  Adding insn 1141 to worklist
  Adding insn 1134 to worklist
  Adding insn 1130 to worklist
  Adding insn 1123 to worklist
  Adding insn 1215 to worklist
  Adding insn 1212 to worklist
  Adding insn 1207 to worklist
  Adding insn 1233 to worklist
  Adding insn 1228 to worklist
  Adding insn 1223 to worklist
  Adding insn 1219 to worklist
  Adding insn 1217 to worklist
  Adding insn 1237 to worklist
  Adding insn 1308 to worklist
  Adding insn 1298 to worklist
  Adding insn 1295 to worklist
  Adding insn 1292 to worklist
  Adding insn 1289 to worklist
  Adding insn 1286 to worklist
  Adding insn 1279 to worklist
  Adding insn 1270 to worklist
  Adding insn 1265 to worklist
  Adding insn 1260 to worklist
  Adding insn 1252 to worklist
  Adding insn 1243 to worklist
  Adding insn 1320 to worklist
  Adding insn 1325 to worklist
  Adding insn 1337 to worklist
  Adding insn 1345 to worklist
  Adding insn 1351 to worklist
  Adding insn 1362 to worklist
  Adding insn 1369 to worklist
  Adding insn 1412 to worklist
  Adding insn 1408 to worklist
  Adding insn 1407 to worklist
  Adding insn 1387 to worklist
  Adding insn 1382 to worklist
  Adding insn 1377 to worklist
  Adding insn 1373 to worklist
  Adding insn 1521 to worklist
  Adding insn 1511 to worklist
  Adding insn 1503 to worklist
  Adding insn 1493 to worklist
  Adding insn 1489 to worklist
  Adding insn 1484 to worklist
  Adding insn 1483 to worklist
  Adding insn 1482 to worklist
  Adding insn 1481 to worklist
  Adding insn 1480 to worklist
  Adding insn 1462 to worklist
  Adding insn 1457 to worklist
  Adding insn 1454 to worklist
  Adding insn 1421 to worklist
  Adding insn 1546 to worklist
  Adding insn 1535 to worklist
  Adding insn 1534 to worklist
  Adding insn 1533 to worklist
  Adding insn 1532 to worklist
  Adding insn 1531 to worklist
  Adding insn 1572 to worklist
  Adding insn 1584 to worklist
  Adding insn 1611 to worklist
  Adding insn 1622 to worklist
  Adding insn 1641 to worklist
  Adding insn 1667 to worklist
  Adding insn 1674 to worklist
  Adding insn 1721 to worklist
  Adding insn 1727 to worklist
  Adding insn 1726 to worklist
  Adding insn 1725 to worklist
  Adding insn 1724 to worklist
  Adding insn 1723 to worklist
  Adding insn 1736 to worklist
  Adding insn 1735 to worklist
  Adding insn 1734 to worklist
  Adding insn 1733 to worklist
  Adding insn 1732 to worklist
  Adding insn 1749 to worklist
  Adding insn 1801 to worklist
  Adding insn 1843 to worklist
  Adding insn 1872 to worklist
  Adding insn 1894 to worklist
  Adding insn 1899 to worklist
  Adding insn 1905 to worklist
  Adding insn 1917 to worklist
  Adding insn 1923 to worklist
  Adding insn 1922 to worklist
  Adding insn 1921 to worklist
  Adding insn 1920 to worklist
  Adding insn 1919 to worklist
  Adding insn 1937 to worklist
  Adding insn 1942 to worklist
  Adding insn 1957 to worklist
  Adding insn 1956 to worklist
  Adding insn 1955 to worklist
  Adding insn 1954 to worklist
  Adding insn 1953 to worklist
  Adding insn 2001 to worklist
  Adding insn 2007 to worklist
  Adding insn 2041 to worklist
  Adding insn 2053 to worklist
  Adding insn 2102 to worklist
  Adding insn 2133 to worklist
  Adding insn 2147 to worklist
  Adding insn 2146 to worklist
  Adding insn 2169 to worklist
  Adding insn 2200 to worklist
  Adding insn 2196 to worklist
  Adding insn 2207 to worklist
  Adding insn 2222 to worklist
  Adding insn 2237 to worklist
  Adding insn 2231 to worklist
  Adding insn 2242 to worklist
  Adding insn 2266 to worklist
  Adding insn 2260 to worklist
  Adding insn 2271 to worklist
  Adding insn 2277 to worklist
  Adding insn 2285 to worklist
  Adding insn 2296 to worklist
  Adding insn 2322 to worklist
  Adding insn 2317 to worklist
  Adding insn 2313 to worklist
  Adding insn 2310 to worklist
  Adding insn 2303 to worklist
  Adding insn 2333 to worklist
  Adding insn 2337 to worklist
  Adding insn 2352 to worklist
  Adding insn 2348 to worklist
  Adding insn 2360 to worklist
  Adding insn 2369 to worklist
  Adding insn 2377 to worklist
  Adding insn 2385 to worklist
  Adding insn 2407 to worklist
  Adding insn 2412 to worklist
  Adding insn 2410 to worklist
  Adding insn 2423 to worklist
  Adding insn 2454 to worklist
  Adding insn 2457 to worklist
  Adding insn 2473 to worklist
  Adding insn 2470 to worklist
  Adding insn 2467 to worklist
  Adding insn 2464 to worklist
  Adding insn 2461 to worklist
  Adding insn 2497 to worklist
  Adding insn 2500 to worklist
  Adding insn 2516 to worklist
  Adding insn 2513 to worklist
  Adding insn 2510 to worklist
  Adding insn 2507 to worklist
  Adding insn 2504 to worklist
  Adding insn 2561 to worklist
  Adding insn 2577 to worklist
  Adding insn 2574 to worklist
  Adding insn 2571 to worklist
  Adding insn 2568 to worklist
  Adding insn 2565 to worklist
  Adding insn 2602 to worklist
  Adding insn 2617 to worklist
  Adding insn 2628 to worklist
  Adding insn 2639 to worklist
  Adding insn 2643 to worklist
  Adding insn 2646 to worklist
  Adding insn 2662 to worklist
  Adding insn 2659 to worklist
  Adding insn 2656 to worklist
  Adding insn 2653 to worklist
  Adding insn 2650 to worklist
  Adding insn 2666 to worklist
  Adding insn 2684 to worklist
  Adding insn 2679 to worklist
  Adding insn 2702 to worklist
  Adding insn 2698 to worklist
  Adding insn 2707 to worklist
  Adding insn 2723 to worklist
  Adding insn 2720 to worklist
  Adding insn 2717 to worklist
  Adding insn 2714 to worklist
  Adding insn 2711 to worklist
  Adding insn 2730 to worklist
  Adding insn 2737 to worklist
  Adding insn 2785 to worklist
  Adding insn 2753 to worklist
  Adding insn 2739 to worklist
  Adding insn 2800 to worklist
  Adding insn 2794 to worklist
  Adding insn 2807 to worklist
  Adding insn 2805 to worklist
  Adding insn 2835 to worklist
  Adding insn 2829 to worklist
  Adding insn 2842 to worklist
  Adding insn 2840 to worklist
  Adding insn 2847 to worklist
  Adding insn 2868 to worklist
  Adding insn 2863 to worklist
  Adding insn 2871 to worklist
  Adding insn 2886 to worklist
  Adding insn 2899 to worklist
  Adding insn 2907 to worklist
  Adding insn 2920 to worklist
  Adding insn 2972 to worklist
  Adding insn 2967 to worklist
  Adding insn 2943 to worklist
  Adding insn 2937 to worklist
  Adding insn 2927 to worklist
  Adding insn 2986 to worklist
  Adding insn 2984 to worklist
  Adding insn 2992 to worklist
  Adding insn 2991 to worklist
  Adding insn 3000 to worklist
  Adding insn 3017 to worklist
  Adding insn 3038 to worklist
  Adding insn 3042 to worklist
  Adding insn 3062 to worklist
  Adding insn 3057 to worklist
  Adding insn 3065 to worklist
  Adding insn 3082 to worklist
  Adding insn 3099 to worklist
  Adding insn 3110 to worklist
  Adding insn 3106 to worklist
  Adding insn 3121 to worklist
  Adding insn 3117 to worklist
  Adding insn 3128 to worklist
  Adding insn 3134 to worklist
  Adding insn 3143 to worklist
  Adding insn 3174 to worklist
  Adding insn 3167 to worklist
  Adding insn 3178 to worklist
  Adding insn 3186 to worklist
  Adding insn 3201 to worklist
  Adding insn 3205 to worklist
  Adding insn 3216 to worklist
  Adding insn 3229 to worklist
  Adding insn 3243 to worklist
  Adding insn 3253 to worklist
  Adding insn 3268 to worklist
  Adding insn 3276 to worklist
  Adding insn 3284 to worklist
  Adding insn 3302 to worklist
  Adding insn 3306 to worklist
  Adding insn 3325 to worklist
  Adding insn 3315 to worklist
  Adding insn 3328 to worklist
  Adding insn 3342 to worklist
  Adding insn 3355 to worklist
  Adding insn 3362 to worklist
  Adding insn 3381 to worklist
  Adding insn 3398 to worklist
  Adding insn 3412 to worklist
  Adding insn 3424 to worklist
  Adding insn 3460 to worklist
  Adding insn 3489 to worklist
  Adding insn 3502 to worklist
  Adding insn 3511 to worklist
  Adding insn 3521 to worklist
  Adding insn 3526 to worklist
  Adding insn 3531 to worklist
  Adding insn 3537 to worklist
  Adding insn 3540 to worklist
  Adding insn 3544 to worklist
  Adding insn 3551 to worklist
  Adding insn 3560 to worklist
  Adding insn 3575 to worklist
  Adding insn 3578 to worklist
  Adding insn 3583 to worklist
  Adding insn 3596 to worklist
  Adding insn 3601 to worklist
  Adding insn 3625 to worklist
  Adding insn 3635 to worklist
  Adding insn 3632 to worklist
  Adding insn 3663 to worklist
  Adding insn 3658 to worklist
  Adding insn 3695 to worklist
  Adding insn 3690 to worklist
  Adding insn 3714 to worklist
  Adding insn 3708 to worklist
  Adding insn 3737 to worklist
  Adding insn 3734 to worklist
  Adding insn 3754 to worklist
  Adding insn 3743 to worklist
  Adding insn 3818 to worklist
  Adding insn 3831 to worklist
  Adding insn 3837 to worklist
  Adding insn 3836 to worklist
  Adding insn 3835 to worklist
  Adding insn 3834 to worklist
  Adding insn 3833 to worklist
  Adding insn 3851 to worklist
  Adding insn 3870 to worklist
  Adding insn 3889 to worklist
  Adding insn 3899 to worklist
  Adding insn 3908 to worklist
  Adding insn 3918 to worklist
  Adding insn 3948 to worklist
  Adding insn 3943 to worklist
  Adding insn 3970 to worklist
  Adding insn 3978 to worklist
Finished finding needed instructions:
processing block 53 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 186 to worklist
  Adding insn 919 to worklist
  Adding insn 918 to worklist
  Adding insn 917 to worklist
  Adding insn 916 to worklist
  Adding insn 915 to worklist
processing block 10 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 362 to worklist
  Adding insn 359 to worklist
  Adding insn 358 to worklist
  Adding insn 357 to worklist
  Adding insn 356 to worklist
  Adding insn 355 to worklist
  Adding insn 354 to worklist
  Adding insn 353 to worklist
  Adding insn 352 to worklist
  Adding insn 351 to worklist
  Adding insn 350 to worklist
  Adding insn 349 to worklist
  Adding insn 347 to worklist
  Adding insn 346 to worklist
processing block 31 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 641 to worklist
  Adding insn 639 to worklist
processing block 30 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 176 to worklist
  Adding insn 631 to worklist
  Adding insn 630 to worklist
  Adding insn 629 to worklist
  Adding insn 628 to worklist
  Adding insn 627 to worklist
  Adding insn 626 to worklist
  Adding insn 625 to worklist
processing block 29 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 617 to worklist
  Adding insn 616 to worklist
  Adding insn 615 to worklist
processing block 28 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
  Adding insn 175 to worklist
  Adding insn 606 to worklist
  Adding insn 605 to worklist
  Adding insn 604 to worklist
  Adding insn 603 to worklist
  Adding insn 602 to worklist
  Adding insn 601 to worklist
  Adding insn 600 to worklist
  Adding insn 599 to worklist
  Adding insn 598 to worklist
processing block 305 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
processing block 27 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 592 to worklist
  Adding insn 591 to worklist
processing block 26 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 174 to worklist
  Adding insn 583 to worklist
  Adding insn 582 to worklist
  Adding insn 581 to worklist
  Adding insn 580 to worklist
  Adding insn 579 to worklist
  Adding insn 578 to worklist
  Adding insn 577 to worklist
processing block 304 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
processing block 25 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 572 to worklist
  Adding insn 571 to worklist
  Adding insn 569 to worklist
  Adding insn 568 to worklist
  Adding insn 567 to worklist
  Adding insn 565 to worklist
  Adding insn 564 to worklist
  Adding insn 563 to worklist
  Adding insn 562 to worklist
  Adding insn 560 to worklist
processing block 38 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 729 to worklist
  Adding insn 727 to worklist
processing block 37 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 179 to worklist
  Adding insn 719 to worklist
  Adding insn 718 to worklist
  Adding insn 717 to worklist
  Adding insn 716 to worklist
  Adding insn 715 to worklist
  Adding insn 714 to worklist
  Adding insn 713 to worklist
processing block 36 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 705 to worklist
  Adding insn 704 to worklist
  Adding insn 703 to worklist
processing block 35 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
  Adding insn 178 to worklist
  Adding insn 694 to worklist
  Adding insn 693 to worklist
  Adding insn 692 to worklist
  Adding insn 691 to worklist
  Adding insn 690 to worklist
  Adding insn 689 to worklist
  Adding insn 688 to worklist
  Adding insn 687 to worklist
  Adding insn 686 to worklist
processing block 307 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
processing block 34 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 680 to worklist
  Adding insn 679 to worklist
processing block 33 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 177 to worklist
  Adding insn 671 to worklist
  Adding insn 670 to worklist
  Adding insn 669 to worklist
  Adding insn 668 to worklist
  Adding insn 667 to worklist
  Adding insn 666 to worklist
  Adding insn 665 to worklist
processing block 306 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
processing block 32 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 660 to worklist
  Adding insn 659 to worklist
  Adding insn 657 to worklist
  Adding insn 656 to worklist
  Adding insn 655 to worklist
  Adding insn 653 to worklist
  Adding insn 652 to worklist
  Adding insn 651 to worklist
  Adding insn 650 to worklist
  Adding insn 648 to worklist
processing block 45 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 817 to worklist
  Adding insn 815 to worklist
processing block 44 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 182 to worklist
  Adding insn 807 to worklist
  Adding insn 806 to worklist
  Adding insn 805 to worklist
  Adding insn 804 to worklist
  Adding insn 803 to worklist
  Adding insn 802 to worklist
  Adding insn 801 to worklist
processing block 43 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 793 to worklist
  Adding insn 792 to worklist
  Adding insn 791 to worklist
processing block 42 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
  Adding insn 181 to worklist
  Adding insn 782 to worklist
  Adding insn 781 to worklist
  Adding insn 780 to worklist
  Adding insn 779 to worklist
  Adding insn 778 to worklist
  Adding insn 777 to worklist
  Adding insn 776 to worklist
  Adding insn 775 to worklist
  Adding insn 774 to worklist
processing block 309 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
processing block 41 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 768 to worklist
  Adding insn 767 to worklist
processing block 40 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 180 to worklist
  Adding insn 759 to worklist
  Adding insn 758 to worklist
  Adding insn 757 to worklist
  Adding insn 756 to worklist
  Adding insn 755 to worklist
  Adding insn 754 to worklist
  Adding insn 753 to worklist
processing block 308 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
processing block 39 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 748 to worklist
  Adding insn 747 to worklist
  Adding insn 745 to worklist
  Adding insn 744 to worklist
  Adding insn 743 to worklist
  Adding insn 741 to worklist
  Adding insn 740 to worklist
  Adding insn 739 to worklist
  Adding insn 738 to worklist
  Adding insn 736 to worklist
processing block 52 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 905 to worklist
  Adding insn 903 to worklist
processing block 51 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 185 to worklist
  Adding insn 895 to worklist
  Adding insn 894 to worklist
  Adding insn 893 to worklist
  Adding insn 892 to worklist
  Adding insn 891 to worklist
  Adding insn 890 to worklist
  Adding insn 889 to worklist
processing block 50 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 881 to worklist
  Adding insn 880 to worklist
  Adding insn 879 to worklist
processing block 49 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
  Adding insn 184 to worklist
  Adding insn 870 to worklist
  Adding insn 869 to worklist
  Adding insn 868 to worklist
  Adding insn 867 to worklist
  Adding insn 866 to worklist
  Adding insn 865 to worklist
  Adding insn 864 to worklist
  Adding insn 863 to worklist
  Adding insn 862 to worklist
processing block 311 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
processing block 48 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 856 to worklist
  Adding insn 855 to worklist
processing block 47 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 183 to worklist
  Adding insn 847 to worklist
  Adding insn 846 to worklist
  Adding insn 845 to worklist
  Adding insn 844 to worklist
  Adding insn 843 to worklist
  Adding insn 842 to worklist
  Adding insn 841 to worklist
processing block 310 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
processing block 46 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
  Adding insn 836 to worklist
  Adding insn 835 to worklist
  Adding insn 833 to worklist
  Adding insn 832 to worklist
  Adding insn 831 to worklist
  Adding insn 829 to worklist
  Adding insn 828 to worklist
  Adding insn 827 to worklist
  Adding insn 826 to worklist
  Adding insn 824 to worklist
processing block 12 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 377 to worklist
  Adding insn 376 to worklist
  Adding insn 375 to worklist
processing block 11 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 369 to worklist
  Adding insn 368 to worklist
  Adding insn 367 to worklist
processing block 24 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 187 to worklist
  Adding insn 550 to worklist
  Adding insn 549 to worklist
  Adding insn 548 to worklist
  Adding insn 547 to worklist
  Adding insn 546 to worklist
  Adding insn 545 to worklist
  Adding insn 544 to worklist
processing block 23 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 539 to worklist
  Adding insn 538 to worklist
  Adding insn 537 to worklist
processing block 22 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
  Adding insn 173 to worklist
  Adding insn 528 to worklist
  Adding insn 527 to worklist
  Adding insn 526 to worklist
  Adding insn 525 to worklist
  Adding insn 524 to worklist
  Adding insn 523 to worklist
  Adding insn 522 to worklist
  Adding insn 521 to worklist
processing block 303 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
processing block 21 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 899 1013 1710 1854 1909 1911
  Adding insn 514 to worklist
  Adding insn 513 to worklist
  Adding insn 511 to worklist
  Adding insn 510 to worklist
  Adding insn 509 to worklist
  Adding insn 507 to worklist
  Adding insn 506 to worklist
  Adding insn 505 to worklist
  Adding insn 504 to worklist
  Adding insn 503 to worklist
  Adding insn 501 to worklist
processing block 14 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 190 to worklist
  Adding insn 403 to worklist
  Adding insn 402 to worklist
  Adding insn 401 to worklist
  Adding insn 400 to worklist
  Adding insn 399 to worklist
  Adding insn 398 to worklist
  Adding insn 397 to worklist
processing block 13 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 392 to worklist
  Adding insn 390 to worklist
  Adding insn 389 to worklist
  Adding insn 387 to worklist
  Adding insn 385 to worklist
  Adding insn 384 to worklist
  Adding insn 383 to worklist
processing block 16 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 189 to worklist
  Adding insn 432 to worklist
  Adding insn 431 to worklist
  Adding insn 430 to worklist
  Adding insn 429 to worklist
  Adding insn 428 to worklist
  Adding insn 427 to worklist
  Adding insn 426 to worklist
processing block 15 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 421 to worklist
  Adding insn 419 to worklist
  Adding insn 418 to worklist
  Adding insn 416 to worklist
  Adding insn 414 to worklist
  Adding insn 413 to worklist
  Adding insn 412 to worklist
processing block 20 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 188 to worklist
  Adding insn 491 to worklist
  Adding insn 490 to worklist
  Adding insn 489 to worklist
  Adding insn 488 to worklist
  Adding insn 487 to worklist
  Adding insn 486 to worklist
  Adding insn 485 to worklist
processing block 19 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 480 to worklist
  Adding insn 479 to worklist
  Adding insn 478 to worklist
processing block 18 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
  Adding insn 172 to worklist
  Adding insn 469 to worklist
  Adding insn 468 to worklist
  Adding insn 467 to worklist
  Adding insn 466 to worklist
  Adding insn 465 to worklist
  Adding insn 464 to worklist
  Adding insn 463 to worklist
  Adding insn 462 to worklist
processing block 302 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
processing block 17 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 881 1013 1710 1854 1909 1911
  Adding insn 455 to worklist
  Adding insn 454 to worklist
  Adding insn 452 to worklist
  Adding insn 451 to worklist
  Adding insn 450 to worklist
  Adding insn 448 to worklist
  Adding insn 447 to worklist
  Adding insn 446 to worklist
  Adding insn 445 to worklist
  Adding insn 444 to worklist
  Adding insn 442 to worklist
processing block 9 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 340 to worklist
  Adding insn 337 to worklist
  Adding insn 336 to worklist
  Adding insn 335 to worklist
  Adding insn 334 to worklist
  Adding insn 333 to worklist
  Adding insn 332 to worklist
  Adding insn 331 to worklist
  Adding insn 330 to worklist
processing block 8 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
processing block 7 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1710 1909 1911
  Adding insn 319 to worklist
  Adding insn 318 to worklist
processing block 57 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 946 to worklist
processing block 65 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1053 to worklist
  Adding insn 1052 to worklist
  Adding insn 1051 to worklist
  Adding insn 1049 to worklist
  Adding insn 1048 to worklist
  Adding insn 1047 to worklist
processing block 70 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1112 to worklist
  Adding insn 1108 to worklist
  Adding insn 1107 to worklist
  Adding insn 1106 to worklist
  Adding insn 1105 to worklist
  Adding insn 1104 to worklist
  Adding insn 1103 to worklist
  Adding insn 1102 to worklist
  Adding insn 1100 to worklist
  Adding insn 1099 to worklist
  Adding insn 1098 to worklist
  Adding insn 1093 to worklist
processing block 78 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1319 to worklist
  Adding insn 1318 to worklist
  Adding insn 1317 to worklist
  Adding insn 1316 to worklist
  Adding insn 1315 to worklist
  Adding insn 1314 to worklist
  Adding insn 1313 to worklist
  Adding insn 1312 to worklist
  Adding insn 1311 to worklist
  Adding insn 1310 to worklist
processing block 80 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1336 to worklist
  Adding insn 1335 to worklist
  Adding insn 1334 to worklist
  Adding insn 1333 to worklist
  Adding insn 1332 to worklist
  Adding insn 1331 to worklist
  Adding insn 1330 to worklist
  Adding insn 1329 to worklist
  Adding insn 1328 to worklist
  Adding insn 1327 to worklist
processing block 143 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2351 to worklist
  Adding insn 2347 to worklist
  Adding insn 2346 to worklist
  Adding insn 2345 to worklist
  Adding insn 2343 to worklist
  Adding insn 2342 to worklist
  Adding insn 2341 to worklist
processing block 146 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
  Adding insn 2378 to worklist
processing block 151 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
  Adding insn 2417 to worklist
  Adding insn 2415 to worklist
processing block 150 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
processing block 149 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1710 1853 1854 1859 1862 1888
  Adding insn 2406 to worklist
  Adding insn 2402 to worklist
  Adding insn 2398 to worklist
processing block 97 lr out =  31 [sp] 64 [sfp] 65 [ap]
processing block 320 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 156 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2460 to worklist
processing block 155 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
  Adding insn 2456 to worklist
processing block 102 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1748 to worklist
  Adding insn 1747 to worklist
  Adding insn 1746 to worklist
  Adding insn 1745 to worklist
  Adding insn 1744 to worklist
  Adding insn 1743 to worklist
  Adding insn 1742 to worklist
  Adding insn 1741 to worklist
  Adding insn 1740 to worklist
  Adding insn 1739 to worklist
processing block 321 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 159 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2503 to worklist
processing block 158 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
  Adding insn 2499 to worklist
processing block 161 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2564 to worklist
processing block 165 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 226 to worklist
  Adding insn 225 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
  Adding insn 222 to worklist
  Adding insn 4376 to worklist
  Adding insn 2631 to worklist
processing block 322 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
processing block 164 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 218 to worklist
  Adding insn 2627 to worklist
  Adding insn 2619 to worklist
processing block 163 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 2616 to worklist
  Adding insn 2615 to worklist
  Adding insn 2614 to worklist
  Adding insn 2613 to worklist
  Adding insn 2612 to worklist
  Adding insn 2611 to worklist
  Adding insn 2610 to worklist
  Adding insn 2609 to worklist
  Adding insn 2607 to worklist
  Adding insn 2606 to worklist
  Adding insn 2604 to worklist
processing block 162 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 2601 to worklist
  Adding insn 2600 to worklist
  Adding insn 2589 to worklist
  Adding insn 2588 to worklist
  Adding insn 2586 to worklist
  Adding insn 2584 to worklist
  Adding insn 2583 to worklist
processing block 160 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 2560 to worklist
  Adding insn 2550 to worklist
  Adding insn 2549 to worklist
  Adding insn 2547 to worklist
  Adding insn 2545 to worklist
  Adding insn 2530 to worklist
  Adding insn 2529 to worklist
  Adding insn 2527 to worklist
  Adding insn 2525 to worklist
  Adding insn 2524 to worklist
processing block 157 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 2496 to worklist
  Adding insn 2486 to worklist
  Adding insn 2485 to worklist
  Adding insn 2483 to worklist
  Adding insn 2481 to worklist
processing block 154 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 2453 to worklist
processing block 185 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2870 to worklist
processing block 187 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2898 to worklist
  Adding insn 2897 to worklist
  Adding insn 2896 to worklist
  Adding insn 2895 to worklist
  Adding insn 2894 to worklist
  Adding insn 2893 to worklist
  Adding insn 2892 to worklist
  Adding insn 2891 to worklist
  Adding insn 2890 to worklist
  Adding insn 2889 to worklist
  Adding insn 2888 to worklist
processing block 192 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2990 to worklist
  Adding insn 2989 to worklist
  Adding insn 2988 to worklist
processing block 273 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3733 to worklist
  Adding insn 3732 to worklist
  Adding insn 3731 to worklist
  Adding insn 3730 to worklist
  Adding insn 3729 to worklist
  Adding insn 3728 to worklist
  Adding insn 3725 to worklist
  Adding insn 3724 to worklist
  Adding insn 3723 to worklist
  Adding insn 3722 to worklist
  Adding insn 3720 to worklist
processing block 300 lr out =  0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3977 to worklist
processing block 177 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
  Adding insn 267 to worklist
  Adding insn 2784 to worklist
  Adding insn 2783 to worklist
  Adding insn 2782 to worklist
  Adding insn 2781 to worklist
  Adding insn 2780 to worklist
  Adding insn 2779 to worklist
  Adding insn 2778 to worklist
  Adding insn 2777 to worklist
  Adding insn 2776 to worklist
  Adding insn 2775 to worklist
  Adding insn 2756 to worklist
  Adding insn 2752 to worklist
  Adding insn 2751 to worklist
processing block 274 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 3753 to worklist
  Adding insn 3752 to worklist
  Adding insn 3751 to worklist
  Adding insn 3748 to worklist
  Adding insn 3745 to worklist
  Adding insn 3742 to worklist
processing block 272 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 1616 1710 1853 1854 1856 1859 1875 1877 1878
  Adding insn 3713 to worklist
  Adding insn 3712 to worklist
  Adding insn 3711 to worklist
  Adding insn 3710 to worklist
  Adding insn 3707 to worklist
  Adding insn 3706 to worklist
  Adding insn 3705 to worklist
  Adding insn 3704 to worklist
  Adding insn 3703 to worklist
  Adding insn 3702 to worklist
  Adding insn 3701 to worklist
  Adding insn 3700 to worklist
processing block 298 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
  Adding insn 4204 to worklist
  Adding insn 264 to worklist
processing block 297 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
  Adding insn 3947 to worklist
  Adding insn 3946 to worklist
  Adding insn 3942 to worklist
  Adding insn 3941 to worklist
  Adding insn 3940 to worklist
  Adding insn 3939 to worklist
processing block 198 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3064 to worklist
processing block 270 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
  Adding insn 4203 to worklist
processing block 269 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
  Adding insn 3662 to worklist
  Adding insn 3661 to worklist
  Adding insn 3657 to worklist
  Adding insn 3656 to worklist
  Adding insn 3655 to worklist
  Adding insn 3640 to worklist
processing block 282 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 3817 to worklist
processing block 331 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1616 1710 1853 1854 1859 1875 1877 1878
processing block 271 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
  Adding insn 3694 to worklist
  Adding insn 3693 to worklist
  Adding insn 3689 to worklist
  Adding insn 3688 to worklist
  Adding insn 3687 to worklist
  Adding insn 3686 to worklist
processing block 330 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
processing block 268 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 3634 to worklist
  Adding insn 3631 to worklist
processing block 266 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
  Adding insn 3624 to worklist
  Adding insn 3619 to worklist
processing block 264 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
  Adding insn 4330 to worklist
  Adding insn 4329 to worklist
  Adding insn 4324 to worklist
  Adding insn 4323 to worklist
  Adding insn 3603 to worklist
processing block 265 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
  Adding insn 261 to worklist
processing block 263 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
  Adding insn 3600 to worklist
  Adding insn 3599 to worklist
processing block 329 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
processing block 262 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
  Adding insn 3595 to worklist
  Adding insn 3594 to worklist
  Adding insn 3592 to worklist
  Adding insn 3591 to worklist
  Adding insn 3590 to worklist
processing block 261 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
  Adding insn 4328 to worklist
  Adding insn 4322 to worklist
  Adding insn 4321 to worklist
  Adding insn 258 to worklist
processing block 260 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3582 to worklist
processing block 259 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3577 to worklist
processing block 257 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3574 to worklist
  Adding insn 3572 to worklist
processing block 291 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 255 to worklist
processing block 279 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 4327 to worklist
  Adding insn 4326 to worklist
  Adding insn 4325 to worklist
  Adding insn 3790 to worklist
  Adding insn 3788 to worklist
  Adding insn 3787 to worklist
  Adding insn 3786 to worklist
processing block 290 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 280 to worklist
processing block 281 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 254 to worklist
processing block 280 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 270 to worklist
processing block 256 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 253 to worklist
  Adding insn 4353 to worklist
processing block 255 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 251 to worklist
  Adding insn 4354 to worklist
processing block 254 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3559 to worklist
  Adding insn 3558 to worklist
  Adding insn 3557 to worklist
  Adding insn 3556 to worklist
  Adding insn 3555 to worklist
processing block 253 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
processing block 252 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3543 to worklist
processing block 251 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
processing block 250 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3536 to worklist
processing block 292 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3888 to worklist
  Adding insn 3885 to worklist
processing block 249 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3530 to worklist
  Adding insn 3529 to worklist
  Adding insn 3528 to worklist
processing block 294 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 249 to worklist
  Adding insn 4352 to worklist
processing block 293 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3898 to worklist
  Adding insn 271 to worklist
  Adding insn 3897 to worklist
processing block 248 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3525 to worklist
  Adding insn 3524 to worklist
  Adding insn 3523 to worklist
processing block 247 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3520 to worklist
  Adding insn 247 to worklist
  Adding insn 3519 to worklist
  Adding insn 3517 to worklist
  Adding insn 3515 to worklist
  Adding insn 3514 to worklist
processing block 246 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3510 to worklist
  Adding insn 3509 to worklist
  Adding insn 3507 to worklist
  Adding insn 3506 to worklist
  Adding insn 3505 to worklist
processing block 245 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3501 to worklist
  Adding insn 3500 to worklist
  Adding insn 3498 to worklist
  Adding insn 3496 to worklist
  Adding insn 3495 to worklist
  Adding insn 3494 to worklist
  Adding insn 3492 to worklist
  Adding insn 3491 to worklist
processing block 244 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3488 to worklist
  Adding insn 246 to worklist
  Adding insn 3487 to worklist
  Adding insn 3485 to worklist
  Adding insn 3484 to worklist
  Adding insn 3483 to worklist
  Adding insn 3480 to worklist
  Adding insn 3478 to worklist
processing block 243 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
  Adding insn 3550 to worklist
  Adding insn 252 to worklist
  Adding insn 248 to worklist
  Adding insn 245 to worklist
  Adding insn 244 to worklist
  Adding insn 3471 to worklist
  Adding insn 3470 to worklist
  Adding insn 3469 to worklist
  Adding insn 3468 to worklist
  Adding insn 3467 to worklist
  Adding insn 3466 to worklist
processing block 295 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 263 to worklist
  Adding insn 3907 to worklist
processing block 296 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3917 to worklist
  Adding insn 257 to worklist
  Adding insn 256 to worklist
processing block 241 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3423 to worklist
  Adding insn 3422 to worklist
processing block 242 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3459 to worklist
  Adding insn 3458 to worklist
  Adding insn 3457 to worklist
  Adding insn 3454 to worklist
  Adding insn 3453 to worklist
  Adding insn 3452 to worklist
  Adding insn 3451 to worklist
processing block 289 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3869 to worklist
processing block 239 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3411 to worklist
  Adding insn 3409 to worklist
  Adding insn 3405 to worklist
processing block 221 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3242 to worklist
  Adding insn 3241 to worklist
  Adding insn 3240 to worklist
  Adding insn 3239 to worklist
  Adding insn 3238 to worklist
  Adding insn 3237 to worklist
  Adding insn 3236 to worklist
  Adding insn 3235 to worklist
  Adding insn 3234 to worklist
  Adding insn 3232 to worklist
  Adding insn 3231 to worklist
processing block 219 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3222 to worklist
  Adding insn 3221 to worklist
processing block 227 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3301 to worklist
  Adding insn 3300 to worklist
  Adding insn 3299 to worklist
  Adding insn 3298 to worklist
  Adding insn 3297 to worklist
  Adding insn 3296 to worklist
  Adding insn 3295 to worklist
  Adding insn 3294 to worklist
  Adding insn 3293 to worklist
  Adding insn 3291 to worklist
  Adding insn 3290 to worklist
processing block 328 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 229 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 242 to worklist
  Adding insn 3308 to worklist
processing block 228 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3305 to worklist
processing block 232 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3341 to worklist
  Adding insn 3340 to worklist
  Adding insn 3339 to worklist
  Adding insn 3338 to worklist
  Adding insn 3337 to worklist
  Adding insn 3336 to worklist
  Adding insn 3335 to worklist
  Adding insn 3334 to worklist
  Adding insn 3333 to worklist
  Adding insn 3331 to worklist
  Adding insn 3330 to worklist
processing block 237 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 3380 to worklist
  Adding insn 3379 to worklist
  Adding insn 3378 to worklist
  Adding insn 3377 to worklist
  Adding insn 3376 to worklist
  Adding insn 3375 to worklist
  Adding insn 3374 to worklist
  Adding insn 3373 to worklist
  Adding insn 3372 to worklist
  Adding insn 3370 to worklist
  Adding insn 3369 to worklist
processing block 236 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 243 to worklist
  Adding insn 3364 to worklist
processing block 235 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3361 to worklist
  Adding insn 3360 to worklist
processing block 238 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3397 to worklist
  Adding insn 3395 to worklist
  Adding insn 3394 to worklist
processing block 233 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3354 to worklist
  Adding insn 3348 to worklist
processing block 231 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3327 to worklist
processing block 230 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3324 to worklist
  Adding insn 3322 to worklist
  Adding insn 3321 to worklist
  Adding insn 3320 to worklist
  Adding insn 3313 to worklist
processing block 226 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 241 to worklist
  Adding insn 240 to worklist
processing block 225 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3283 to worklist
  Adding insn 3278 to worklist
processing block 278 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 269 to worklist
processing block 224 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3275 to worklist
processing block 223 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3267 to worklist
  Adding insn 3266 to worklist
  Adding insn 3264 to worklist
  Adding insn 3263 to worklist
  Adding insn 3262 to worklist
  Adding insn 3260 to worklist
  Adding insn 3259 to worklist
processing block 277 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 268 to worklist
processing block 222 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3252 to worklist
  Adding insn 3248 to worklist
processing block 220 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3228 to worklist
processing block 218 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 239 to worklist
  Adding insn 238 to worklist
  Adding insn 237 to worklist
processing block 327 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
processing block 217 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3215 to worklist
  Adding insn 3214 to worklist
  Adding insn 3212 to worklist
  Adding insn 3211 to worklist
  Adding insn 3210 to worklist
  Adding insn 3209 to worklist
processing block 216 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3204 to worklist
processing block 215 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3200 to worklist
  Adding insn 3199 to worklist
processing block 214 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 235 to worklist
  Adding insn 234 to worklist
processing block 213 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3185 to worklist
  Adding insn 3184 to worklist
  Adding insn 3183 to worklist
  Adding insn 3182 to worklist
processing block 212 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3177 to worklist
  Adding insn 3176 to worklist
processing block 210 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
  Adding insn 3173 to worklist
  Adding insn 3171 to worklist
  Adding insn 3170 to worklist
  Adding insn 3166 to worklist
  Adding insn 3165 to worklist
  Adding insn 3163 to worklist
  Adding insn 3161 to worklist
  Adding insn 3159 to worklist
processing block 209 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
  Adding insn 4202 to worklist
  Adding insn 4201 to worklist
  Adding insn 233 to worklist
  Adding insn 3156 to worklist
  Adding insn 3155 to worklist
  Adding insn 3154 to worklist
  Adding insn 3152 to worklist
  Adding insn 3150 to worklist
  Adding insn 3149 to worklist
  Adding insn 3147 to worklist
  Adding insn 3145 to worklist
processing block 208 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3142 to worklist
  Adding insn 3141 to worklist
  Adding insn 3140 to worklist
  Adding insn 3139 to worklist
  Adding insn 3138 to worklist
  Adding insn 3137 to worklist
processing block 206 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3133 to worklist
processing block 203 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 229 to worklist
  Adding insn 3127 to worklist
  Adding insn 3126 to worklist
  Adding insn 3125 to worklist
  Adding insn 3124 to worklist
processing block 205 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 231 to worklist
processing block 202 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3120 to worklist
  Adding insn 3116 to worklist
  Adding insn 3115 to worklist
  Adding insn 3114 to worklist
  Adding insn 3113 to worklist
processing block 204 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 230 to worklist
processing block 201 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3109 to worklist
  Adding insn 3105 to worklist
  Adding insn 3104 to worklist
  Adding insn 3103 to worklist
  Adding insn 3102 to worklist
processing block 207 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 232 to worklist
processing block 200 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3098 to worklist
  Adding insn 4320 to worklist
  Adding insn 4319 to worklist
  Adding insn 3092 to worklist
  Adding insn 3091 to worklist
  Adding insn 3090 to worklist
  Adding insn 3089 to worklist
  Adding insn 3088 to worklist
  Adding insn 3087 to worklist
  Adding insn 3086 to worklist
processing block 199 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3081 to worklist
  Adding insn 3074 to worklist
  Adding insn 3073 to worklist
processing block 197 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 666 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3061 to worklist
  Adding insn 3058 to worklist
  Adding insn 3056 to worklist
  Adding insn 3053 to worklist
  Adding insn 3049 to worklist
  Adding insn 3046 to worklist
processing block 196 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3041 to worklist
  Adding insn 3040 to worklist
processing block 195 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
  Adding insn 3037 to worklist
  Adding insn 3035 to worklist
  Adding insn 3025 to worklist
  Adding insn 3020 to worklist
processing block 194 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 3016 to worklist
  Adding insn 3015 to worklist
  Adding insn 3014 to worklist
  Adding insn 3013 to worklist
  Adding insn 3012 to worklist
  Adding insn 3009 to worklist
  Adding insn 3008 to worklist
processing block 326 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
processing block 193 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
  Adding insn 2999 to worklist
  Adding insn 2998 to worklist
processing block 191 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
  Adding insn 2985 to worklist
  Adding insn 2983 to worklist
  Adding insn 2982 to worklist
  Adding insn 2981 to worklist
  Adding insn 2980 to worklist
  Adding insn 2979 to worklist
  Adding insn 2978 to worklist
  Adding insn 2977 to worklist
  Adding insn 2976 to worklist
processing block 332 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
processing block 288 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 3850 to worklist
processing block 190 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 2971 to worklist
  Adding insn 2970 to worklist
  Adding insn 2966 to worklist
  Adding insn 2965 to worklist
  Adding insn 2964 to worklist
  Adding insn 2961 to worklist
  Adding insn 2960 to worklist
  Adding insn 2959 to worklist
  Adding insn 2958 to worklist
  Adding insn 2955 to worklist
  Adding insn 2954 to worklist
  Adding insn 2952 to worklist
  Adding insn 2950 to worklist
  Adding insn 2949 to worklist
  Adding insn 2948 to worklist
  Adding insn 2945 to worklist
  Adding insn 2944 to worklist
  Adding insn 2942 to worklist
  Adding insn 2941 to worklist
  Adding insn 2940 to worklist
  Adding insn 2938 to worklist
  Adding insn 2936 to worklist
  Adding insn 2935 to worklist
  Adding insn 2934 to worklist
  Adding insn 2933 to worklist
  Adding insn 2932 to worklist
  Adding insn 2926 to worklist
  Adding insn 2925 to worklist
  Adding insn 2924 to worklist
processing block 189 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 2919 to worklist
  Adding insn 2918 to worklist
  Adding insn 2917 to worklist
  Adding insn 2916 to worklist
  Adding insn 2915 to worklist
  Adding insn 2914 to worklist
  Adding insn 2913 to worklist
processing block 325 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
processing block 188 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 2906 to worklist
  Adding insn 2905 to worklist
processing block 186 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 2885 to worklist
  Adding insn 2884 to worklist
  Adding insn 2879 to worklist
processing block 184 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 613 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 2867 to worklist
  Adding insn 2864 to worklist
  Adding insn 2862 to worklist
  Adding insn 2859 to worklist
  Adding insn 2858 to worklist
  Adding insn 2854 to worklist
processing block 183 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
  Adding insn 2951 to worklist
  Adding insn 2912 to worklist
  Adding insn 2911 to worklist
  Adding insn 2883 to worklist
  Adding insn 2857 to worklist
processing block 176 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
  Adding insn 2736 to worklist
  Adding insn 227 to worklist
  Adding insn 2735 to worklist
  Adding insn 2734 to worklist
processing block 175 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
  Adding insn 2729 to worklist
processing block 171 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
  Adding insn 2683 to worklist
  Adding insn 2678 to worklist
  Adding insn 2677 to worklist
  Adding insn 2676 to worklist
  Adding insn 2675 to worklist
  Adding insn 2674 to worklist
  Adding insn 2672 to worklist
  Adding insn 2671 to worklist
  Adding insn 2670 to worklist
processing block 172 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2701 to worklist
  Adding insn 2697 to worklist
  Adding insn 2696 to worklist
  Adding insn 2695 to worklist
  Adding insn 2693 to worklist
  Adding insn 2692 to worklist
  Adding insn 2691 to worklist
processing block 170 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
  Adding insn 2665 to worklist
processing block 323 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
processing block 169 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
  Adding insn 2649 to worklist
processing block 168 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1710 1853 1854 1859 1862
  Adding insn 2645 to worklist
processing block 167 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 2642 to worklist
processing block 324 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
processing block 174 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
  Adding insn 2710 to worklist
processing block 173 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1710 1853 1854 1859 1862
  Adding insn 2706 to worklist
processing block 166 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 2638 to worklist
processing block 153 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
  Adding insn 2632 to worklist
  Adding insn 2626 to worklist
  Adding insn 2624 to worklist
  Adding insn 2608 to worklist
  Adding insn 2605 to worklist
  Adding insn 2523 to worklist
  Adding insn 2482 to worklist
  Adding insn 2480 to worklist
  Adding insn 2452 to worklist
  Adding insn 221 to worklist
  Adding insn 220 to worklist
  Adding insn 219 to worklist
  Adding insn 2442 to worklist
  Adding insn 2439 to worklist
  Adding insn 2436 to worklist
  Adding insn 2433 to worklist
  Adding insn 2430 to worklist
  Adding insn 2429 to worklist
  Adding insn 2427 to worklist
  Adding insn 2426 to worklist
processing block 152 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
  Adding insn 2422 to worklist
processing block 148 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
  Adding insn 2409 to worklist
  Adding insn 217 to worklist
  Adding insn 2392 to worklist
  Adding insn 2389 to worklist
  Adding insn 2388 to worklist
processing block 147 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
  Adding insn 2384 to worklist
processing block 145 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
  Adding insn 216 to worklist
  Adding insn 2370 to worklist
  Adding insn 2368 to worklist
  Adding insn 2367 to worklist
  Adding insn 2364 to worklist
processing block 179 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2806 to worklist
  Adding insn 2804 to worklist
  Adding insn 2803 to worklist
  Adding insn 2802 to worklist
processing block 181 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2841 to worklist
  Adding insn 2839 to worklist
  Adding insn 2838 to worklist
  Adding insn 2837 to worklist
processing block 182 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
  Adding insn 2846 to worklist
processing block 180 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1710 1853 1854 1859
  Adding insn 2834 to worklist
  Adding insn 2830 to worklist
  Adding insn 2827 to worklist
  Adding insn 2826 to worklist
  Adding insn 2825 to worklist
  Adding insn 2824 to worklist
  Adding insn 2816 to worklist
  Adding insn 2815 to worklist
  Adding insn 2813 to worklist
  Adding insn 2812 to worklist
processing block 178 lr out =  0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1710 1853 1854 1859
  Adding insn 2799 to worklist
  Adding insn 2795 to worklist
  Adding insn 2793 to worklist
  Adding insn 2792 to worklist
processing block 144 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1710 1853 1854 1859 1862
  Adding insn 2359 to worklist
  Adding insn 2358 to worklist
  Adding insn 2357 to worklist
processing block 142 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2336 to worklist
processing block 141 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
  Adding insn 2332 to worklist
  Adding insn 2331 to worklist
  Adding insn 2330 to worklist
  Adding insn 2328 to worklist
  Adding insn 2327 to worklist
  Adding insn 2326 to worklist
processing block 319 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
processing block 140 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
  Adding insn 2321 to worklist
  Adding insn 2320 to worklist
  Adding insn 2314 to worklist
  Adding insn 2311 to worklist
  Adding insn 2309 to worklist
  Adding insn 2308 to worklist
  Adding insn 2305 to worklist
  Adding insn 2302 to worklist
  Adding insn 2301 to worklist
  Adding insn 2300 to worklist
processing block 139 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2295 to worklist
  Adding insn 2294 to worklist
  Adding insn 2293 to worklist
  Adding insn 2291 to worklist
  Adding insn 2290 to worklist
  Adding insn 2289 to worklist
processing block 318 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
processing block 138 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2284 to worklist
  Adding insn 2283 to worklist
processing block 132 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2221 to worklist
  Adding insn 2220 to worklist
  Adding insn 2219 to worklist
  Adding insn 2217 to worklist
  Adding insn 2216 to worklist
  Adding insn 2215 to worklist
processing block 317 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
processing block 131 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2206 to worklist
  Adding insn 2205 to worklist
processing block 85 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 1409 to worklist
  Adding insn 1406 to worklist
  Adding insn 1405 to worklist
  Adding insn 1404 to worklist
  Adding insn 1403 to worklist
  Adding insn 1402 to worklist
  Adding insn 1401 to worklist
  Adding insn 1396 to worklist
  Adding insn 1389 to worklist
  Adding insn 1386 to worklist
  Adding insn 1385 to worklist
  Adding insn 1384 to worklist
  Adding insn 1383 to worklist
  Adding insn 1378 to worklist
  Adding insn 1376 to worklist
  Adding insn 1375 to worklist
processing block 101 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 106 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 202 to worklist
  Adding insn 201 to worklist
  Adding insn 200 to worklist
  Adding insn 199 to worklist
processing block 117 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 1936 to worklist
  Adding insn 1935 to worklist
  Adding insn 1934 to worklist
  Adding insn 1933 to worklist
  Adding insn 1932 to worklist
  Adding insn 1931 to worklist
  Adding insn 1930 to worklist
  Adding insn 1929 to worklist
  Adding insn 1928 to worklist
  Adding insn 1926 to worklist
  Adding insn 1925 to worklist
processing block 286 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 100 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 98 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1720 to worklist
  Adding insn 1709 to worklist
  Adding insn 1708 to worklist
  Adding insn 1706 to worklist
  Adding insn 1704 to worklist
  Adding insn 1703 to worklist
  Adding insn 1702 to worklist
  Adding insn 1701 to worklist
  Adding insn 1700 to worklist
  Adding insn 1698 to worklist
processing block 123 lr out =  31 [sp] 64 [sfp] 65 [ap]
processing block 125 lr out =  31 [sp] 64 [sfp] 65 [ap]
  Adding insn 2052 to worklist
  Adding insn 2051 to worklist
  Adding insn 2050 to worklist
  Adding insn 2049 to worklist
  Adding insn 2048 to worklist
  Adding insn 2047 to worklist
  Adding insn 2046 to worklist
  Adding insn 2045 to worklist
  Adding insn 2044 to worklist
  Adding insn 2043 to worklist
processing block 128 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 2163 to worklist
  Adding insn 2161 to worklist
processing block 127 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 2132 to worklist
  Adding insn 2131 to worklist
  Adding insn 2128 to worklist
  Adding insn 2127 to worklist
  Adding insn 2124 to worklist
  Adding insn 2123 to worklist
  Adding insn 2122 to worklist
  Adding insn 2121 to worklist
  Adding insn 2119 to worklist
  Adding insn 2118 to worklist
  Adding insn 2117 to worklist
  Adding insn 2116 to worklist
  Adding insn 2115 to worklist
  Adding insn 2113 to worklist
  Adding insn 2112 to worklist
  Adding insn 2111 to worklist
  Adding insn 2110 to worklist
  Adding insn 2109 to worklist
  Adding insn 2107 to worklist
  Adding insn 2106 to worklist
processing block 126 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 2101 to worklist
  Adding insn 2100 to worklist
  Adding insn 2097 to worklist
  Adding insn 2096 to worklist
  Adding insn 2093 to worklist
  Adding insn 2092 to worklist
  Adding insn 2091 to worklist
  Adding insn 2090 to worklist
  Adding insn 2088 to worklist
  Adding insn 2087 to worklist
  Adding insn 2086 to worklist
  Adding insn 2085 to worklist
  Adding insn 2084 to worklist
  Adding insn 2082 to worklist
  Adding insn 2081 to worklist
  Adding insn 2080 to worklist
  Adding insn 2079 to worklist
  Adding insn 2078 to worklist
  Adding insn 2076 to worklist
  Adding insn 2075 to worklist
  Adding insn 2071 to worklist
processing block 124 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 2040 to worklist
  Adding insn 2039 to worklist
  Adding insn 2037 to worklist
  Adding insn 2036 to worklist
  Adding insn 2033 to worklist
  Adding insn 2032 to worklist
  Adding insn 2031 to worklist
  Adding insn 2030 to worklist
  Adding insn 2028 to worklist
  Adding insn 2027 to worklist
  Adding insn 2026 to worklist
  Adding insn 2025 to worklist
  Adding insn 2024 to worklist
  Adding insn 2022 to worklist
  Adding insn 2021 to worklist
  Adding insn 2020 to worklist
  Adding insn 2019 to worklist
  Adding insn 2018 to worklist
  Adding insn 2016 to worklist
  Adding insn 2015 to worklist
processing block 122 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 2000 to worklist
  Adding insn 1999 to worklist
  Adding insn 1997 to worklist
  Adding insn 1996 to worklist
  Adding insn 1995 to worklist
  Adding insn 1994 to worklist
  Adding insn 1991 to worklist
  Adding insn 1990 to worklist
  Adding insn 1989 to worklist
  Adding insn 1988 to worklist
  Adding insn 1986 to worklist
  Adding insn 1985 to worklist
  Adding insn 1984 to worklist
  Adding insn 1983 to worklist
  Adding insn 1982 to worklist
  Adding insn 1980 to worklist
  Adding insn 1979 to worklist
  Adding insn 1978 to worklist
  Adding insn 1977 to worklist
  Adding insn 1976 to worklist
  Adding insn 1974 to worklist
  Adding insn 1973 to worklist
  Adding insn 1967 to worklist
  Adding insn 1966 to worklist
processing block 121 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1905 1907
processing block 299 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 3969 to worklist
  Adding insn 3962 to worklist
  Adding insn 3961 to worklist
  Adding insn 3959 to worklist
processing block 287 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 281 to worklist
  Adding insn 3844 to worklist
  Adding insn 3843 to worklist
processing block 285 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 3830 to worklist
processing block 283 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 4390 to worklist
  Adding insn 4389 to worklist
processing block 116 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap]
processing block 119 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 4393 to worklist
  Adding insn 4392 to worklist
  Adding insn 1944 to worklist
processing block 120 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 4391 to worklist
  Adding insn 282 to worklist
  Adding insn 1949 to worklist
processing block 118 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1941 to worklist
processing block 115 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1916 to worklist
processing block 114 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 4398 to worklist
  Adding insn 4397 to worklist
processing block 284 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 4396 to worklist
  Adding insn 4395 to worklist
processing block 113 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1904 to worklist
  Adding insn 1902 to worklist
processing block 112 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1898 to worklist
  Adding insn 1897 to worklist
processing block 111 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1893 to worklist
  Adding insn 1891 to worklist
  Adding insn 1890 to worklist
  Adding insn 1888 to worklist
  Adding insn 1887 to worklist
  Adding insn 1886 to worklist
processing block 109 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 212 to worklist
  Adding insn 211 to worklist
  Adding insn 210 to worklist
  Adding insn 209 to worklist
  Adding insn 208 to worklist
  Adding insn 1874 to worklist
processing block 108 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1871 to worklist
  Adding insn 1868 to worklist
  Adding insn 1858 to worklist
  Adding insn 1857 to worklist
  Adding insn 1855 to worklist
  Adding insn 1853 to worklist
  Adding insn 1852 to worklist
  Adding insn 1851 to worklist
  Adding insn 1850 to worklist
  Adding insn 1849 to worklist
  Adding insn 1847 to worklist
  Adding insn 1846 to worklist
processing block 107 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1842 to worklist
  Adding insn 1822 to worklist
  Adding insn 1821 to worklist
  Adding insn 1819 to worklist
  Adding insn 1817 to worklist
  Adding insn 1816 to worklist
  Adding insn 1815 to worklist
  Adding insn 1814 to worklist
  Adding insn 1813 to worklist
  Adding insn 1811 to worklist
processing block 105 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
processing block 110 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 207 to worklist
  Adding insn 206 to worklist
  Adding insn 205 to worklist
  Adding insn 204 to worklist
  Adding insn 203 to worklist
  Adding insn 1879 to worklist
processing block 104 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 1800 to worklist
  Adding insn 1789 to worklist
  Adding insn 1788 to worklist
  Adding insn 1786 to worklist
  Adding insn 1784 to worklist
  Adding insn 1783 to worklist
  Adding insn 1782 to worklist
  Adding insn 1781 to worklist
  Adding insn 1780 to worklist
  Adding insn 1778 to worklist
  Adding insn 1777 to worklist
processing block 103 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
  Adding insn 273 to worklist
  Adding insn 1903 to worklist
  Adding insn 277 to worklist
  Adding insn 276 to worklist
  Adding insn 1889 to worklist
  Adding insn 1885 to worklist
  Adding insn 1841 to worklist
  Adding insn 1799 to worklist
  Adding insn 1779 to worklist
  Adding insn 1776 to worklist
  Adding insn 198 to worklist
  Adding insn 197 to worklist
  Adding insn 196 to worklist
  Adding insn 1755 to worklist
  Adding insn 1754 to worklist
  Adding insn 1753 to worklist
processing block 96 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 1666 to worklist
  Adding insn 1659 to worklist
  Adding insn 1655 to worklist
  Adding insn 1654 to worklist
  Adding insn 1652 to worklist
  Adding insn 1650 to worklist
  Adding insn 1649 to worklist
  Adding insn 1648 to worklist
  Adding insn 1647 to worklist
  Adding insn 1646 to worklist
  Adding insn 1645 to worklist
  Adding insn 1644 to worklist
processing block 95 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 1640 to worklist
  Adding insn 1639 to worklist
  Adding insn 1635 to worklist
processing block 89 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 214 to worklist
  Adding insn 213 to worklist
processing block 88 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 1571 to worklist
processing block 316 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
processing block 93 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
  Adding insn 1621 to worklist
  Adding insn 1616 to worklist
  Adding insn 1614 to worklist
processing block 92 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
  Adding insn 1610 to worklist
  Adding insn 1609 to worklist
  Adding insn 1608 to worklist
  Adding insn 1607 to worklist
  Adding insn 1604 to worklist
  Adding insn 1602 to worklist
  Adding insn 1601 to worklist
  Adding insn 1599 to worklist
  Adding insn 1597 to worklist
  Adding insn 1595 to worklist
  Adding insn 1594 to worklist
  Adding insn 1592 to worklist
  Adding insn 1590 to worklist
processing block 315 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
processing block 91 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
  Adding insn 1583 to worklist
  Adding insn 1581 to worklist
processing block 90 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
  Adding insn 1606 to worklist
  Adding insn 1605 to worklist
processing block 314 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
processing block 87 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 1545 to worklist
  Adding insn 195 to worklist
  Adding insn 1536 to worklist
processing block 130 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 2199 to worklist
  Adding insn 2197 to worklist
processing block 129 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 2168 to worklist
processing block 86 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
  Adding insn 2012 to worklist
  Adding insn 2011 to worklist
  Adding insn 1970 to worklist
  Adding insn 1969 to worklist
  Adding insn 1643 to worklist
  Adding insn 215 to worklist
  Adding insn 1527 to worklist
  Adding insn 1524 to worklist
  Adding insn 1523 to worklist
  Adding insn 1520 to worklist
  Adding insn 1516 to worklist
  Adding insn 1514 to worklist
  Adding insn 1510 to worklist
  Adding insn 1506 to worklist
  Adding insn 1505 to worklist
  Adding insn 1502 to worklist
  Adding insn 1498 to worklist
  Adding insn 1497 to worklist
  Adding insn 1496 to worklist
  Adding insn 1492 to worklist
  Adding insn 1488 to worklist
  Adding insn 1487 to worklist
  Adding insn 1486 to worklist
  Adding insn 1485 to worklist
  Adding insn 1469 to worklist
  Adding insn 1468 to worklist
  Adding insn 1458 to worklist
  Adding insn 1456 to worklist
  Adding insn 1455 to worklist
  Adding insn 1448 to worklist
  Adding insn 1447 to worklist
  Adding insn 1446 to worklist
  Adding insn 1445 to worklist
  Adding insn 1444 to worklist
  Adding insn 1443 to worklist
  Adding insn 1442 to worklist
  Adding insn 1441 to worklist
  Adding insn 1440 to worklist
  Adding insn 1428 to worklist
  Adding insn 1425 to worklist
  Adding insn 1424 to worklist
  Adding insn 1420 to worklist
  Adding insn 1419 to worklist
  Adding insn 1418 to worklist
  Adding insn 1417 to worklist
processing block 84 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
  Adding insn 1368 to worklist
  Adding insn 1367 to worklist
  Adding insn 1366 to worklist
processing block 83 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
  Adding insn 1361 to worklist
  Adding insn 1360 to worklist
  Adding insn 1359 to worklist
  Adding insn 1357 to worklist
  Adding insn 1356 to worklist
  Adding insn 1355 to worklist
processing block 313 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
processing block 82 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
  Adding insn 1350 to worklist
  Adding insn 1349 to worklist
processing block 134 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
  Adding insn 265 to worklist
  Adding insn 2241 to worklist
  Adding insn 2240 to worklist
  Adding insn 2239 to worklist
processing block 136 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
  Adding insn 266 to worklist
  Adding insn 2270 to worklist
  Adding insn 2269 to worklist
  Adding insn 2268 to worklist
processing block 137 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
  Adding insn 4200 to worklist
  Adding insn 2276 to worklist
processing block 135 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1710 1853 1854 1862
  Adding insn 2265 to worklist
  Adding insn 2261 to worklist
  Adding insn 2258 to worklist
  Adding insn 2257 to worklist
  Adding insn 2250 to worklist
  Adding insn 2249 to worklist
processing block 133 lr out =  0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1710 1853 1854 1862
  Adding insn 2236 to worklist
  Adding insn 2232 to worklist
  Adding insn 2230 to worklist
  Adding insn 2229 to worklist
processing block 81 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 246 1143 1710 1853 1854 1862
  Adding insn 1344 to worklist
  Adding insn 1343 to worklist
processing block 79 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1710 1853 1854 1862
  Adding insn 1324 to worklist
processing block 77 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1710 1853 1854 1862
  Adding insn 1307 to worklist
  Adding insn 1305 to worklist
  Adding insn 1304 to worklist
  Adding insn 1303 to worklist
  Adding insn 1285 to worklist
  Adding insn 1284 to worklist
  Adding insn 1274 to worklist
  Adding insn 1273 to worklist
  Adding insn 1272 to worklist
  Adding insn 1271 to worklist
  Adding insn 1255 to worklist
  Adding insn 1254 to worklist
  Adding insn 1253 to worklist
  Adding insn 1251 to worklist
  Adding insn 1247 to worklist
  Adding insn 1246 to worklist
  Adding insn 1242 to worklist
processing block 276 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
  Adding insn 194 to worklist
processing block 76 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
  Adding insn 1236 to worklist
processing block 75 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
  Adding insn 1232 to worklist
  Adding insn 1231 to worklist
  Adding insn 1229 to worklist
  Adding insn 1226 to worklist
  Adding insn 1225 to worklist
  Adding insn 1222 to worklist
  Adding insn 1218 to worklist
processing block 312 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1710 1853 1854
processing block 74 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1710 1853 1854
  Adding insn 1214 to worklist
  Adding insn 1213 to worklist
  Adding insn 1211 to worklist
  Adding insn 1210 to worklist
  Adding insn 1209 to worklist
  Adding insn 1206 to worklist
  Adding insn 1205 to worklist
  Adding insn 1204 to worklist
  Adding insn 1203 to worklist
  Adding insn 1201 to worklist
processing block 69 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1710 1854
  Adding insn 1083 to worklist
  Adding insn 1082 to worklist
processing block 68 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
  Adding insn 1076 to worklist
  Adding insn 1075 to worklist
processing block 67 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
  Adding insn 1070 to worklist
  Adding insn 1069 to worklist
processing block 66 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
  Adding insn 1064 to worklist
  Adding insn 1063 to worklist
  Adding insn 1062 to worklist
processing block 61 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 979 to worklist
  Adding insn 978 to worklist
  Adding insn 977 to worklist
  Adding insn 976 to worklist
  Adding insn 973 to worklist
  Adding insn 972 to worklist
  Adding insn 971 to worklist
  Adding insn 966 to worklist
  Adding insn 965 to worklist
processing block 62 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 999 to worklist
  Adding insn 998 to worklist
  Adding insn 997 to worklist
  Adding insn 996 to worklist
  Adding insn 993 to worklist
  Adding insn 992 to worklist
  Adding insn 991 to worklist
  Adding insn 986 to worklist
  Adding insn 985 to worklist
processing block 63 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 1019 to worklist
  Adding insn 1018 to worklist
  Adding insn 1017 to worklist
  Adding insn 1016 to worklist
  Adding insn 1013 to worklist
  Adding insn 1012 to worklist
  Adding insn 1011 to worklist
  Adding insn 1006 to worklist
  Adding insn 1005 to worklist
processing block 64 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 1039 to worklist
  Adding insn 1038 to worklist
  Adding insn 1037 to worklist
  Adding insn 1036 to worklist
  Adding insn 1033 to worklist
  Adding insn 1032 to worklist
  Adding insn 1031 to worklist
  Adding insn 1026 to worklist
  Adding insn 1025 to worklist
processing block 60 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
  Adding insn 958 to worklist
  Adding insn 957 to worklist
processing block 59 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015 1710
  Adding insn 955 to worklist
  Adding insn 954 to worklist
processing block 73 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 1195 to worklist
  Adding insn 1194 to worklist
  Adding insn 1193 to worklist
  Adding insn 1192 to worklist
  Adding insn 1186 to worklist
  Adding insn 1181 to worklist
  Adding insn 1180 to worklist
  Adding insn 1176 to worklist
  Adding insn 1171 to worklist
  Adding insn 1170 to worklist
  Adding insn 1166 to worklist
  Adding insn 1161 to worklist
  Adding insn 1160 to worklist
  Adding insn 1157 to worklist
  Adding insn 1154 to worklist
  Adding insn 1151 to worklist
  Adding insn 1146 to worklist
  Adding insn 1144 to worklist
  Adding insn 1143 to worklist
  Adding insn 1142 to worklist
  Adding insn 1140 to worklist
  Adding insn 1135 to worklist
  Adding insn 1133 to worklist
  Adding insn 1132 to worklist
  Adding insn 1131 to worklist
  Adding insn 1129 to worklist
  Adding insn 1124 to worklist
  Adding insn 1122 to worklist
  Adding insn 1121 to worklist
  Adding insn 1120 to worklist
processing block 72 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 4199 to worklist
processing block 71 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
  Adding insn 1117 to worklist
processing block 58 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
  Adding insn 951 to worklist
processing block 56 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
  Adding insn 943 to worklist
processing block 55 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 940 to worklist
  Adding insn 937 to worklist
  Adding insn 935 to worklist
  Adding insn 934 to worklist
  Adding insn 933 to worklist
processing block 6 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
  Adding insn 322 to worklist
  Adding insn 321 to worklist
  Adding insn 914 to worklist
  Adding insn 913 to worklist
  Adding insn 932 to worklist
  Adding insn 4198 to worklist
  Adding insn 193 to worklist
  Adding insn 192 to worklist
  Adding insn 191 to worklist
processing block 5 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
  Adding insn 311 to worklist
  Adding insn 309 to worklist
processing block 301 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
processing block 4 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
  Adding insn 306 to worklist
  Adding insn 305 to worklist
  Adding insn 303 to worklist
  Adding insn 302 to worklist
  Adding insn 301 to worklist
processing block 3 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
  Adding insn 4197 to worklist
processing block 2 lr out =  29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
  Adding insn 289 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
DCE: Deleting insn 4379
deleting insn with uid = 4379.
DCE: Deleting insn 4378
deleting insn with uid = 4378.
df_worklist_dataflow_doublequeue:n_basic_blocks 324 n_edges 458 count 623 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 324 n_edges 458 count 527 (  1.6)
SET hash table (895 buckets, 487 entries)
Index 0 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 1 (hash value 839)
  (reg/f:DI 839) := (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7f3c5d82eab0 *.LC1>)
Index 2 (hash value 840)
  (reg/f:DI 840) := (high:DI (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7f3c5d82eab0 *.LC1>))
Index 3 (hash value 293)
  (reg/f:DI 293 [ D.3800 ]) := (const_int 0 [0])
Index 4 (hash value 843)
  (reg:SI 843) := (const_int 1 [0x1])
Index 5 (hash value 842)
  (reg/f:DI 842) := (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
Index 6 (hash value 121)
  (reg/f:DI 1911) := (label_ref 324)
Index 7 (hash value 120)
  (reg/f:DI 1910) := (high:DI (label_ref 324))
Index 8 (hash value 119)
  (reg/f:DI 1909) := (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>)
Index 9 (hash value 118)
  (reg/f:DI 1908) := (high:DI (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>))
Index 10 (hash value 118)
  (reg/f:DI 1013) := (symbol_ref/f:DI ("*.LC27") [flags 0x82]  <var_decl 0x7f3c5d840870 *.LC27>)
Index 11 (hash value 74)
  (reg/f:DI 1864) := (high:DI (symbol_ref/f:DI ("*.LC27") [flags 0x82]  <var_decl 0x7f3c5d840870 *.LC27>))
Index 12 (hash value 360)
  (reg/v:SI 360 [ err ]) := (const_int 0 [0])
Index 13 (hash value 328)
  (reg/v:SI 328 [ nset ]) := (const_int 0 [0])
Index 14 (hash value 320)
  (reg/v:SI 320 [ whichset ]) := (const_int 0 [0])
Index 15 (hash value 849)
  (reg/f:DI 849) := (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>)
Index 16 (hash value 850)
  (reg/f:DI 850) := (high:DI (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>))
Index 17 (hash value 847)
  (reg/f:DI 847) := (symbol_ref/f:DI ("*.LC2") [flags 0x82]  <var_decl 0x7f3c5d82eb40 *.LC2>)
Index 18 (hash value 848)
  (reg/f:DI 848) := (high:DI (symbol_ref/f:DI ("*.LC2") [flags 0x82]  <var_decl 0x7f3c5d82eb40 *.LC2>))
Index 19 (hash value 855)
  (reg/f:DI 855) := (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>)
Index 20 (hash value 856)
  (reg/f:DI 856) := (high:DI (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>))
Index 21 (hash value 854)
  (reg:DF 854) := (const_double:DF 5.6999999999999995115018691649311222136020660400390625e-1 [0x0.91eb851eb851e8p+0])
Index 22 (hash value 852)
  (reg:DF 852) := (const_double:DF 1.90000000000000002220446049250313080847263336181640625e-1 [0x0.c28f5c28f5c29p-2])
Index 23 (hash value 851)
  (reg:DF 851) := (const_double:DF 5.00000000000000444089209850062616169452667236328125e-2 [0x0.cccccccccccdp-4])
Index 24 (hash value 859)
  (reg:SI 859) := (const_int 1 [0x1])
Index 25 (hash value 857)
  (reg/f:DI 857) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 26 (hash value 858)
  (reg/f:DI 858) := (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
Index 27 (hash value 862)
  (reg:SI 862) := (const_int 1 [0x1])
Index 28 (hash value 860)
  (reg/f:DI 860) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 29 (hash value 861)
  (reg/f:DI 861) := (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
Index 30 (hash value 866)
  (reg/f:DI 866) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 31 (hash value 867)
  (reg/f:DI 867) := (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
Index 32 (hash value 863)
  (reg/f:DI 863) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 33 (hash value 864)
  (reg/f:DI 864) := (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))
Index 34 (hash value 360)
  (reg/v:SI 360 [ err ]) := (const_int 1 [0x1])
Index 35 (hash value 870)
  (reg/f:DI 870) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 36 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 37 (hash value 868)
  (reg/f:DI 868) := (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>)
Index 38 (hash value 869)
  (reg/f:DI 869) := (high:DI (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>))
Index 39 (hash value 865)
  (reg/f:DI 865) := (const_int 0 [0])
Index 40 (hash value 875)
  (reg/f:DI 875) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 41 (hash value 876)
  (reg/f:DI 876) := (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
Index 42 (hash value 872)
  (reg/f:DI 872) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 43 (hash value 873)
  (reg/f:DI 873) := (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))
Index 44 (hash value 879)
  (reg/f:DI 879) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 45 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 46 (hash value 877)
  (reg/f:DI 877) := (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>)
Index 47 (hash value 878)
  (reg/f:DI 878) := (high:DI (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>))
Index 48 (hash value 874)
  (reg/f:DI 874) := (const_int 0 [0])
Index 49 (hash value 883)
  (reg/f:DI 883) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 50 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 51 (hash value 881)
  (reg/f:DI 881) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 52 (hash value 882)
  (reg/f:DI 882) := (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))
Index 53 (hash value 885)
  (reg:SI 885 [ *_125 ]) := (const_int 0 [0])
Index 54 (hash value 360)
  (reg/v:SI 360 [ err ]) := (const_int -1 [0xffffffffffffffff])
Index 55 (hash value 890)
  (reg/f:DI 890) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 56 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 57 (hash value 888)
  (reg/f:DI 888) := (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>)
Index 58 (hash value 889)
  (reg/f:DI 889) := (high:DI (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>))
Index 59 (hash value 892)
  (reg/f:DI 892) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 60 (hash value 2)
  (reg/f:DI 897) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 61 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 62 (hash value 0)
  (reg/f:DI 895) := (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>)
Index 63 (hash value 1)
  (reg/f:DI 896) := (high:DI (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>))
Index 64 (hash value 6)
  (reg/f:DI 901) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 65 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 66 (hash value 4)
  (reg/f:DI 899) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 67 (hash value 5)
  (reg/f:DI 900) := (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))
Index 68 (hash value 8)
  (reg:SI 903 [ *_133 ]) := (const_int 0 [0])
Index 69 (hash value 13)
  (reg/f:DI 908) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 70 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 71 (hash value 11)
  (reg/f:DI 906) := (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>)
Index 72 (hash value 12)
  (reg/f:DI 907) := (high:DI (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>))
Index 73 (hash value 15)
  (reg/f:DI 910) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 74 (hash value 20)
  (reg/f:DI 915) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 75 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 76 (hash value 18)
  (reg/f:DI 913) := (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>)
Index 77 (hash value 19)
  (reg/f:DI 914) := (high:DI (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>))
Index 78 (hash value 24)
  (reg/f:DI 919) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 79 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 80 (hash value 22)
  (reg/f:DI 917) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 81 (hash value 65)
  (reg/f:DI 1855) := (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))
Index 82 (hash value 26)
  (reg:SI 921 [ D.3797 ]) := (const_int 0 [0])
Index 83 (hash value 29)
  (reg/f:DI 924) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 84 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 85 (hash value 27)
  (reg/f:DI 922) := (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>)
Index 86 (hash value 28)
  (reg/f:DI 923) := (high:DI (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>))
Index 87 (hash value 31)
  (reg:SI 926 [ *_141 ]) := (const_int 0 [0])
Index 88 (hash value 36)
  (reg/f:DI 931) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 89 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 90 (hash value 34)
  (reg/f:DI 929) := (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>)
Index 91 (hash value 35)
  (reg/f:DI 930) := (high:DI (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>))
Index 92 (hash value 32)
  (reg/f:DI 927) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 93 (hash value 38)
  (reg/f:DI 933) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 94 (hash value 43)
  (reg/f:DI 938) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 95 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 96 (hash value 41)
  (reg/f:DI 936) := (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>)
Index 97 (hash value 42)
  (reg/f:DI 937) := (high:DI (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>))
Index 98 (hash value 47)
  (reg/f:DI 942) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 99 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 100 (hash value 45)
  (reg/f:DI 940) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 101 (hash value 65)
  (reg/f:DI 1855) := (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))
Index 102 (hash value 49)
  (reg:SI 944 [ D.3797 ]) := (const_int 0 [0])
Index 103 (hash value 52)
  (reg/f:DI 947) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 104 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 105 (hash value 50)
  (reg/f:DI 945) := (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>)
Index 106 (hash value 51)
  (reg/f:DI 946) := (high:DI (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>))
Index 107 (hash value 54)
  (reg:SI 949 [ *_155 ]) := (const_int 0 [0])
Index 108 (hash value 59)
  (reg/f:DI 954) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 109 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 110 (hash value 57)
  (reg/f:DI 952) := (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>)
Index 111 (hash value 58)
  (reg/f:DI 953) := (high:DI (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>))
Index 112 (hash value 55)
  (reg/f:DI 950) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 113 (hash value 61)
  (reg/f:DI 956) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 114 (hash value 66)
  (reg/f:DI 961) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 115 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 116 (hash value 64)
  (reg/f:DI 959) := (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>)
Index 117 (hash value 65)
  (reg/f:DI 960) := (high:DI (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>))
Index 118 (hash value 70)
  (reg/f:DI 965) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 119 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 120 (hash value 68)
  (reg/f:DI 963) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 121 (hash value 65)
  (reg/f:DI 1855) := (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))
Index 122 (hash value 72)
  (reg:SI 967 [ D.3797 ]) := (const_int 0 [0])
Index 123 (hash value 75)
  (reg/f:DI 970) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 124 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 125 (hash value 73)
  (reg/f:DI 968) := (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>)
Index 126 (hash value 74)
  (reg/f:DI 969) := (high:DI (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>))
Index 127 (hash value 77)
  (reg:SI 972 [ *_167 ]) := (const_int 0 [0])
Index 128 (hash value 82)
  (reg/f:DI 977) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 129 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 130 (hash value 80)
  (reg/f:DI 975) := (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>)
Index 131 (hash value 81)
  (reg/f:DI 976) := (high:DI (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>))
Index 132 (hash value 78)
  (reg/f:DI 973) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 133 (hash value 84)
  (reg/f:DI 979) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 134 (hash value 89)
  (reg/f:DI 984) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 135 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 136 (hash value 87)
  (reg/f:DI 982) := (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>)
Index 137 (hash value 88)
  (reg/f:DI 983) := (high:DI (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>))
Index 138 (hash value 93)
  (reg/f:DI 988) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 139 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 140 (hash value 91)
  (reg/f:DI 986) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 141 (hash value 65)
  (reg/f:DI 1855) := (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))
Index 142 (hash value 95)
  (reg:SI 990 [ D.3797 ]) := (const_int 0 [0])
Index 143 (hash value 98)
  (reg/f:DI 993) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 144 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 145 (hash value 96)
  (reg/f:DI 991) := (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>)
Index 146 (hash value 97)
  (reg/f:DI 992) := (high:DI (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>))
Index 147 (hash value 100)
  (reg:SI 995 [ *_179 ]) := (const_int 0 [0])
Index 148 (hash value 105)
  (reg/f:DI 1000) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 149 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 150 (hash value 103)
  (reg/f:DI 998) := (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>)
Index 151 (hash value 104)
  (reg/f:DI 999) := (high:DI (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>))
Index 152 (hash value 101)
  (reg/f:DI 996) := (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
Index 153 (hash value 107)
  (reg/f:DI 1002) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 154 (hash value 112)
  (reg/f:DI 1007) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 155 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 156 (hash value 110)
  (reg/f:DI 1005) := (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>)
Index 157 (hash value 111)
  (reg/f:DI 1006) := (high:DI (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>))
Index 158 (hash value 116)
  (reg/f:DI 1011) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 159 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 160 (hash value 294)
  (reg/v:SI 294 [ c ]) := (const_int -1 [0xffffffffffffffff])
Index 161 (hash value 328)
  (reg/v:SI 328 [ nset ]) := (const_int 3 [0x3])
Index 162 (hash value 121)
  (reg/f:DI 1016) := (label_ref 960)
Index 163 (hash value 122)
  (reg/f:DI 1017) := (high:DI (label_ref 960))
Index 164 (hash value 137)
  (reg:DF 1032) := (const_double:DF 1.0e+0 [0x0.8p+1])
Index 165 (hash value 123)
  (reg/f:DI 1018) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 166 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 167 (hash value 152)
  (reg:DF 1047) := (const_double:DF 1.0e+0 [0x0.8p+1])
Index 168 (hash value 138)
  (reg/f:DI 1033) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 169 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 170 (hash value 167)
  (reg:DF 1062) := (const_double:DF 1.0e+0 [0x0.8p+1])
Index 171 (hash value 153)
  (reg/f:DI 1048) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 172 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 173 (hash value 182)
  (reg:DF 1077) := (const_double:DF 1.0e+0 [0x0.8p+1])
Index 174 (hash value 168)
  (reg/f:DI 1063) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 175 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 176 (hash value 186)
  (reg/f:DI 1081) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 177 (hash value 183)
  (reg/f:DI 1078) := (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>)
Index 178 (hash value 184)
  (reg/f:DI 1079) := (high:DI (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>))
Index 179 (hash value 187)
  (reg/f:DI 1082) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 180 (hash value 207)
  (reg/f:DI 1102) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 181 (hash value 204)
  (reg/f:DI 1099) := (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>)
Index 182 (hash value 205)
  (reg/f:DI 1100) := (high:DI (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>))
Index 183 (hash value 198)
  (reg/f:DI 1093) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 184 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 185 (hash value 235)
  (reg:DF 1130) := (const_double:DF 1.0e+0 [0x0.8p+1])
Index 186 (hash value 208)
  (reg/f:DI 1103) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 187 (hash value 64)
  (reg/f:DI 1854) := (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))
Index 188 (hash value 243)
  (reg/f:DI 1138) := (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>)
Index 189 (hash value 244)
  (reg/f:DI 1139) := (high:DI (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>))
Index 190 (hash value 241)
  (reg/f:DI 1136) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 191 (hash value 63)
  (reg/f:DI 1853) := (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
Index 192 (hash value 240)
  (reg:DI 1135) := (const_int 1 [0x1])
Index 193 (hash value 286)
  (reg/f:DI 286 [ D.3800 ]) := (const_int 0 [0])
Index 194 (hash value 247)
  (reg:SI 1142 [ *_266 ]) := (const_int 0 [0])
Index 195 (hash value 285)
  (reg/f:DI 1180) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 196 (hash value 275)
  (reg/f:DI 1170) := (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
Index 197 (hash value 72)
  (reg/f:DI 1862) := (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
Index 198 (hash value 254)
  (reg/f:DI 1149) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (const_int 40 [0x28])))
Index 199 (hash value 248)
  (reg/f:DI 1143) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 200 (hash value 291)
  (reg/f:DI 1186) := (symbol_ref/f:DI ("*.LC32") [flags 0x82]  <var_decl 0x7f3c5d840b40 *.LC32>)
Index 201 (hash value 292)
  (reg/f:DI 1187) := (high:DI (symbol_ref/f:DI ("*.LC32") [flags 0x82]  <var_decl 0x7f3c5d840b40 *.LC32>))
Index 202 (hash value 289)
  (reg/f:DI 1184) := (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
Index 203 (hash value 290)
  (reg/f:DI 1185) := (high:DI (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))
Index 204 (hash value 287)
  (reg/f:DI 1182) := (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
Index 205 (hash value 288)
  (reg/f:DI 1183) := (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))
Index 206 (hash value 297)
  (reg/f:DI 1192) := (symbol_ref/f:DI ("*.LC33") [flags 0x82]  <var_decl 0x7f3c5d840bd0 *.LC33>)
Index 207 (hash value 298)
  (reg/f:DI 1193) := (high:DI (symbol_ref/f:DI ("*.LC33") [flags 0x82]  <var_decl 0x7f3c5d840bd0 *.LC33>))
Index 208 (hash value 295)
  (reg/f:DI 1190) := (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
Index 209 (hash value 296)
  (reg/f:DI 1191) := (high:DI (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))
Index 210 (hash value 293)
  (reg/f:DI 1188) := (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
Index 211 (hash value 294)
  (reg/f:DI 1189) := (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))
Index 212 (hash value 246)
  (reg/f:DI 246 [ D.3800 ]) := (const_int 0 [0])
Index 213 (hash value 303)
  (reg:SI 1198 [ VERBOSE ]) := (const_int 0 [0])
Index 214 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 215 (hash value 304)
  (reg/f:DI 1199) := (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>)
Index 216 (hash value 305)
  (reg/f:DI 1200) := (high:DI (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>))
Index 217 (hash value 308)
  (reg/f:DI 1203) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 218 (hash value 318)
  (reg/f:DI 1213) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 219 (hash value 316)
  (reg/f:DI 1211) := (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
Index 220 (hash value 69)
  (reg/f:DI 1859) := (high:DI (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))
Index 221 (hash value 116)
  (reg:DI 1906) := (const_int 3481428888784487333 [0x3050852102c843a5])
Index 222 (hash value 114)
  (reg:DI 1904) := (const_int 4979156007449604625 [0x4519840211493211])
Index 223 (hash value 113)
  (reg:DI 1903) := (const_int 107374182 [0x6666666])
Index 224 (hash value 435)
  (reg/v:DI 435 [ start_edge ]) := (const_int 0 [0])
Index 225 (hash value 576)
  (reg:DI 576 [ ivtmp.134 ]) := (reg/v/f:DI 430 [ edges ])
Index 226 (hash value 354)
  (reg:DI 1249) := (const_int 4294967295 [0xffffffff])
Index 227 (hash value 350)
  (reg:DI 1245) := (const_int 1 [0x1])
Index 228 (hash value 333)
  (reg/f:DI 1228) := (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
Index 229 (hash value 69)
  (reg/f:DI 1859) := (high:DI (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))
Index 230 (hash value 310)
  (reg:SI 1205 [ use_RMAT ]) := (const_int 0 [0])
Index 231 (hash value 460)
  (reg/v:SI 460 [ byte_index ]) := (const_int 8 [0x8])
Index 232 (hash value 266)
  (reg/v:DI 266 [ exponent_middle ]) := (reg/v:DI 435 [ start_edge ])
Index 233 (hash value 747)
  (reg/v:DI 747 [ base_src ]) := (const_int 0 [0])
Index 234 (hash value 443)
  (reg/v:DI 443 [ base_tgt ]) := (const_int 0 [0])
Index 235 (hash value 112)
  (reg/f:DI 1902) := (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>)
Index 236 (hash value 111)
  (reg/f:DI 1901) := (high:DI (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))
Index 237 (hash value 457)
  (reg/v:SI 457 [ val ]) := (const_int 0 [0])
Index 238 (hash value 266)
  (reg/v:DI 266 [ exponent_middle ]) := (const_int 0 [0])
Index 239 (hash value 378)
  (reg:DI 1273) := (const_int 2147483646 [0x7ffffffe])
Index 240 (hash value 382)
  (reg:DI 1277) := (const_int 8589934597 [0x200000005])
Index 241 (hash value 405)
  (reg/f:DI 1300) := (symbol_ref/f:DI ("*.LC36") [flags 0x82]  <var_decl 0x7f3c5d840e10 *.LC36>)
Index 242 (hash value 406)
  (reg/f:DI 1301) := (high:DI (symbol_ref/f:DI ("*.LC36") [flags 0x82]  <var_decl 0x7f3c5d840e10 *.LC36>))
Index 243 (hash value 403)
  (reg/f:DI 1298) := (symbol_ref/f:DI ("*.LC35") [flags 0x82]  <var_decl 0x7f3c5d840d80 *.LC35>)
Index 244 (hash value 404)
  (reg/f:DI 1299) := (high:DI (symbol_ref/f:DI ("*.LC35") [flags 0x82]  <var_decl 0x7f3c5d840d80 *.LC35>))
Index 245 (hash value 401)
  (reg/f:DI 1296) := (symbol_ref:DI ("__PRETTY_FUNCTION__.3503.lto_priv.8") [flags 0xc2]  <var_decl 0x7f3c5e2547e0 __PRETTY_FUNCTION__>)
Index 246 (hash value 402)
  (reg/f:DI 1297) := (high:DI (symbol_ref:DI ("__PRETTY_FUNCTION__.3503.lto_priv.8") [flags 0xc2]  <var_decl 0x7f3c5e2547e0 __PRETTY_FUNCTION__>))
Index 247 (hash value 110)
  (reg:DI 1900 [ D.3798 ]) := (const_int 1 [0x1])
Index 248 (hash value 109)
  (reg:SI 1899) := (const_int 5699 [0x1643])
Index 249 (hash value 108)
  (reg:DI 1898 [ D.3798 ]) := (const_int 0 [0])
Index 250 (hash value 107)
  (reg:DI 1897 [ D.3798 ]) := (const_int 1 [0x1])
Index 251 (hash value 106)
  (reg:SI 1896) := (const_int 10000 [0x2710])
Index 252 (hash value 105)
  (reg:SI 1895) := (const_int -776530087 [0xffffffffd1b71759])
Index 253 (hash value 102)
  (reg:DI 1892) := (const_int 2147483646 [0x7ffffffe])
Index 254 (hash value 418)
  (reg:DI 1313) := (const_int 7294 [0x1c7e])
Index 255 (hash value 411)
  (reg:DI 1306) := (const_int 8589934597 [0x200000005])
Index 256 (hash value 408)
  (reg:DI 1303) := (const_int 104480 [0x19820])
Index 257 (hash value 442)
  (reg/v:DI 442 [ nverts ]) := (reg/v:DI 290 [ nverts ])
Index 258 (hash value 469)
  (reg:DI 469 [ D.3802 ]) := (reg:DI 476 [ D.3802 ])
Index 259 (hash value 714)
  (reg:DI 714 [ D.3802 ]) := (reg:DI 826 [ D.3802 ])
Index 260 (hash value 750)
  (reg:DI 750 [ D.3802 ]) := (reg:DI 476 [ D.3802 ])
Index 261 (hash value 695)
  (reg:DI 695 [ D.3802 ]) := (reg:DI 469 [ D.3802 ])
Index 262 (hash value 750)
  (reg:DI 750 [ D.3802 ]) := (reg:DI 469 [ D.3802 ])
Index 263 (hash value 828)
  (reg:DI 828 [ D.3798 ]) := (reg:DI 1898 [ D.3798 ])
Index 264 (hash value 829)
  (reg:DI 829 [ D.3798 ]) := (reg:DI 1898 [ D.3798 ])
Index 265 (hash value 456)
  (reg/f:DI 1351) := (symbol_ref/f:DI ("*.LC38") [flags 0x82]  <var_decl 0x7f3c5d840f30 *.LC38>)
Index 266 (hash value 457)
  (reg/f:DI 1352) := (high:DI (symbol_ref/f:DI ("*.LC38") [flags 0x82]  <var_decl 0x7f3c5d840f30 *.LC38>))
Index 267 (hash value 454)
  (reg/f:DI 1349) := (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>)
Index 268 (hash value 455)
  (reg/f:DI 1350) := (high:DI (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>))
Index 269 (hash value 453)
  (reg/f:DI 1348) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
        (const_int 16 [0x10])))
Index 270 (hash value 450)
  (reg/f:DI 1345) := (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
Index 271 (hash value 451)
  (reg/f:DI 1346) := (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))
Index 272 (hash value 831)
  (reg:DI 831 [ D.3798 ]) := (reg:DI 1898 [ D.3798 ])
Index 273 (hash value 829)
  (reg:DI 829 [ D.3798 ]) := (reg:DI 1897 [ D.3798 ])
Index 274 (hash value 831)
  (reg:DI 831 [ D.3798 ]) := (reg/v:DI 442 [ nverts ])
Index 275 (hash value 442)
  (reg/v:DI 442 [ nverts ]) := (const_int 1 [0x1])
Index 276 (hash value 466)
  (reg:SI 1361) := (const_int 64 [0x40])
Index 277 (hash value 468)
  (reg:DI 1363 [ D.3802 ]) := (const_int 0 [0])
Index 278 (hash value 483)
  (reg/f:DI 1378) := (symbol_ref/f:DI ("*.LC39") [flags 0x82]  <var_decl 0x7f3c5d82ef30 *.LC39>)
Index 279 (hash value 484)
  (reg/f:DI 1379) := (high:DI (symbol_ref/f:DI ("*.LC39") [flags 0x82]  <var_decl 0x7f3c5d82ef30 *.LC39>))
Index 280 (hash value 481)
  (reg/f:DI 1376) := (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>)
Index 281 (hash value 482)
  (reg/f:DI 1377) := (high:DI (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>))
Index 282 (hash value 479)
  (reg/f:DI 1374) := (symbol_ref:DI ("__PRETTY_FUNCTION__.3549.lto_priv.17") [flags 0xc2]  <var_decl 0x7f3c5e254990 __PRETTY_FUNCTION__>)
Index 283 (hash value 480)
  (reg/f:DI 1375) := (high:DI (symbol_ref:DI ("__PRETTY_FUNCTION__.3549.lto_priv.17") [flags 0xc2]  <var_decl 0x7f3c5e254990 __PRETTY_FUNCTION__>))
Index 284 (hash value 478)
  (reg:DI 1373 [ D.3802 ]) := (const_int 0 [0])
Index 285 (hash value 493)
  (reg:DI 1388 [ D.3802 ]) := (const_int 0 [0])
Index 286 (hash value 502)
  (reg:DI 1397 [ D.3802 ]) := (const_int 0 [0])
Index 287 (hash value 503)
  (reg/f:DI 1398) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 288 (hash value 507)
  (reg:SI 1402 [ VERBOSE ]) := (const_int 0 [0])
Index 289 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 290 (hash value 508)
  (reg/f:DI 1403) := (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>)
Index 291 (hash value 509)
  (reg/f:DI 1404) := (high:DI (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>))
Index 292 (hash value 240)
  (reg:SI 240 [ D.3797 ]) := (const_int 1 [0x1])
Index 293 (hash value 512)
  (reg/f:DI 1407) := (symbol_ref/f:DI ("*.LC41") [flags 0x82]  <var_decl 0x7f3c5d881090 *.LC41>)
Index 294 (hash value 513)
  (reg/f:DI 1408) := (high:DI (symbol_ref/f:DI ("*.LC41") [flags 0x82]  <var_decl 0x7f3c5d881090 *.LC41>))
Index 295 (hash value 519)
  (reg/f:DI 1414) := (symbol_ref/f:DI ("*.LC42") [flags 0x82]  <var_decl 0x7f3c5d881120 *.LC42>)
Index 296 (hash value 520)
  (reg/f:DI 1415) := (high:DI (symbol_ref/f:DI ("*.LC42") [flags 0x82]  <var_decl 0x7f3c5d881120 *.LC42>))
Index 297 (hash value 69)
  (reg/f:DI 1859) := (high:DI (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))
Index 298 (hash value 523)
  (reg:SI 1418 [ VERBOSE ]) := (const_int 0 [0])
Index 299 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 300 (hash value 524)
  (reg/f:DI 1419) := (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>)
Index 301 (hash value 525)
  (reg/f:DI 1420) := (high:DI (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>))
Index 302 (hash value 530)
  (reg/f:DI 1425) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 303 (hash value 528)
  (reg/f:DI 1423) := (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
Index 304 (hash value 538)
  (reg:SI 1433 [ VERBOSE ]) := (const_int 0 [0])
Index 305 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 306 (hash value 539)
  (reg/f:DI 1434) := (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>)
Index 307 (hash value 540)
  (reg/f:DI 1435) := (high:DI (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>))
Index 308 (hash value 546)
  (reg/f:DI 1441) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 309 (hash value 543)
  (reg/f:DI 1438) := (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>)
Index 310 (hash value 544)
  (reg/f:DI 1439) := (high:DI (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>))
Index 311 (hash value 547)
  (reg/f:DI 1442) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 312 (hash value 566)
  (reg/v:SI 566 [ err ]) := (const_int 0 [0])
Index 313 (hash value 575)
  (reg/v:DI 575 [ k ]) := (const_int 0 [0])
Index 314 (hash value 571)
  (reg/f:DI 571 [ D.3800 ]) := (const_int 0 [0])
Index 315 (hash value 98)
  (reg:SI 1888) := (const_int 1 [0x1])
Index 316 (hash value 578)
  (reg/v:DI 578 [ k ]) := (const_int 0 [0])
Index 317 (hash value 552)
  (reg/f:DI 1447) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 318 (hash value 97)
  (reg:SI 1887 [ prng_state_store_z1_lsm.10 ]) := (const_int 1 [0x1])
Index 319 (hash value 92)
  (reg:DI 1882) := (const_int 104480 [0x19820])
Index 320 (hash value 91)
  (reg:DI 1881) := (const_int 2147483647 [0x7fffffff])
Index 321 (hash value 90)
  (reg:DI 1880) := (const_int 107374182 [0x6666666])
Index 322 (hash value 89)
  (reg:DI 1879) := (const_int 2147483646 [0x7ffffffe])
Index 323 (hash value 596)
  (reg/v:SI 596 [ m ]) := (const_int 0 [0])
Index 324 (hash value 791)
  (reg:SI 791 [ prng_state_store_z1_lsm.10 ]) := (const_int 0 [0])
Index 325 (hash value 788)
  (reg:DI 788 [ ivtmp.101 ]) := (const_int 0 [0])
Index 326 (hash value 560)
  (reg/f:DI 1455) := (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
Index 327 (hash value 558)
  (reg/f:DI 1453) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 328 (hash value 571)
  (reg/f:DI 1466) := (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
Index 329 (hash value 590)
  (reg/f:DI 1485) := (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
Index 330 (hash value 618)
  (reg/f:DI 1513) := (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
Index 331 (hash value 637)
  (reg:SI 1532 [ MEM[base: _112, index: ivtmp.101_1291, step: 4, offset: 0B] ]) := (const_int 0 [0])
Index 332 (hash value 596)
  (reg/v:SI 596 [ m ]) := (reg/v:SI 599 [ m ])
Index 333 (hash value 775)
  (reg:DI 775 [ prng_state_store_z3_lsm.15 ]) := (reg:DI 646 [ D.3802 ])
Index 334 (hash value 785)
  (reg:DI 785 [ prng_state_store_z4_lsm.13 ]) := (reg:DI 643 [ D.3802 ])
Index 335 (hash value 791)
  (reg:SI 791 [ prng_state_store_z1_lsm.10 ]) := (reg:SI 1887 [ prng_state_store_z1_lsm.10 ])
Index 336 (hash value 655)
  (reg/f:DI 1550) := (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
Index 337 (hash value 669)
  (reg/f:DI 1564) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 338 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 339 (hash value 665)
  (reg/f:DI 1560) := (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>)
Index 340 (hash value 666)
  (reg/f:DI 1561) := (high:DI (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>))
Index 341 (hash value 674)
  (reg/f:DI 1569) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 342 (hash value 671)
  (reg/f:DI 1566) := (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>)
Index 343 (hash value 672)
  (reg/f:DI 1567) := (high:DI (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>))
Index 344 (hash value 675)
  (reg/f:DI 1570) := (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
Index 345 (hash value 777)
  (reg:DI 777 [ ivtmp.94 ]) := (const_int 0 [0])
Index 346 (hash value 685)
  (reg/f:DI 1580) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 347 (hash value 240)
  (reg:SI 240 [ D.3797 ]) := (const_int 0 [0])
Index 348 (hash value 690)
  (reg/f:DI 1585) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 349 (hash value 688)
  (reg/f:DI 1583) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 350 (hash value 710)
  (reg/f:DI 1605) := (symbol_ref/f:DI ("*.LC50") [flags 0x82]  <var_decl 0x7f3c5d881480 *.LC50>)
Index 351 (hash value 711)
  (reg/f:DI 1606) := (high:DI (symbol_ref/f:DI ("*.LC50") [flags 0x82]  <var_decl 0x7f3c5d881480 *.LC50>))
Index 352 (hash value 718)
  (reg/f:DI 1613) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (const_int 112 [0x70])))
Index 353 (hash value 712)
  (reg/f:DI 1607) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 354 (hash value 719)
  (reg/f:DI 1614) := (symbol_ref/f:DI ("*.LC51") [flags 0x82]  <var_decl 0x7f3c5d881510 *.LC51>)
Index 355 (hash value 720)
  (reg/f:DI 1615) := (high:DI (symbol_ref/f:DI ("*.LC51") [flags 0x82]  <var_decl 0x7f3c5d881510 *.LC51>))
Index 356 (hash value 87)
  (reg/f:DI 1877) := (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>)
Index 357 (hash value 86)
  (reg/f:DI 1876) := (high:DI (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>))
Index 358 (hash value 721)
  (reg/f:DI 1616) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 359 (hash value 647)
  (reg/v/f:DI 647 [ bfs_tree ]) := (const_int 0 [0])
Index 360 (hash value 734)
  (reg/f:DI 1629) := (symbol_ref/f:DI ("*.LC52") [flags 0x82]  <var_decl 0x7f3c5d8815a0 *.LC52>)
Index 361 (hash value 735)
  (reg/f:DI 1630) := (high:DI (symbol_ref/f:DI ("*.LC52") [flags 0x82]  <var_decl 0x7f3c5d8815a0 *.LC52>))
Index 362 (hash value 732)
  (reg/f:DI 1627) := (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
Index 363 (hash value 733)
  (reg/f:DI 1628) := (high:DI (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))
Index 364 (hash value 731)
  (reg/f:DI 1626) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
        (const_int 32 [0x20])))
Index 365 (hash value 729)
  (reg/f:DI 1624) := (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
Index 366 (hash value 730)
  (reg/f:DI 1625) := (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))
Index 367 (hash value 738)
  (reg:SI 1633 [ VERBOSE ]) := (const_int 0 [0])
Index 368 (hash value 741)
  (reg/f:DI 1636) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 369 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 370 (hash value 769)
  (reg/f:DI 1664) := (symbol_ref:DI ("bfs_time.lto_priv.14") [flags 0xc2]  <var_decl 0x7f3c5e254240 bfs_time>)
Index 371 (hash value 770)
  (reg/f:DI 1665) := (high:DI (symbol_ref:DI ("bfs_time.lto_priv.14") [flags 0xc2]  <var_decl 0x7f3c5e254240 bfs_time>))
Index 372 (hash value 744)
  (reg/f:DI 1639) := (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
Index 373 (hash value 776)
  (reg/f:DI 1671) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 374 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 375 (hash value 774)
  (reg/f:DI 1669) := (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)
Index 376 (hash value 775)
  (reg/f:DI 1670) := (high:DI (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>))
Index 377 (hash value 779)
  (reg/f:DI 1674) := (symbol_ref/f:DI ("*.LC56") [flags 0x82]  <var_decl 0x7f3c5d881750 *.LC56>)
Index 378 (hash value 780)
  (reg/f:DI 1675) := (high:DI (symbol_ref/f:DI ("*.LC56") [flags 0x82]  <var_decl 0x7f3c5d881750 *.LC56>))
Index 379 (hash value 618)
  (reg/v:SI 618 [ err ]) := (const_int 0 [0])
Index 380 (hash value 783)
  (reg:SI 1678 [ VERBOSE ]) := (const_int 0 [0])
Index 381 (hash value 784)
  (reg/f:DI 1679) := (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>)
Index 382 (hash value 785)
  (reg/f:DI 1680) := (high:DI (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>))
Index 383 (hash value 746)
  (reg/v/f:DI 746 [ seen_edge ]) := (const_int 0 [0])
Index 384 (hash value 672)
  (reg:DI 672 [ ivtmp.84 ]) := (reg/v/f:DI 668 [ level ])
Index 385 (hash value 806)
  (reg/v:DI 806 [ k ]) := (const_int 3 [0x3])
Index 386 (hash value 742)
  (reg:DI 742 [ prologue_after_cost_adjust.32 ]) := (const_int 3 [0x3])
Index 387 (hash value 806)
  (reg/v:DI 806 [ k ]) := (const_int 1 [0x1])
Index 388 (hash value 742)
  (reg:DI 742 [ prologue_after_cost_adjust.32 ]) := (const_int 1 [0x1])
Index 389 (hash value 806)
  (reg/v:DI 806 [ k ]) := (const_int 2 [0x2])
Index 390 (hash value 806)
  (reg/v:DI 806 [ k ]) := (const_int 0 [0])
Index 391 (hash value 742)
  (reg:DI 742 [ prologue_after_cost_adjust.32 ]) := (const_int 0 [0])
Index 392 (hash value 68)
  (reg:V2DI 1858) := (const_vector:V2DI [
        (const_int 1 [0x1])
        (const_int 1 [0x1])
    ])
Index 393 (hash value 67)
  (reg:V2DI 1857) := (const_vector:V2DI [
        (const_int 2 [0x2])
        (const_int 2 [0x2])
    ])
Index 394 (hash value 776)
  (reg:DI 776 [ D.3810 ]) := (const_int 0 [0])
Index 395 (hash value 770)
  (reg:V2DI 770 [ vect_vec_iv_.40 ]) := (reg:V2DI 1710)
Index 396 (hash value 770)
  (reg:V2DI 770 [ vect_vec_iv_.40 ]) := (reg:V2DI 795 [ vect_vec_iv_.40 ])
Index 397 (hash value 745)
  (reg/v:DI 745 [ parent ]) := (const_int 0 [0])
Index 398 (hash value 715)
  (reg/v:SI 715 [ err ]) := (const_int 0 [0])
Index 399 (hash value 836)
  (reg:SI 1731 [ D.3809 ]) := (const_int 0 [0])
Index 400 (hash value 581)
  (reg/v:DI 581 [ parent ]) := (reg:DI 809 [ D.3798 ])
Index 401 (hash value 609)
  (reg/v:DI 609 [ nhop ]) := (const_int 0 [0])
Index 402 (hash value 456)
  (reg/v:DI 456 [ parent ]) := (reg/v:DI 745 [ parent ])
Index 403 (hash value 843)
  (reg/f:DI 1738) := (symbol_ref/f:DI ("*.LC61") [flags 0x82]  <var_decl 0x7f3c5d881900 *.LC61>)
Index 404 (hash value 844)
  (reg/f:DI 1739) := (high:DI (symbol_ref/f:DI ("*.LC61") [flags 0x82]  <var_decl 0x7f3c5d881900 *.LC61>))
Index 405 (hash value 841)
  (reg/f:DI 1736) := (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
Index 406 (hash value 842)
  (reg/f:DI 1737) := (high:DI (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))
Index 407 (hash value 840)
  (reg/f:DI 1735) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
        (const_int 48 [0x30])))
Index 408 (hash value 837)
  (reg/f:DI 1732) := (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
Index 409 (hash value 838)
  (reg/f:DI 1733) := (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))
Index 410 (hash value 847)
  (reg:SI 1742 [ D.3809 ]) := (const_int 0 [0])
Index 411 (hash value 461)
  (reg/f:DI 461 [ D.3812 ]) := (reg:DI 672 [ ivtmp.84 ])
Index 412 (hash value 805)
  (reg:DI 805 [ D.3798 ]) := (reg:DI 809 [ D.3798 ])
Index 413 (hash value 854)
  (reg/f:DI 1749) := (symbol_ref/f:DI ("*.LC62") [flags 0x82]  <var_decl 0x7f3c5d881990 *.LC62>)
Index 414 (hash value 855)
  (reg/f:DI 1750) := (high:DI (symbol_ref/f:DI ("*.LC62") [flags 0x82]  <var_decl 0x7f3c5d881990 *.LC62>))
Index 415 (hash value 852)
  (reg/f:DI 1747) := (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
Index 416 (hash value 853)
  (reg/f:DI 1748) := (high:DI (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))
Index 417 (hash value 851)
  (reg/f:DI 1746) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
        (const_int 48 [0x30])))
Index 418 (hash value 848)
  (reg/f:DI 1743) := (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
Index 419 (hash value 849)
  (reg/f:DI 1744) := (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))
Index 420 (hash value 734)
  (reg/v:DI 734 [ nhop ]) := (const_int 0 [0])
Index 421 (hash value 733)
  (reg/v:DI 733 [ nhop ]) := (reg/v:DI 734 [ nhop ])
Index 422 (hash value 862)
  (reg/f:DI 1757) := (symbol_ref/f:DI ("*.LC63") [flags 0x82]  <var_decl 0x7f3c5d881a20 *.LC63>)
Index 423 (hash value 863)
  (reg/f:DI 1758) := (high:DI (symbol_ref/f:DI ("*.LC63") [flags 0x82]  <var_decl 0x7f3c5d881a20 *.LC63>))
Index 424 (hash value 860)
  (reg/f:DI 1755) := (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
Index 425 (hash value 861)
  (reg/f:DI 1756) := (high:DI (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))
Index 426 (hash value 859)
  (reg/f:DI 1754) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
        (const_int 48 [0x30])))
Index 427 (hash value 856)
  (reg/f:DI 1751) := (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
Index 428 (hash value 857)
  (reg/f:DI 1752) := (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))
Index 429 (hash value 738)
  (reg/v:DI 738 [ lastlvl ]) := (reg/v:DI 739 [ lastlvl ])
Index 430 (hash value 871)
  (reg/f:DI 1766) := (symbol_ref/f:DI ("*.LC64") [flags 0x82]  <var_decl 0x7f3c5d881ab0 *.LC64>)
Index 431 (hash value 872)
  (reg/f:DI 1767) := (high:DI (symbol_ref/f:DI ("*.LC64") [flags 0x82]  <var_decl 0x7f3c5d881ab0 *.LC64>))
Index 432 (hash value 869)
  (reg/f:DI 1764) := (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
Index 433 (hash value 870)
  (reg/f:DI 1765) := (high:DI (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))
Index 434 (hash value 868)
  (reg/f:DI 1763) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
        (const_int 48 [0x30])))
Index 435 (hash value 865)
  (reg/f:DI 1760) := (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
Index 436 (hash value 866)
  (reg/f:DI 1761) := (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))
Index 437 (hash value 84)
  (reg:DI 1874) := (const_int 1 [0x1])
Index 438 (hash value 83)
  (reg:SI 1873 [ err ]) := (const_int -14 [0xfffffffffffffff2])
Index 439 (hash value 82)
  (reg:SI 1872 [ err ]) := (const_int 0 [0])
Index 440 (hash value 610)
  (reg/v:SI 610 [ nedge_traversed ]) := (const_int 0 [0])
Index 441 (hash value 716)
  (reg/v:SI 716 [ err ]) := (reg/v:SI 715 [ err ])
Index 442 (hash value 886)
  (reg:SI 1781 [ D.3813 ]) := (const_int 0 [0])
Index 443 (hash value 893)
  (reg:SI 1788) := (const_int 0 [0])
Index 444 (hash value 1)
  (reg:SI 1791 [ D.3813 ]) := (const_int 0 [0])
Index 445 (hash value 6)
  (reg:SI 1796) := (const_int 0 [0])
Index 446 (hash value 716)
  (reg/v:SI 716 [ err ]) := (reg:SI 1872 [ err ])
Index 447 (hash value 715)
  (reg/v:SI 715 [ err ]) := (reg:SI 1873 [ err ])
Index 448 (hash value 716)
  (reg/v:SI 716 [ err ]) := (reg:SI 1873 [ err ])
Index 449 (hash value 716)
  (reg/v:SI 716 [ err ]) := (const_int 0 [0])
Index 450 (hash value 81)
  (reg:SI 1871) := (const_int -16 [0xfffffffffffffff0])
Index 451 (hash value 80)
  (reg:SI 1870) := (const_int 0 [0])
Index 452 (hash value 79)
  (reg:SI 1869) := (const_int -15 [0xfffffffffffffff1])
Index 453 (hash value 436)
  (reg/v:DI 436 [ k ]) := (const_int 0 [0])
Index 454 (hash value 15)
  (reg:SI 1805 [ D.3813 ]) := (const_int 0 [0])
Index 455 (hash value 18)
  (reg/f:DI 1808) := (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)
Index 456 (hash value 70)
  (reg/f:DI 1860) := (high:DI (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))
Index 457 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 458 (hash value 22)
  (reg:SI 1812 [ VERBOSE ]) := (const_int 0 [0])
Index 459 (hash value 24)
  (reg/f:DI 1814) := (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)
Index 460 (hash value 70)
  (reg/f:DI 1860) := (high:DI (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))
Index 461 (hash value 29)
  (reg:SI 1819 [ VERBOSE ]) := (const_int 0 [0])
Index 462 (hash value 36)
  (reg/f:DI 1826) := (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)
Index 463 (hash value 32)
  (reg/f:DI 1822) := (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
Index 464 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 465 (hash value 30)
  (reg/f:DI 1820) := (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)
Index 466 (hash value 31)
  (reg/f:DI 1821) := (high:DI (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>))
Index 467 (hash value 43)
  (reg/f:DI 1833) := (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>)
Index 468 (hash value 44)
  (reg/f:DI 1834) := (high:DI (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>))
Index 469 (hash value 41)
  (reg/f:DI 1831) := (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (const_int 112 [0x70])))
Index 470 (hash value 38)
  (reg/f:DI 1828) := (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
Index 471 (hash value 47)
  (reg/f:DI 1837) := (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
Index 472 (hash value 416)
  (reg/v:DI 416 [ seed ]) := (const_int 3737844653 [0xdecafbad])
Index 473 (hash value 715)
  (reg/v:SI 715 [ err ]) := (const_int -2 [0xfffffffffffffffe])
Index 474 (hash value 715)
  (reg/v:SI 715 [ err ]) := (const_int -1 [0xffffffffffffffff])
Index 475 (hash value 715)
  (reg/v:SI 715 [ err ]) := (const_int -12 [0xfffffffffffffff4])
Index 476 (hash value 828)
  (reg:DI 828 [ D.3798 ]) := (reg:DI 1900 [ D.3798 ])
Index 477 (hash value 442)
  (reg/v:DI 442 [ nverts ]) := (reg:DI 830 [ D.3798 ])
Index 478 (hash value 773)
  (reg:SI 1668 [ VERBOSE ]) := (const_int 0 [0])
Index 479 (hash value 715)
  (reg/v:SI 715 [ err ]) := (const_int -11 [0xfffffffffffffff5])
Index 480 (hash value 715)
  (reg/v:SI 715 [ err ]) := (const_int -13 [0xfffffffffffffff3])
Index 481 (hash value 58)
  (reg:DI 1848) := (const_int -999 [0xfffffffffffffc19])
Index 482 (hash value 56)
  (reg/f:DI 1846) := (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)
Index 483 (hash value 70)
  (reg/f:DI 1860) := (high:DI (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))
Index 484 (hash value 66)
  (reg/f:DI 1856) := (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
Index 485 (hash value 712)
  (reg:DI 712 [ D.3798 ]) := (const_int -999 [0xfffffffffffffc19])
Index 486 (hash value 61)
  (reg:SI 1851 [ VERBOSE ]) := (const_int 0 [0])

(mem/f/c:DI (reg/f:DI 881) [2 optarg+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 3 x3)
    (mem/f/c:DI (reg/f:DI 881) [2 optarg+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>) [2 optarg+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 3 x3)
    (mem/f/c:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>) [2 optarg+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 892)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(mem/f/c:DI (reg/f:DI 899) [2 optarg+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 3 x3)
    (mem/f/c:DI (reg/f:DI 899) [2 optarg+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>) [2 optarg+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 3 x3)
    (mem/f/c:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>) [2 optarg+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 910)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1855)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 927)
    (lo_sum:DI (reg/f:DI 1855)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 933)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1855)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 950)
    (lo_sum:DI (reg/f:DI 1855)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 956)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1855)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 973)
    (lo_sum:DI (reg/f:DI 1855)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 979)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1855)
    (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))

Cold cost: 4 (final)
(set (reg/f:DI 996)
    (lo_sum:DI (reg/f:DI 1855)
        (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1854)
    (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1002)
    (lo_sum:DI (reg/f:DI 1854)
        (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])))

Cold cost: 4 (final)
(set (reg:DI 2 x2)
    (reg/f:DI 1909))

Cold cost: 4 (final)
(set (reg:DI 2 x2)
    (reg/f:DI 1013))

Hot cost: 4 (final)
(mem/c:DF (plus:DI (reg/f:DI 1082)
        (const_int 24 [0x18])) [1 B+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DF 1086 [ B ])
    (mem/c:DF (plus:DI (reg/f:DI 1082)
            (const_int 24 [0x18])) [1 B+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (const_int 24 [0x18]))) [1 B+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DF 1086 [ B ])
    (mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
                (const_int 24 [0x18]))) [1 B+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DF (plus:DI (reg/f:DI 1082)
        (const_int 32 [0x20])) [1 C+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DF 1089 [ C ])
    (mem/c:DF (plus:DI (reg/f:DI 1082)
            (const_int 32 [0x20])) [1 C+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (const_int 32 [0x20]))) [1 C+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DF 1089 [ C ])
    (mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
                (const_int 32 [0x20]))) [1 C+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DF (plus:DI (reg/f:DI 1082)
        (const_int 40 [0x28])) [1 D+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DF 1092 [ D ])
    (mem/c:DF (plus:DI (reg/f:DI 1082)
            (const_int 40 [0x28])) [1 D+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (const_int 40 [0x28]))) [1 D+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DF 1092 [ D ])
    (mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
                (const_int 40 [0x28]))) [1 D+0 S8 A64]))

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (reg/f:DI 1138))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1143)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(mem/f/c:DI (plus:DI (reg/f:DI 1143)
        (const_int 8 [0x8])) [2 dumpname+0 S8 A64])

Cold cost: 4 (final)
(set (reg/f:DI 246 [ D.3800 ])
    (mem/f/c:DI (plus:DI (reg/f:DI 1143)
            (const_int 8 [0x8])) [2 dumpname+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 8 [0x8]))) [2 dumpname+0 S8 A64])

Cold cost: 4 (final)
(set (reg/f:DI 246 [ D.3800 ])
    (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 8 [0x8]))) [2 dumpname+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:SI (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])

Cold cost: 4 (final)
(set (reg:SI 1198 [ VERBOSE ])
    (mem/c:SI (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32]))

Cold cost: 4 (final)
(mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])

Cold cost: 4 (final)
(set (reg:SI 1198 [ VERBOSE ])
    (mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1203)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(set (mem/c:DI (plus:DI (reg/f:DI 1203)
            (const_int 80 [0x50])) [4 nedge+0 S8 A64])
    (reg/v:DI 245 [ desired_nedge ]))

Cold cost: 0 (final)
(set (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 80 [0x50]))) [4 nedge+0 S8 A64])
    (reg/v:DI 245 [ desired_nedge ]))

Cold cost: 0 (final)
(set (mem/f/c:DI (plus:DI (reg/f:DI 1203)
            (const_int 88 [0x58])) [2 IJ+0 S8 A64])
    (reg/f:DI 289 [ D.3806 ]))

Cold cost: 0 (final)
(set (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 88 [0x58]))) [2 IJ+0 S8 A64])
    (reg/f:DI 289 [ D.3806 ]))

Cold cost: 0 (final)
(mem/c:DI (plus:DI (reg/f:DI 1203)
        (const_int 80 [0x50])) [4 nedge+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 1 x1)
    (mem/c:DI (plus:DI (reg/f:DI 1203)
            (const_int 80 [0x50])) [4 nedge+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 80 [0x50]))) [4 nedge+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 1 x1)
    (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 80 [0x50]))) [4 nedge+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (plus:DI (reg/f:DI 1203)
        (const_int 88 [0x58])) [2 IJ+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (plus:DI (reg/f:DI 1203)
            (const_int 88 [0x58])) [2 IJ+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 88 [0x58]))) [2 IJ+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 0 x0)
    (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 88 [0x58]))) [2 IJ+0 S8 A64]))

Cold cost: 4 (final)
(set (mem/c:DF (plus:DI (reg/f:DI 1203)
            (const_int 96 [0x60])) [1 generation_time+0 S8 A64])
    (reg:DF 259 [ D.3804 ]))

Cold cost: 0 (final)
(set (mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 96 [0x60]))) [1 generation_time+0 S8 A64])
    (reg:DF 259 [ D.3804 ]))

Cold cost: 0 (final)
(mem/c:DI (plus:DI (reg/f:DI 1203)
        (const_int 32 [0x20])) [4 userseed+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 262 [ D.3802 ])
    (mem/c:DI (plus:DI (reg/f:DI 1203)
            (const_int 32 [0x20])) [4 userseed+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 32 [0x20]))) [4 userseed+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 262 [ D.3802 ])
    (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 32 [0x20]))) [4 userseed+0 S8 A64]))

Cold cost: 4 (final)
(set (mem/c:DI (plus:DI (reg/f:DI 1203)
            (const_int 80 [0x50])) [4 nedge+0 S8 A64])
    (reg/v:DI 245 [ desired_nedge ]))

Cold cost: 0 (final)
(set (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 80 [0x50]))) [4 nedge+0 S8 A64])
    (reg/v:DI 245 [ desired_nedge ]))

Cold cost: 0 (final)
(set (mem/f/c:DI (plus:DI (reg/f:DI 1203)
            (const_int 88 [0x58])) [2 IJ+0 S8 A64])
    (reg/v/f:DI 430 [ edges ]))

Cold cost: 0 (final)
(set (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 88 [0x58]))) [2 IJ+0 S8 A64])
    (reg/v/f:DI 430 [ edges ]))

Cold cost: 0 (final)
(plus:DI (reg:DI 1269)
    (reg/f:DI 1902))

Hot cost: 4 (final)
(set (reg:DI 1270 [ D.3811 ])
    (plus:DI (reg:DI 1269)
        (reg/f:DI 1902)))

Hot cost: 4 (final)
(symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>)

Hot cost: 8 (final)
(plus:DI (reg:DI 1269)
    (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))

Hot cost: 12 (final)
(set (reg:DI 1270 [ D.3811 ])
    (plus:DI (reg:DI 1269)
        (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>)))

Hot cost: 12 (final)
(mult:DI (reg:DI 750 [ D.3802 ])
    (reg:DI 1903))

Hot cost: 20 (final)
(set (reg:DI 1274 [ D.3802 ])
    (mult:DI (reg:DI 750 [ D.3802 ])
        (reg:DI 1903)))

Hot cost: 20 (final)
(const_int 107374182 [0x6666666])

Hot cost: 8 (final)
(mult:DI (reg:DI 750 [ D.3802 ])
    (const_int 107374182 [0x6666666]))

Hot cost: 28 (final)
(set (reg:DI 1274 [ D.3802 ])
    (mult:DI (reg:DI 750 [ D.3802 ])
        (const_int 107374182 [0x6666666])))

Hot cost: 28 (final)
(compare:CC (reg:DI 751 [ D.3802 ])
    (reg:DI 1273))

Hot cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 751 [ D.3802 ])
        (reg:DI 1273)))

Hot cost: 4 (final)
(const_int 2147483646 [0x7ffffffe])

Hot cost: 4 (final)
(compare:CC (reg:DI 751 [ D.3802 ])
    (const_int 2147483646 [0x7ffffffe]))

Hot cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 751 [ D.3802 ])
        (const_int 2147483646 [0x7ffffffe])))

Hot cost: 8 (final)
(mult:DI (reg:DI 750 [ D.3802 ])
    (reg:DI 1903))

Hot cost: 20 (final)
(set (reg:DI 1285 [ D.3802 ])
    (mult:DI (reg:DI 750 [ D.3802 ])
        (reg:DI 1903)))

Hot cost: 20 (final)
(const_int 107374182 [0x6666666])

Hot cost: 8 (final)
(mult:DI (reg:DI 750 [ D.3802 ])
    (const_int 107374182 [0x6666666]))

Hot cost: 28 (final)
(set (reg:DI 1285 [ D.3802 ])
    (mult:DI (reg:DI 750 [ D.3802 ])
        (const_int 107374182 [0x6666666])))

Hot cost: 28 (final)
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1285 [ D.3802 ]))
            (zero_extend:TI (reg:DI 1306)))
        (const_int 64 [0x40])))

Hot cost: 12 (final)
(set (reg:DI 1287)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1285 [ D.3802 ]))
                (zero_extend:TI (reg:DI 1306)))
            (const_int 64 [0x40]))))

Hot cost: 12 (final)

Failed to cost RTX.  Assuming default cost.
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1285 [ D.3802 ]))
            (const_int 8589934597 [0x200000005]))
        (const_int 64 [0x40])))

Hot cost: 4 (final)
(set (reg:DI 1287)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1285 [ D.3802 ]))
                (const_int 8589934597 [0x200000005]))
            (const_int 64 [0x40]))))

Hot cost: 4 (final)
(compare:CC (reg:DI 751 [ D.3802 ])
    (reg:DI 1892))

Hot cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 751 [ D.3802 ])
        (reg:DI 1892)))

Hot cost: 4 (final)
(const_int 2147483646 [0x7ffffffe])

Hot cost: 4 (final)
(compare:CC (reg:DI 751 [ D.3802 ])
    (const_int 2147483646 [0x7ffffffe]))

Hot cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 751 [ D.3802 ])
        (const_int 2147483646 [0x7ffffffe])))

Hot cost: 8 (final)
(mult:DI (reg:DI 751 [ D.3802 ])
    (reg:DI 1303))

Hot cost: 20 (final)
(set (reg:DI 1302 [ D.3802 ])
    (mult:DI (reg:DI 751 [ D.3802 ])
        (reg:DI 1303)))

Hot cost: 20 (final)
(const_int 104480 [0x19820])

Hot cost: 8 (final)
(mult:DI (reg:DI 751 [ D.3802 ])
    (const_int 104480 [0x19820]))

Hot cost: 28 (final)
(set (reg:DI 1302 [ D.3802 ])
    (mult:DI (reg:DI 751 [ D.3802 ])
        (const_int 104480 [0x19820])))

Hot cost: 28 (final)
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1304 [ D.3802 ]))
            (zero_extend:TI (reg:DI 1306)))
        (const_int 64 [0x40])))

Hot cost: 12 (final)
(set (reg:DI 1305)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1304 [ D.3802 ]))
                (zero_extend:TI (reg:DI 1306)))
            (const_int 64 [0x40]))))

Hot cost: 12 (final)

Failed to cost RTX.  Assuming default cost.
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1304 [ D.3802 ]))
            (const_int 8589934597 [0x200000005]))
        (const_int 64 [0x40])))

Hot cost: 4 (final)
(set (reg:DI 1305)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1304 [ D.3802 ]))
                (const_int 8589934597 [0x200000005]))
            (const_int 64 [0x40]))))

Hot cost: 4 (final)
(compare:CC (reg:DI 469 [ D.3802 ])
    (reg:DI 1313))

Hot cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 469 [ D.3802 ])
        (reg:DI 1313)))

Hot cost: 4 (final)
(const_int 7294 [0x1c7e])

Hot cost: 4 (final)
(compare:CC (reg:DI 469 [ D.3802 ])
    (const_int 7294 [0x1c7e]))

Hot cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 469 [ D.3802 ])
        (const_int 7294 [0x1c7e])))

Hot cost: 8 (final)
(mult:DI (reg:DI 469 [ D.3802 ])
    (reg:DI 1903))

Hot cost: 20 (final)
(set (reg:DI 1314 [ D.3802 ])
    (mult:DI (reg:DI 469 [ D.3802 ])
        (reg:DI 1903)))

Hot cost: 20 (final)
(const_int 107374182 [0x6666666])

Hot cost: 8 (final)
(mult:DI (reg:DI 469 [ D.3802 ])
    (const_int 107374182 [0x6666666]))

Hot cost: 28 (final)
(set (reg:DI 1314 [ D.3802 ])
    (mult:DI (reg:DI 469 [ D.3802 ])
        (const_int 107374182 [0x6666666])))

Hot cost: 28 (final)
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1314 [ D.3802 ]))
            (zero_extend:TI (reg:DI 1306)))
        (const_int 64 [0x40])))

Hot cost: 12 (final)
(set (reg:DI 1316)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1314 [ D.3802 ]))
                (zero_extend:TI (reg:DI 1306)))
            (const_int 64 [0x40]))))

Hot cost: 12 (final)

Failed to cost RTX.  Assuming default cost.
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1314 [ D.3802 ]))
            (const_int 8589934597 [0x200000005]))
        (const_int 64 [0x40])))

Hot cost: 4 (final)
(set (reg:DI 1316)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1314 [ D.3802 ]))
                (const_int 8589934597 [0x200000005]))
            (const_int 64 [0x40]))))

Hot cost: 4 (final)
(compare:CC (reg:DI 714 [ D.3802 ])
    (reg:DI 1892))

Hot cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 714 [ D.3802 ])
        (reg:DI 1892)))

Hot cost: 4 (final)
(const_int 2147483646 [0x7ffffffe])

Hot cost: 4 (final)
(compare:CC (reg:DI 714 [ D.3802 ])
    (const_int 2147483646 [0x7ffffffe]))

Hot cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 714 [ D.3802 ])
        (const_int 2147483646 [0x7ffffffe])))

Hot cost: 8 (final)
(mult:DI (reg:DI 714 [ D.3802 ])
    (reg:DI 1303))

Hot cost: 20 (final)
(set (reg:DI 1325 [ D.3802 ])
    (mult:DI (reg:DI 714 [ D.3802 ])
        (reg:DI 1303)))

Hot cost: 20 (final)
(const_int 104480 [0x19820])

Hot cost: 8 (final)
(mult:DI (reg:DI 714 [ D.3802 ])
    (const_int 104480 [0x19820]))

Hot cost: 28 (final)
(set (reg:DI 1325 [ D.3802 ])
    (mult:DI (reg:DI 714 [ D.3802 ])
        (const_int 104480 [0x19820])))

Hot cost: 28 (final)
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1327 [ D.3802 ]))
            (zero_extend:TI (reg:DI 1306)))
        (const_int 64 [0x40])))

Hot cost: 12 (final)
(set (reg:DI 1328)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1327 [ D.3802 ]))
                (zero_extend:TI (reg:DI 1306)))
            (const_int 64 [0x40]))))

Hot cost: 12 (final)

Failed to cost RTX.  Assuming default cost.
(truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1327 [ D.3802 ]))
            (const_int 8589934597 [0x200000005]))
        (const_int 64 [0x40])))

Hot cost: 4 (final)
(set (reg:DI 1328)
    (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1327 [ D.3802 ]))
                (const_int 8589934597 [0x200000005]))
            (const_int 64 [0x40]))))

Hot cost: 4 (final)
(compare:CC (reg:DI 476 [ D.3802 ])
    (reg:DI 1313))

Hot cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 476 [ D.3802 ])
        (reg:DI 1313)))

Hot cost: 4 (final)
(const_int 7294 [0x1c7e])

Hot cost: 4 (final)
(compare:CC (reg:DI 476 [ D.3802 ])
    (const_int 7294 [0x1c7e]))

Hot cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 476 [ D.3802 ])
        (const_int 7294 [0x1c7e])))

Hot cost: 8 (final)
(mult:DI (zero_extend:DI (reg/v:SI 463 [ val ]))
    (zero_extend:DI (reg:SI 1895)))

Hot cost: 12 (final)
(set (reg:DI 1337)
    (mult:DI (zero_extend:DI (reg/v:SI 463 [ val ]))
        (zero_extend:DI (reg:SI 1895))))

Hot cost: 12 (final)
(zero_extend:DI (reg/v:SI 463 [ val ]))

Hot cost: 4 (partial)
(const_int 3518437209 [0xd1b71759])

Hot cost: 8 (final)
(mult:DI (zero_extend:DI (reg/v:SI 463 [ val ]))
    (const_int 3518437209 [0xd1b71759]))

Hot cost: 32 (final)
(set (reg:DI 1337)
    (mult:DI (zero_extend:DI (reg/v:SI 463 [ val ]))
        (const_int 3518437209 [0xd1b71759])))

Hot cost: 32 (final)
(mult:SI (reg/v:SI 464 [ val ])
    (reg:SI 1896))

Hot cost: 12 (final)
(set (reg:SI 1340)
    (mult:SI (reg/v:SI 464 [ val ])
        (reg:SI 1896)))

Hot cost: 12 (final)
(const_int 10000 [0x2710])

Hot cost: 4 (final)
(mult:SI (reg/v:SI 464 [ val ])
    (const_int 10000 [0x2710]))

Hot cost: 16 (final)
(set (reg:SI 1340)
    (mult:SI (reg/v:SI 464 [ val ])
        (const_int 10000 [0x2710])))

Hot cost: 16 (final)
(compare:CC (reg:SI 1343 [ val ])
    (reg:SI 1899))

Hot cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:SI 1343 [ val ])
        (reg:SI 1899)))

Hot cost: 4 (final)
(const_int 5699 [0x1643])

Hot cost: 4 (final)
(compare:CC (reg:SI 1343 [ val ])
    (const_int 5699 [0x1643]))

Hot cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:SI 1343 [ val ])
        (const_int 5699 [0x1643])))

Hot cost: 8 (final)
(set (reg:DI 829 [ D.3798 ])
    (reg:DI 1898 [ D.3798 ]))

Cold cost: 4 (final)
(set (reg:DI 829 [ D.3798 ])
    (const_int 0 [0]))

Cold cost: 4 (final)
rescanning insn with uid = 4397.
GLOBAL CONST-PROP: Replacing reg 1898 in insn 4397 with constant (const_int 0 [0])
(set (reg:DI 828 [ D.3798 ])
    (reg:DI 1898 [ D.3798 ]))

Cold cost: 4 (final)
(set (reg:DI 828 [ D.3798 ])
    (const_int 0 [0]))

Cold cost: 4 (final)
rescanning insn with uid = 4398.
GLOBAL CONST-PROP: Replacing reg 1898 in insn 4398 with constant (const_int 0 [0])
(set (reg:DI 829 [ D.3798 ])
    (reg:DI 1897 [ D.3798 ]))

Hot cost: 4 (final)
(const_int 1 [0x1])

Hot cost: 4 (final)
(set (reg:DI 829 [ D.3798 ])
    (const_int 1 [0x1]))

Hot cost: 4 (final)
rescanning insn with uid = 4392.
GLOBAL CONST-PROP: Replacing reg 1897 in insn 4392 with constant (const_int 1 [0x1])
(set (reg:DI 831 [ D.3798 ])
    (reg:DI 1898 [ D.3798 ]))

Hot cost: 4 (final)
(set (reg:DI 831 [ D.3798 ])
    (const_int 0 [0]))

Hot cost: 4 (final)
rescanning insn with uid = 4393.
GLOBAL CONST-PROP: Replacing reg 1898 in insn 4393 with constant (const_int 0 [0])
(set (reg:DI 829 [ D.3798 ])
    (reg:DI 1898 [ D.3798 ]))

Cold cost: 4 (final)
(set (reg:DI 829 [ D.3798 ])
    (const_int 0 [0]))

Cold cost: 4 (final)
rescanning insn with uid = 4391.
GLOBAL CONST-PROP: Replacing reg 1898 in insn 4391 with constant (const_int 0 [0])
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1398)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(mem/c:SI (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])

Cold cost: 4 (final)
(set (reg:SI 1402 [ VERBOSE ])
    (mem/c:SI (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32]))

Cold cost: 4 (final)
(mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])

Cold cost: 4 (final)
(set (reg:SI 1402 [ VERBOSE ])
    (mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32]))

Cold cost: 4 (final)
(mem/c:DI (plus:DI (reg/f:DI 1143)
        (const_int 80 [0x50])) [4 nedge+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 1411 [ nedge ])
    (mem/c:DI (plus:DI (reg/f:DI 1143)
            (const_int 80 [0x50])) [4 nedge+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 80 [0x50]))) [4 nedge+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 1411 [ nedge ])
    (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 80 [0x50]))) [4 nedge+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (plus:DI (reg/f:DI 1143)
        (const_int 88 [0x58])) [2 IJ+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 1 x1)
    (mem/f/c:DI (plus:DI (reg/f:DI 1143)
            (const_int 88 [0x58])) [2 IJ+0 S8 A64]))

Cold cost: 4 (final)
(mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 88 [0x58]))) [2 IJ+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 1 x1)
    (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 88 [0x58]))) [2 IJ+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:SI (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])

Cold cost: 4 (final)
(set (reg:SI 1418 [ VERBOSE ])
    (mem/c:SI (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32]))

Cold cost: 4 (final)
(mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])

Cold cost: 4 (final)
(set (reg:SI 1418 [ VERBOSE ])
    (mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1425)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(mem/c:SI (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])

Cold cost: 4 (final)
(set (reg:SI 1433 [ VERBOSE ])
    (mem/c:SI (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32]))

Cold cost: 4 (final)
(mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])

Cold cost: 4 (final)
(set (reg:SI 1433 [ VERBOSE ])
    (mem/c:SI (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1442)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(mem/c:DI (plus:DI (reg/f:DI 1442)
        (const_int 24 [0x18])) [4 nvtx_scale+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 572 [ D.3798 ])
    (mem/c:DI (plus:DI (reg/f:DI 1442)
            (const_int 24 [0x18])) [4 nvtx_scale+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 24 [0x18]))) [4 nvtx_scale+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 572 [ D.3798 ])
    (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 24 [0x18]))) [4 nvtx_scale+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1447)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(set (mem:SI (plus:DI (mult:DI (reg:DI 583 [ D.3798 ])
                (const_int 4 [0x4]))
            (reg/f:DI 291 [ D.3806 ])) [3 *_522+0 S4 A32])
    (reg:SI 1888))

Cold cost: 0 (final)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (mem:SI (plus:DI (mult:DI (reg:DI 583 [ D.3798 ])
                (const_int 4 [0x4]))
            (reg/f:DI 291 [ D.3806 ])) [3 *_522+0 S4 A32])
    (const_int 1 [0x1]))

Cold cost: 4 (final)
(set (mem:SI (plus:DI (mult:DI (reg:DI 582 [ D.3798 ])
                (const_int 4 [0x4]))
            (reg/f:DI 291 [ D.3806 ])) [3 *_519+0 S4 A32])
    (reg:SI 1888))

Cold cost: 0 (final)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (mem:SI (plus:DI (mult:DI (reg:DI 582 [ D.3798 ])
                (const_int 4 [0x4]))
            (reg/f:DI 291 [ D.3806 ])) [3 *_519+0 S4 A32])
    (const_int 1 [0x1]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1862)
    (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))

Cold cost: 4 (final)
(set (reg/f:DI 1455)
    (lo_sum:DI (reg/f:DI 1862)
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)))

Cold cost: 4 (final)
(mem/c:DI (lo_sum:DI (reg/f:DI 1862)
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
    (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64]))

Cold cost: 4 (final)
(mem/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])

Cold cost: 4 (final)
(set (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
    (mem/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64]))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1885)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1885)
    (lo_sum:DI (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(compare:CC (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
    (reg:DI 1879))

Cold cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
        (reg:DI 1879)))

Cold cost: 4 (final)
(const_int 2147483646 [0x7ffffffe])

Cold cost: 4 (final)
(compare:CC (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
    (const_int 2147483646 [0x7ffffffe]))

Cold cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
        (const_int 2147483646 [0x7ffffffe])))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1862)
    (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))

Cold cost: 4 (final)
(set (reg/f:DI 1466)
    (lo_sum:DI (reg/f:DI 1862)
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)))

Cold cost: 4 (final)
(set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 775 [ prng_state_store_z3_lsm.15 ]))

Cold cost: 0 (final)
(set (mem/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 775 [ prng_state_store_z3_lsm.15 ]))

Cold cost: 0 (final)
(mult:DI (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
    (reg:DI 1880))

Cold cost: 4 (final)
(set (reg:DI 1476 [ D.3802 ])
    (mult:DI (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
        (reg:DI 1880)))

Cold cost: 4 (final)
(const_int 107374182 [0x6666666])

Cold cost: 8 (final)
(mult:DI (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
    (const_int 107374182 [0x6666666]))

Cold cost: 12 (final)
(set (reg:DI 1476 [ D.3802 ])
    (mult:DI (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
        (const_int 107374182 [0x6666666])))

Cold cost: 12 (final)
(udiv:DI (reg:DI 1476 [ D.3802 ])
    (reg:DI 1881))

Cold cost: 4 (partial)
(set (reg:DI 1480)
    (udiv:DI (reg:DI 1476 [ D.3802 ])
        (reg:DI 1881)))

Cold cost: 4 (final)
(udiv:DI (reg:DI 1476 [ D.3802 ])
    (const_int 2147483647 [0x7fffffff]))

Cold cost: 4 (partial)
(const_int 2147483647 [0x7fffffff])

Cold cost: 4 (final)
(set (reg:DI 1480)
    (udiv:DI (reg:DI 1476 [ D.3802 ])
        (const_int 2147483647 [0x7fffffff])))

Cold cost: 8 (final)
(mult:DI (reg:DI 1480)
    (reg:DI 1881))

Cold cost: 4 (final)
(set (reg:DI 1482)
    (mult:DI (reg:DI 1480)
        (reg:DI 1881)))

Cold cost: 4 (final)
(const_int 2147483647 [0x7fffffff])

Cold cost: 4 (final)
(mult:DI (reg:DI 1480)
    (const_int 2147483647 [0x7fffffff]))

Cold cost: 8 (final)
(set (reg:DI 1482)
    (mult:DI (reg:DI 1480)
        (const_int 2147483647 [0x7fffffff])))

Cold cost: 8 (final)
(compare:CC (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
    (reg:DI 1879))

Cold cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (reg:DI 1879)))

Cold cost: 4 (final)
(const_int 2147483646 [0x7ffffffe])

Cold cost: 4 (final)
(compare:CC (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
    (const_int 2147483646 [0x7ffffffe]))

Cold cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (const_int 2147483646 [0x7ffffffe])))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1862)
    (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))

Cold cost: 4 (final)
(set (reg/f:DI 1485)
    (lo_sum:DI (reg/f:DI 1862)
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)))

Cold cost: 4 (final)
(set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 775 [ prng_state_store_z3_lsm.15 ]))

Cold cost: 0 (final)
(set (mem/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 775 [ prng_state_store_z3_lsm.15 ]))

Cold cost: 0 (final)
(mult:DI (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
    (reg:DI 1882))

Cold cost: 4 (final)
(set (reg:DI 1495 [ D.3802 ])
    (mult:DI (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (reg:DI 1882)))

Cold cost: 4 (final)
(const_int 104480 [0x19820])

Cold cost: 8 (final)
(mult:DI (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
    (const_int 104480 [0x19820]))

Cold cost: 12 (final)
(set (reg:DI 1495 [ D.3802 ])
    (mult:DI (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (const_int 104480 [0x19820])))

Cold cost: 12 (final)
(udiv:DI (reg:DI 1497 [ D.3802 ])
    (reg:DI 1881))

Cold cost: 4 (partial)
(set (reg:DI 1500)
    (udiv:DI (reg:DI 1497 [ D.3802 ])
        (reg:DI 1881)))

Cold cost: 4 (final)
(udiv:DI (reg:DI 1497 [ D.3802 ])
    (const_int 2147483647 [0x7fffffff]))

Cold cost: 4 (partial)
(const_int 2147483647 [0x7fffffff])

Cold cost: 4 (final)
(set (reg:DI 1500)
    (udiv:DI (reg:DI 1497 [ D.3802 ])
        (const_int 2147483647 [0x7fffffff])))

Cold cost: 8 (final)
(mult:DI (reg:DI 1500)
    (reg:DI 1881))

Cold cost: 4 (final)
(set (reg:DI 1502)
    (mult:DI (reg:DI 1500)
        (reg:DI 1881)))

Cold cost: 4 (final)
(const_int 2147483647 [0x7fffffff])

Cold cost: 4 (final)
(mult:DI (reg:DI 1500)
    (const_int 2147483647 [0x7fffffff]))

Cold cost: 8 (final)
(set (reg:DI 1502)
    (mult:DI (reg:DI 1500)
        (const_int 2147483647 [0x7fffffff])))

Cold cost: 8 (final)
(mult:DI (reg:DI 643 [ D.3802 ])
    (reg:DI 1880))

Cold cost: 4 (final)
(set (reg:DI 1504 [ D.3802 ])
    (mult:DI (reg:DI 643 [ D.3802 ])
        (reg:DI 1880)))

Cold cost: 4 (final)
(const_int 107374182 [0x6666666])

Cold cost: 8 (final)
(mult:DI (reg:DI 643 [ D.3802 ])
    (const_int 107374182 [0x6666666]))

Cold cost: 12 (final)
(set (reg:DI 1504 [ D.3802 ])
    (mult:DI (reg:DI 643 [ D.3802 ])
        (const_int 107374182 [0x6666666])))

Cold cost: 12 (final)
(udiv:DI (reg:DI 1504 [ D.3802 ])
    (reg:DI 1881))

Cold cost: 4 (partial)
(set (reg:DI 1508)
    (udiv:DI (reg:DI 1504 [ D.3802 ])
        (reg:DI 1881)))

Cold cost: 4 (final)
(udiv:DI (reg:DI 1504 [ D.3802 ])
    (const_int 2147483647 [0x7fffffff]))

Cold cost: 4 (partial)
(const_int 2147483647 [0x7fffffff])

Cold cost: 4 (final)
(set (reg:DI 1508)
    (udiv:DI (reg:DI 1504 [ D.3802 ])
        (const_int 2147483647 [0x7fffffff])))

Cold cost: 8 (final)
(mult:DI (reg:DI 1508)
    (reg:DI 1881))

Cold cost: 4 (final)
(set (reg:DI 1510)
    (mult:DI (reg:DI 1508)
        (reg:DI 1881)))

Cold cost: 4 (final)
(const_int 2147483647 [0x7fffffff])

Cold cost: 4 (final)
(mult:DI (reg:DI 1508)
    (const_int 2147483647 [0x7fffffff]))

Cold cost: 8 (final)
(set (reg:DI 1510)
    (mult:DI (reg:DI 1508)
        (const_int 2147483647 [0x7fffffff])))

Cold cost: 8 (final)
(compare:CC (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
    (reg:DI 1879))

Cold cost: 4 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (reg:DI 1879)))

Cold cost: 4 (final)
(const_int 2147483646 [0x7ffffffe])

Cold cost: 4 (final)
(compare:CC (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
    (const_int 2147483646 [0x7ffffffe]))

Cold cost: 8 (final)
(set (reg:CC 66 cc)
    (compare:CC (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (const_int 2147483646 [0x7ffffffe])))

Cold cost: 8 (final)
(lo_sum:DI (reg/f:DI 1862)
    (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))

Cold cost: 4 (final)
(set (reg/f:DI 1513)
    (lo_sum:DI (reg/f:DI 1862)
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)))

Cold cost: 4 (final)
(set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 643 [ D.3802 ]))

Cold cost: 0 (final)
(set (mem/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 643 [ D.3802 ]))

Cold cost: 0 (final)
(mult:DI (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
    (reg:DI 1882))

Cold cost: 4 (final)
(set (reg:DI 1523 [ D.3802 ])
    (mult:DI (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (reg:DI 1882)))

Cold cost: 4 (final)
(const_int 104480 [0x19820])

Cold cost: 8 (final)
(mult:DI (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
    (const_int 104480 [0x19820]))

Cold cost: 12 (final)
(set (reg:DI 1523 [ D.3802 ])
    (mult:DI (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (const_int 104480 [0x19820])))

Cold cost: 12 (final)
(udiv:DI (reg:DI 1525 [ D.3802 ])
    (reg:DI 1881))

Cold cost: 4 (partial)
(set (reg:DI 1528)
    (udiv:DI (reg:DI 1525 [ D.3802 ])
        (reg:DI 1881)))

Cold cost: 4 (final)
(udiv:DI (reg:DI 1525 [ D.3802 ])
    (const_int 2147483647 [0x7fffffff]))

Cold cost: 4 (partial)
(const_int 2147483647 [0x7fffffff])

Cold cost: 4 (final)
(set (reg:DI 1528)
    (udiv:DI (reg:DI 1525 [ D.3802 ])
        (const_int 2147483647 [0x7fffffff])))

Cold cost: 8 (final)
(mult:DI (reg:DI 1528)
    (reg:DI 1881))

Cold cost: 4 (final)
(set (reg:DI 1530)
    (mult:DI (reg:DI 1528)
        (reg:DI 1881)))

Cold cost: 4 (final)
(const_int 2147483647 [0x7fffffff])

Cold cost: 4 (final)
(mult:DI (reg:DI 1528)
    (const_int 2147483647 [0x7fffffff]))

Cold cost: 8 (final)
(set (reg:DI 1530)
    (mult:DI (reg:DI 1528)
        (const_int 2147483647 [0x7fffffff])))

Cold cost: 8 (final)
(set (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
    (reg:SI 1887 [ prng_state_store_z1_lsm.10 ]))

Cold cost: 4 (final)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
    (const_int 1 [0x1]))

Cold cost: 4 (final)
rescanning insn with uid = 4376.
GLOBAL CONST-PROP: Replacing reg 1887 in insn 4376 with constant (const_int 1 [0x1])
(lo_sum:DI (reg/f:DI 1862)
    (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))

Cold cost: 4 (final)
(set (reg/f:DI 1550)
    (lo_sum:DI (reg/f:DI 1862)
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)))

Cold cost: 4 (final)
(set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 775 [ prng_state_store_z3_lsm.15 ]))

Cold cost: 0 (final)
(set (mem/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 775 [ prng_state_store_z3_lsm.15 ]))

Cold cost: 0 (final)
(lo_sum:DI (reg/f:DI 1862)
    (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))

Cold cost: 4 (final)
(set (reg/f:DI 1570)
    (lo_sum:DI (reg/f:DI 1862)
        (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)))

Cold cost: 4 (final)
(set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 775 [ prng_state_store_z3_lsm.15 ]))

Cold cost: 0 (final)
(set (mem/c:DI (lo_sum:DI (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
    (reg:DI 775 [ prng_state_store_z3_lsm.15 ]))

Cold cost: 0 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1583)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(plus:DI (reg/f:DI 1442)
    (const_int 112 [0x70]))

Cold cost: 4 (final)
(set (reg/f:DI 1613)
    (plus:DI (reg/f:DI 1442)
        (const_int 112 [0x70])))

Cold cost: 4 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1616)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(mem/c:DI (plus:DI (reg/f:DI 1616)
        (const_int 24 [0x18])) [4 nvtx_scale+0 S8 A64])

Hot cost: 16 (final)
(set (reg:DI 611 [ D.3798 ])
    (mem/c:DI (plus:DI (reg/f:DI 1616)
            (const_int 24 [0x18])) [4 nvtx_scale+0 S8 A64]))

Hot cost: 16 (final)

Failed to cost RTX.  Assuming default cost.
(const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (const_int 24 [0x18])))

Hot cost: 4 (final)
(mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 24 [0x18]))) [4 nvtx_scale+0 S8 A64])

Hot cost: 20 (final)
(set (reg:DI 611 [ D.3798 ])
    (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 24 [0x18]))) [4 nvtx_scale+0 S8 A64]))

Hot cost: 20 (final)
(mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])

Hot cost: 16 (final)
(set (reg:SI 1633 [ VERBOSE ])
    (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32]))

Hot cost: 16 (final)
(symbol_ref:DI ("*.LANCHOR0") [flags 0x182])

Hot cost: 8 (final)
(mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])

Hot cost: 24 (final)
(set (reg:SI 1633 [ VERBOSE ])
    (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32]))

Hot cost: 24 (final)
(set (reg:DI 2 x2)
    (reg/f:DI 1877))

Hot cost: 4 (final)
(mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])

Hot cost: 16 (final)
(set (reg:SI 1668 [ VERBOSE ])
    (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32]))

Hot cost: 16 (final)
(symbol_ref:DI ("*.LANCHOR0") [flags 0x182])

Hot cost: 8 (final)
(mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])

Hot cost: 24 (final)
(set (reg:SI 1668 [ VERBOSE ])
    (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32]))

Hot cost: 24 (final)
(mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])

Hot cost: 16 (final)
(set (reg:SI 1678 [ VERBOSE ])
    (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32]))

Hot cost: 16 (final)
(symbol_ref:DI ("*.LANCHOR0") [flags 0x182])

Hot cost: 8 (final)
(mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])

Hot cost: 24 (final)
(set (reg:SI 1678 [ VERBOSE ])
    (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32]))

Hot cost: 24 (final)
(mem/f/c:DI (reg/f:DI 1671) [2 stderr+0 S8 A64])

Hot cost: 16 (final)
(set (reg/f:DI 1683 [ stderr ])
    (mem/f/c:DI (reg/f:DI 1671) [2 stderr+0 S8 A64]))

Hot cost: 16 (final)
(symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)

Hot cost: 8 (final)
(mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])

Hot cost: 24 (final)
(set (reg/f:DI 1683 [ stderr ])
    (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64]))

Hot cost: 24 (final)
(mem/f/c:DI (plus:DI (reg/f:DI 1616)
        (const_int 88 [0x58])) [2 IJ+0 S8 A64])

Hot cost: 16 (final)
(set (reg/f:DI 625 [ D.3803 ])
    (mem/f/c:DI (plus:DI (reg/f:DI 1616)
            (const_int 88 [0x58])) [2 IJ+0 S8 A64]))

Hot cost: 16 (final)

Failed to cost RTX.  Assuming default cost.
(const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (const_int 88 [0x58])))

Hot cost: 4 (final)
(mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 88 [0x58]))) [2 IJ+0 S8 A64])

Hot cost: 20 (final)
(set (reg/f:DI 625 [ D.3803 ])
    (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 88 [0x58]))) [2 IJ+0 S8 A64]))

Hot cost: 20 (final)
(mem/c:DI (plus:DI (reg/f:DI 1616)
        (const_int 80 [0x50])) [4 nedge+0 S8 A64])

Hot cost: 16 (final)
(set (reg:DI 626 [ D.3798 ])
    (mem/c:DI (plus:DI (reg/f:DI 1616)
            (const_int 80 [0x50])) [4 nedge+0 S8 A64]))

Hot cost: 16 (final)

Failed to cost RTX.  Assuming default cost.
(const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (const_int 80 [0x50])))

Hot cost: 4 (final)
(mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (const_int 80 [0x50]))) [4 nedge+0 S8 A64])

Hot cost: 20 (final)
(set (reg:DI 626 [ D.3798 ])
    (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 80 [0x50]))) [4 nedge+0 S8 A64]))

Hot cost: 20 (final)
(plus:V2DI (reg:V2DI 770 [ vect_vec_iv_.40 ])
    (reg:V2DI 1857))

Hot cost: 8 (final)
(set (reg:V2DI 795 [ vect_vec_iv_.40 ])
    (plus:V2DI (reg:V2DI 770 [ vect_vec_iv_.40 ])
        (reg:V2DI 1857)))

Hot cost: 8 (final)

Failed to cost RTX.  Assuming default cost.
(const_vector:V2DI [
        (const_int 2 [0x2])
        (const_int 2 [0x2])
    ])

Hot cost: 4 (final)
(plus:V2DI (reg:V2DI 770 [ vect_vec_iv_.40 ])
    (const_vector:V2DI [
            (const_int 2 [0x2])
            (const_int 2 [0x2])
        ]))

Hot cost: 12 (final)
(set (reg:V2DI 795 [ vect_vec_iv_.40 ])
    (plus:V2DI (reg:V2DI 770 [ vect_vec_iv_.40 ])
        (const_vector:V2DI [
                (const_int 2 [0x2])
                (const_int 2 [0x2])
            ])))

Hot cost: 12 (final)
(and:V2DI (not:V2DI (reg:V2DI 1722))
    (reg:V2DI 1858))

Hot cost: 8 (final)
(set (reg:V2DI 1720 [ vect_patt_839.41 ])
    (and:V2DI (not:V2DI (reg:V2DI 1722))
        (reg:V2DI 1858)))

Hot cost: 8 (final)
(and:V2DI (not:V2DI (reg:V2DI 1722))
    (const_vector:V2DI [
            (const_int 1 [0x1])
            (const_int 1 [0x1])
        ]))

Hot cost: 8 (final)
(set (reg:V2DI 1720 [ vect_patt_839.41 ])
    (and:V2DI (not:V2DI (reg:V2DI 1722))
        (const_vector:V2DI [
                (const_int 1 [0x1])
                (const_int 1 [0x1])
            ])))

Hot cost: 8 (final)
(set (mem:DI (plus:DI (reg/v/f:DI 746 [ seen_edge ])
            (reg:DI 688 [ D.3802 ])) [4 *_687+0 S8 A64])
    (reg:DI 1874))

Cold cost: 0 (final)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (mem:DI (plus:DI (reg/v/f:DI 746 [ seen_edge ])
            (reg:DI 688 [ D.3802 ])) [4 *_687+0 S8 A64])
    (const_int 1 [0x1]))

Cold cost: 4 (final)
(set (mem:DI (plus:DI (reg/v/f:DI 746 [ seen_edge ])
            (reg:DI 692 [ D.3802 ])) [4 *_689+0 S8 A64])
    (reg:DI 1874))

Cold cost: 0 (final)
(const_int 1 [0x1])

Cold cost: 4 (final)
(set (mem:DI (plus:DI (reg/v/f:DI 746 [ seen_edge ])
            (reg:DI 692 [ D.3802 ])) [4 *_689+0 S8 A64])
    (const_int 1 [0x1]))

Cold cost: 4 (final)
(set (reg/v:SI 716 [ err ])
    (reg:SI 1872 [ err ]))

Cold cost: 4 (final)
(set (reg/v:SI 716 [ err ])
    (const_int 0 [0]))

Cold cost: 4 (final)
rescanning insn with uid = 4354.
GLOBAL CONST-PROP: Replacing reg 1872 in insn 4354 with constant (const_int 0 [0])
(set (reg/v:SI 716 [ err ])
    (reg:SI 1873 [ err ]))

Cold cost: 4 (final)
(const_int -14 [0xfffffffffffffff2])

Cold cost: 4 (final)
(set (reg/v:SI 716 [ err ])
    (const_int -14 [0xfffffffffffffff2]))

Cold cost: 4 (final)
rescanning insn with uid = 4353.
GLOBAL CONST-PROP: Replacing reg 1873 in insn 4353 with constant (const_int -14 [0xfffffffffffffff2])
(set (reg/v:SI 715 [ err ])
    (reg:SI 1873 [ err ]))

Cold cost: 4 (final)
rescanning insn with uid = 253.
GLOBAL CONST-PROP: Replacing reg 1873 in insn 253 with constant (const_int -14 [0xfffffffffffffff2])
(if_then_else:SI (eq (reg:CC 66 cc)
        (const_int 0 [0]))
    (reg:SI 1869)
    (reg:SI 1870))

Hot cost: 4 (final)
(set (reg/v:SI 715 [ err ])
    (if_then_else:SI (eq (reg:CC 66 cc)
            (const_int 0 [0]))
        (reg:SI 1869)
        (reg:SI 1870)))

Hot cost: 4 (final)
(const_int 0 [0])

Hot cost: 0 (final)
(if_then_else:SI (eq (reg:CC 66 cc)
        (const_int 0 [0]))
    (reg:SI 1869)
    (const_int 0 [0]))

Hot cost: 4 (final)
(set (reg/v:SI 715 [ err ])
    (if_then_else:SI (eq (reg:CC 66 cc)
            (const_int 0 [0]))
        (reg:SI 1869)
        (const_int 0 [0])))

Hot cost: 4 (final)
rescanning insn with uid = 4324.
GLOBAL CONST-PROP: Replacing reg 1870 in insn 4324 with constant (const_int 0 [0])
(const_int 0 [0])

Hot cost: 0 (final)
(if_then_else:SI (eq (reg:CC 66 cc)
        (const_int 0 [0]))
    (reg:SI 1869)
    (const_int 0 [0]))

Hot cost: 4 (final)
(set (reg/v:SI 715 [ err ])
    (if_then_else:SI (eq (reg:CC 66 cc)
            (const_int 0 [0]))
        (reg:SI 1869)
        (const_int 0 [0])))

Hot cost: 4 (final)
(const_int -15 [0xfffffffffffffff1])

Hot cost: 4 (final)
(const_int 0 [0])

Hot cost: 0 (final)
(if_then_else:SI (eq (reg:CC 66 cc)
        (const_int 0 [0]))
    (const_int -15 [0xfffffffffffffff1])
    (const_int 0 [0]))

Hot cost: 8 (final)
(set (reg/v:SI 715 [ err ])
    (if_then_else:SI (eq (reg:CC 66 cc)
            (const_int 0 [0]))
        (const_int -15 [0xfffffffffffffff1])
        (const_int 0 [0])))

Hot cost: 8 (final)
(const_int 0 [0])

Hot cost: 0 (final)
(if_then_else:SI (eq (reg:CC 66 cc)
        (const_int 0 [0]))
    (reg:SI 1869)
    (const_int 0 [0]))

Hot cost: 4 (final)
(set (reg/v:SI 715 [ err ])
    (if_then_else:SI (eq (reg:CC 66 cc)
            (const_int 0 [0]))
        (reg:SI 1869)
        (const_int 0 [0])))

Hot cost: 4 (final)
(const_int -15 [0xfffffffffffffff1])

Hot cost: 4 (final)
(const_int 0 [0])

Hot cost: 0 (final)
(if_then_else:SI (eq (reg:CC 66 cc)
        (const_int 0 [0]))
    (const_int -15 [0xfffffffffffffff1])
    (const_int 0 [0]))

Hot cost: 8 (final)
(set (reg/v:SI 715 [ err ])
    (if_then_else:SI (eq (reg:CC 66 cc)
            (const_int 0 [0]))
        (const_int -15 [0xfffffffffffffff1])
        (const_int 0 [0])))

Hot cost: 8 (final)
(if_then_else:SI (ne (reg:CC 66 cc)
        (const_int 0 [0]))
    (reg/v:SI 715 [ err ])
    (reg:SI 1871))

Hot cost: 4 (final)
(set (reg/v:SI 715 [ err ])
    (if_then_else:SI (ne (reg:CC 66 cc)
            (const_int 0 [0]))
        (reg/v:SI 715 [ err ])
        (reg:SI 1871)))

Hot cost: 4 (final)
(const_int -16 [0xfffffffffffffff0])

Hot cost: 4 (final)
(if_then_else:SI (ne (reg:CC 66 cc)
        (const_int 0 [0]))
    (reg/v:SI 715 [ err ])
    (const_int -16 [0xfffffffffffffff0]))

Hot cost: 8 (final)
(set (reg/v:SI 715 [ err ])
    (if_then_else:SI (ne (reg:CC 66 cc)
            (const_int 0 [0]))
        (reg/v:SI 715 [ err ])
        (const_int -16 [0xfffffffffffffff0])))

Hot cost: 8 (final)
(mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])

Hot cost: 16 (final)
(set (reg:SI 1812 [ VERBOSE ])
    (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32]))

Hot cost: 16 (final)
(symbol_ref:DI ("*.LANCHOR0") [flags 0x182])

Hot cost: 8 (final)
(mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])

Hot cost: 24 (final)
(set (reg:SI 1812 [ VERBOSE ])
    (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32]))

Hot cost: 24 (final)
(mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])

Hot cost: 16 (final)
(set (reg:SI 1819 [ VERBOSE ])
    (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32]))

Hot cost: 16 (final)
(symbol_ref:DI ("*.LANCHOR0") [flags 0x182])

Hot cost: 8 (final)
(mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])

Hot cost: 24 (final)
(set (reg:SI 1819 [ VERBOSE ])
    (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32]))

Hot cost: 24 (final)
(lo_sum:DI (reg/f:DI 1853)
    (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))

Cold cost: 4 (final)
(set (reg/f:DI 1828)
    (lo_sum:DI (reg/f:DI 1853)
        (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])))

Cold cost: 4 (final)
(set (reg:DI 829 [ D.3798 ])
    (reg:DI 1897 [ D.3798 ]))

Hot cost: 4 (final)
(const_int 1 [0x1])

Hot cost: 4 (final)
(set (reg:DI 829 [ D.3798 ])
    (const_int 1 [0x1]))

Hot cost: 4 (final)
rescanning insn with uid = 4389.
GLOBAL CONST-PROP: Replacing reg 1897 in insn 4389 with constant (const_int 1 [0x1])
(set (reg:DI 828 [ D.3798 ])
    (reg:DI 1898 [ D.3798 ]))

Hot cost: 4 (final)
(set (reg:DI 828 [ D.3798 ])
    (const_int 0 [0]))

Hot cost: 4 (final)
rescanning insn with uid = 4390.
GLOBAL CONST-PROP: Replacing reg 1898 in insn 4390 with constant (const_int 0 [0])
(set (reg:DI 829 [ D.3798 ])
    (reg:DI 1897 [ D.3798 ]))

Hot cost: 4 (final)
(const_int 1 [0x1])

Hot cost: 4 (final)
(set (reg:DI 829 [ D.3798 ])
    (const_int 1 [0x1]))

Hot cost: 4 (final)
rescanning insn with uid = 4395.
GLOBAL CONST-PROP: Replacing reg 1897 in insn 4395 with constant (const_int 1 [0x1])
(set (reg:DI 828 [ D.3798 ])
    (reg:DI 1900 [ D.3798 ]))

Hot cost: 4 (final)
(const_int 1 [0x1])

Hot cost: 4 (final)
(set (reg:DI 828 [ D.3798 ])
    (const_int 1 [0x1]))

Hot cost: 4 (final)
rescanning insn with uid = 4396.
GLOBAL CONST-PROP: Replacing reg 1900 in insn 4396 with constant (const_int 1 [0x1])
(set (reg/v:SI 716 [ err ])
    (reg:SI 1872 [ err ]))

Cold cost: 4 (final)
(set (reg/v:SI 716 [ err ])
    (const_int 0 [0]))

Cold cost: 4 (final)
rescanning insn with uid = 4352.
GLOBAL CONST-PROP: Replacing reg 1872 in insn 4352 with constant (const_int 0 [0])
(mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])

Hot cost: 16 (final)
(set (reg:SI 1851 [ VERBOSE ])
    (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32]))

Hot cost: 16 (final)
(symbol_ref:DI ("*.LANCHOR0") [flags 0x182])

Hot cost: 8 (final)
(mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])

Hot cost: 24 (final)
(set (reg:SI 1851 [ VERBOSE ])
    (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32]))

Hot cost: 24 (final)
CPROP of main, 324 basic blocks, 56016 bytes needed, 2 local const props, 0 local copy props, 15 global const props, 0 global copy props



try_optimize_cfg iteration 1

verify found no changes in insn with uid = 307.
Edge 4->5 redirected to 7
deleting block 5
verify found no changes in insn with uid = 456.
Edge 18->19 redirected to 21
deleting block 19
verify found no changes in insn with uid = 515.
Edge 23->24 redirected to 26
deleting block 24
verify found no changes in insn with uid = 573.
Edge 28->29 redirected to 31
deleting block 29
verify found no changes in insn with uid = 593.
Edge 31->32 redirected to 34
deleting block 32
verify found no changes in insn with uid = 661.
Edge 37->38 redirected to 40
deleting block 38
verify found no changes in insn with uid = 681.
Edge 40->41 redirected to 43
deleting block 41
verify found no changes in insn with uid = 749.
Edge 46->47 redirected to 49
deleting block 47
verify found no changes in insn with uid = 769.
Edge 49->50 redirected to 52
deleting block 50
verify found no changes in insn with uid = 837.
Edge 55->56 redirected to 58
deleting block 56
verify found no changes in insn with uid = 857.
Edge 58->59 redirected to 61
deleting block 59
verify found no changes in insn with uid = 1215.
Edge 84->85 redirected to 298
deleting block 85
verify found no changes in insn with uid = 1351.
Edge 93->94 redirected to 96
deleting block 94
Redirecting fallthru edge 99->100 to 101
deleting block 100
verify found no changes in insn with uid = 1584.
Edge 104->105 redirected to 107
deleting block 105
Redirecting fallthru edge 107->108 to 101
deleting block 108
Redirecting fallthru edge 117->118 to 120
deleting block 118
Redirecting fallthru edge 144->145 to 155
deleting block 145
verify found no changes in insn with uid = 2285.
Edge 152->153 redirected to 155
deleting block 153
verify found no changes in insn with uid = 2322.
Edge 155->156 redirected to 158
deleting block 156
verify found no changes in insn with uid = 2457.
Edge 171->172 redirected to 111
deleting block 172
verify found no changes in insn with uid = 2500.
Edge 175->176 redirected to 115
deleting block 176
verify found no changes in insn with uid = 2602.
Edge 180->181 redirected to 184
deleting block 181
verify found no changes in insn with uid = 2646.
Edge 187->188 redirected to 190
deleting block 188
verify found no changes in insn with uid = 2707.
Edge 193->194 redirected to 196
deleting block 194
verify found no changes in insn with uid = 2907.
Edge 209->210 redirected to 212
deleting block 210
Redirecting fallthru edge 215->216 to 218
deleting block 216
verify found no changes in insn with uid = 3216.
Edge 239->240 redirected to 262
deleting block 240
verify found no changes in insn with uid = 3306.
Edge 251->252 redirected to 250
deleting block 252
verify found no changes in insn with uid = 3596.
Edge 283->284 redirected to 288
deleting block 284
verify found no changes in insn with uid = 3635.
Edge 289->290 redirected to 293
deleting block 290
verify found no changes in insn with uid = 3695.
Edge 293->294 redirected to 297
deleting block 294
Redirecting fallthru edge 310->311 to 218
deleting block 311


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  invalidated by call 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;;  hardware regs used 	 31 [sp] 64 [sfp] 65 [ap]
;;  regular block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap]
;;  exit block uses 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;;  regs ever live 	 0[x0] 1[x1] 2[x2] 3[x3] 4[x4] 5[x5] 16[x16] 17[x17] 30[x30] 31[sp] 32[v0] 33[v1] 34[v2] 35[v3] 36[v4] 37[v5] 66[cc]
;;  ref usage 	r0={240d,136u} r1={205d,70u} r2={193d,57u} r3={160d,24u} r4={138d,2u} r5={137d,1u} r6={136d} r7={136d} r8={136d} r9={135d} r10={135d} r11={135d} r12={135d} r13={135d} r14={135d} r15={135d} r16={270d} r17={270d} r18={136d} r29={1d,290u} r30={136d} r31={1d,425u} r32={149d,33u} r33={146d,10u} r34={140d,4u} r35={139d,3u} r36={137d,1u} r37={137d,1u} r38={136d} r39={136d} r48={135d} r49={135d} r50={135d} r51={135d} r52={135d} r53={135d} r54={135d} r55={135d} r56={135d} r57={135d} r58={135d} r59={135d} r60={135d} r61={135d} r62={135d} r63={135d} r64={1d,362u,9e} r65={1d,289u} r66={306d,169u} r240={3d,1u} r243={1d,3u} r244={1d,2u} r245={1d,11u} r246={1d,3u} r259={1d,1u} r261={1d,5u,1e} r262={1d,7u} r263={1d,1u} r266={2d,4u} r269={1d,4u} r283={1d,3u} r285={1d,1u} r286={1d,1u} r287={2d,6u} r289={1d,1u} r290={1d,4u} r291={1d,6u} r293={1d,1u} r294={1d,3u} r301={1d,2u} r303={1d,1u} r309={1d,2u} r311={1d,1u} r317={1d,2u} r319={1d,1u} r320={5d,14u} r328={5d,11u} r329={1d,2u} r331={1d,1u} r339={1d,2u} r341={1d,1u} r349={1d,2u} r351={1d,1u} r360={20d,16u} r386={1d,2u} r397={1d,2u,1e} r400={1d,2u} r406={1d,2u} r408={1d,2u} r410={1d,2u} r414={1d,2u} r416={2d,9u} r421={1d,4u} r424={1d,4u} r425={1d,2u} r427={1d,2u} r430={1d,2u} r431={1d,3u} r432={1d,2u} r433={1d,3u} r434={1d,2u} r435={2d,7u} r436={2d,8u} r438={1d,6u} r441={1d,6u} r442={4d,8u} r443={3d,9u} r444={1d,2u} r447={1d,3u} r456={2d,2u} r457={1d,4u} r460={2d,6u} r461={2d,2u} r463={2d,3u,2e} r464={2d,7u,1e} r468={4d,8u,2e} r469={3d,10u,3e} r473={2d,4u,1e} r476={2d,7u,2e} r478={1d,3u} r480={1d,3u} r482={1d,1u} r484={1d,1u} r485={1d,3u} r487={1d,1u} r489={1d,1u} r490={1d,3u} r492={1d,1u} r494={1d,1u} r496={1d,5u} r499={1d,3u} r501={1d,1u} r503={1d,1u} r504={1d,3u} r506={1d,1u} r508={1d,1u} r509={1d,3u} r511={1d,1u} r513={1d,1u} r515={1d,3u} r519={1d,2u} r520={1d,4u} r523={1d,3u} r525={1d,1u} r527={1d,1u} r528={1d,3u} r530={1d,1u} r532={1d,1u} r533={1d,3u} r535={1d,1u} r537={1d,1u} r539={1d,4u} r540={1d,5u} r544={1d,3u} r546={1d,1u} r548={1d,1u} r549={1d,3u} r551={1d,1u} r553={1d,1u} r554={1d,3u} r556={1d,1u} r558={1d,1u} r560={1d,3u} r566={1d,2u} r567={1d,1u} r571={1d,3u} r572={1d,5u} r575={2d,5u} r576={2d,3u} r578={2d,4u} r581={2d,4u} r582={1d,2u} r583={1d,2u} r590={1d,1u} r592={2d,4u} r596={2d,8u} r599={1d,2u} r600={1d,3u} r603={1d,3u} r604={1d,1u} r606={1d,4u} r608={1d,1u} r609={2d,8u} r610={4d,6u} r611={1d,2u} r613={1d,4u} r618={1d,3u} r623={1d,12u} r624={1d,12u} r625={1d,2u} r626={1d,1u} r638={1d,2u} r640={1d,2u} r643={1d,6u,1e} r646={1d,2u} r647={1d,17u} r653={1d,2u} r659={1d,1u} r666={1d,4u} r668={1d,15u} r672={2d,4u} r674={1d,8u} r675={1d,9u} r679={1d,2u} r688={1d,4u} r690={1d,2u} r692={1d,4u} r694={1d,2u} r695={4d,8u} r708={2d,4u} r710={1d,2u} r712={3d,3u} r714={4d,8u,2e} r715={15d,32u} r716={7d,2u} r720={1d,1u} r727={1d,2u} r731={1d,2u} r732={1d,2u} r733={2d,5u} r734={1d,5u} r735={1d,2u} r737={1d,2u} r738={2d,4u} r739={1d,3u} r741={1d,2u} r742={2d,8u} r745={2d,11u} r746={1d,14u} r747={3d,7u} r750={4d,13u,3e} r751={3d,11u,3e} r752={1d,3u} r753={1d,2u} r754={1d,2u} r763={1d,2u} r770={2d,2u} r775={2d,10u,2e} r776={2d,3u} r777={2d,6u} r782={1d,1u} r785={2d,6u} r788={2d,7u} r789={2d,9u,2e} r790={2d,8u,2e} r791={2d,4u} r795={1d,1u} r799={1d,3u} r800={1d,1u} r805={2d,1u} r806={5d,6u} r809={2d,4u} r811={1d,8u} r826={4d,8u} r828={3d,1u} r829={5d,1u} r830={1d,2u} r831={3d,2u} r837={1d,3u} r838={1d,2u} r839={1d,1u} r840={1d,1u} r842={1d,1u} r843={1d,1u} r844={1d,2u} r847={1d,1u} r848={1d,1u} r849={1d,1u} r850={1d,1u} r851={1d,1u} r852={1d,2u} r854={1d,1u} r855={1d,1u} r856={1d,1u} r857={1d,1u} r858={1d,1u} r859={1d,1u} r860={1d,1u} r861={1d,1u} r862={1d,1u} r863={1d,1u} r864={1d,1u} r865={1d,2u} r866={1d,1u} r867={1d,1u} r868={1d,1u} r869={1d,1u} r870={1d,1u} r872={1d,1u} r873={1d,1u} r874={1d,2u} r875={1d,1u} r876={1d,1u} r877={1d,1u} r878={1d,1u} r879={1d,1u} r881={1d,2u} r882={1d,1u} r883={1d,1u} r885={1d,1u} r888={1d,1u} r889={1d,1u} r890={1d,1u} r892={1d,1u} r894={1d,1u} r895={1d,1u} r896={1d,1u} r897={1d,1u} r899={1d,2u} r900={1d,1u} r901={1d,1u} r903={1d,1u} r906={1d,1u} r907={1d,1u} r908={1d,1u} r910={1d,1u} r912={1d,1u} r913={1d,1u} r914={1d,1u} r915={1d,1u} r917={1d,1u} r919={1d,1u} r921={1d,1u} r922={1d,1u} r923={1d,1u} r924={1d,1u} r926={1d,1u} r927={1d,1u} r929={1d,1u} r930={1d,1u} r931={1d,1u} r933={1d,1u} r935={1d,1u} r936={1d,1u} r937={1d,1u} r938={1d,1u} r940={1d,1u} r942={1d,1u} r944={1d,1u} r945={1d,1u} r946={1d,1u} r947={1d,1u} r949={1d,1u} r950={1d,1u} r952={1d,1u} r953={1d,1u} r954={1d,1u} r956={1d,1u} r958={1d,1u} r959={1d,1u} r960={1d,1u} r961={1d,1u} r963={1d,1u} r965={1d,1u} r967={1d,1u} r968={1d,1u} r969={1d,1u} r970={1d,1u} r972={1d,1u} r973={1d,1u} r975={1d,1u} r976={1d,1u} r977={1d,1u} r979={1d,1u} r981={1d,1u} r982={1d,1u} r983={1d,1u} r984={1d,1u} r986={1d,1u} r988={1d,1u} r990={1d,1u} r991={1d,1u} r992={1d,1u} r993={1d,1u} r995={1d,1u} r996={1d,1u} r998={1d,1u} r999={1d,1u} r1000={1d,1u} r1002={1d,1u} r1004={1d,1u} r1005={1d,1u} r1006={1d,1u} r1007={1d,1u} r1011={1d,1u} r1013={1d,1u} r1015={1d,2u} r1016={1d,1u} r1017={1d,1u} r1018={1d,4u} r1024={1d,1u} r1025={1d,1u} r1026={1d,1u} r1029={1d,1u,1e} r1030={1d,1u} r1031={1d,1u} r1032={1d,1u} r1033={1d,4u} r1039={1d,1u} r1040={1d,1u} r1041={1d,1u} r1044={1d,1u,1e} r1045={1d,1u} r1046={1d,1u} r1047={1d,1u} r1048={1d,4u} r1054={1d,1u} r1055={1d,1u} r1056={1d,1u} r1059={1d,1u,1e} r1060={1d,1u} r1061={1d,1u} r1062={1d,1u} r1063={1d,4u} r1069={1d,1u} r1070={1d,1u} r1071={1d,1u} r1074={1d,1u,1e} r1075={1d,1u} r1076={1d,1u} r1077={1d,1u} r1078={1d,1u} r1079={1d,1u} r1081={1d,1u} r1082={1d,4u} r1086={1d,1u} r1089={1d,1u} r1092={1d,1u} r1093={1d,3u} r1099={1d,1u} r1100={1d,1u} r1102={1d,1u} r1103={1d,8u} r1105={1d,3u,1e} r1108={1d,2u} r1111={1d,2u} r1115={1d,4u} r1127={1d,1u} r1128={1d,1u,1e} r1129={1d,1u} r1130={1d,1u} r1133={1d,1u,1e} r1135={1d,1u} r1136={1d,1u} r1138={1d,2u} r1139={1d,1u} r1142={1d,1u} r1143={1d,6u} r1145={1d,1u} r1149={1d,4u} r1150={1d,1u} r1151={1d,1u} r1164={1d,1u} r1165={1d,1u} r1170={1d,4u} r1180={1d,1u} r1182={1d,1u} r1183={1d,1u} r1184={1d,1u} r1185={1d,1u} r1186={1d,1u} r1187={1d,1u} r1188={1d,1u} r1189={1d,1u} r1190={1d,1u} r1191={1d,1u} r1192={1d,1u} r1193={1d,1u} r1198={1d,1u} r1199={1d,1u} r1200={1d,1u} r1203={1d,9u} r1205={1d,1u} r1208={1d,1u} r1211={1d,1u} r1213={1d,3u} r1221={1d,1u} r1228={1d,1u} r1232={1d,3u,1e} r1235={1d,1u} r1236={1d,1u} r1237={1d,1u} r1238={1d,1u} r1239={1d,1u} r1242={1d,1u} r1245={1d,1u} r1248={1d,1u,1e} r1249={1d,2u} r1251={1d,2u} r1253={1d,1u,1e} r1256={1d,2u} r1259={1d,2u,1e} r1261={1d,1u} r1262={1d,1u} r1263={1d,1u} r1264={1d,2u,1e} r1266={1d,1u} r1267={1d,1u} r1268={1d,1u} r1269={1d,1u} r1270={1d,1u} r1273={1d,2u} r1274={1d,3u,2e} r1276={1d,2u} r1277={1d,1u} r1278={1d,1u} r1279={1d,1u} r1280={1d,1u} r1282={1d,1u} r1283={1d,1u} r1285={1d,3u,2e} r1287={1d,2u} r1289={1d,1u} r1290={1d,1u} r1291={1d,1u} r1293={1d,1u} r1294={1d,1u} r1296={1d,1u} r1297={1d,1u} r1298={1d,1u} r1299={1d,1u} r1300={1d,1u} r1301={1d,1u} r1302={1d,1u} r1303={1d,2u} r1304={1d,3u,2e} r1305={1d,2u} r1306={1d,4u} r1307={1d,1u} r1308={1d,1u} r1309={1d,1u} r1311={1d,1u} r1312={1d,1u} r1313={1d,2u} r1314={1d,3u,2e} r1316={1d,2u} r1318={1d,1u} r1319={1d,1u} r1320={1d,1u} r1322={1d,1u} r1323={1d,1u} r1325={1d,1u} r1327={1d,3u,2e} r1328={1d,2u} r1330={1d,1u} r1331={1d,1u} r1332={1d,1u} r1334={1d,1u} r1335={1d,1u} r1337={1d,1u} r1339={1d,1u} r1340={1d,1u} r1342={1d,1u} r1343={1d,1u,1e} r1345={1d,1u} r1346={1d,1u} r1348={1d,1u} r1349={1d,1u} r1350={1d,1u} r1351={1d,1u} r1352={1d,1u} r1354={1d,1u} r1355={1d,1u} r1356={1d,1u} r1357={1d,1u} r1358={1d,1u} r1359={1d,1u} r1360={1d,1u} r1361={1d,1u} r1362={1d,1u} r1363={1d,1u} r1365={1d,1u} r1366={1d,1u} r1367={1d,1u} r1368={1d,1u} r1369={1d,1u} r1370={1d,1u} r1371={1d,1u} r1372={1d,1u} r1373={1d,1u} r1374={1d,1u} r1375={1d,1u} r1376={1d,1u} r1377={1d,1u} r1378={1d,1u} r1379={1d,1u} r1380={1d,1u} r1381={1d,1u} r1382={1d,1u} r1383={1d,1u} r1384={1d,1u} r1385={1d,1u} r1386={1d,1u} r1387={1d,1u} r1388={1d,1u} r1389={1d,1u} r1390={1d,1u} r1391={1d,1u} r1392={1d,1u} r1393={1d,1u} r1394={1d,1u} r1395={1d,1u} r1396={1d,1u} r1397={1d,1u} r1398={1d,1u} r1402={1d,1u} r1403={1d,1u} r1404={1d,1u} r1407={1d,1u} r1408={1d,1u} r1411={1d,1u} r1414={1d,1u} r1415={1d,1u} r1418={1d,1u} r1419={1d,1u} r1420={1d,1u} r1423={1d,1u} r1425={1d,3u} r1433={1d,1u} r1434={1d,1u} r1435={1d,1u} r1438={1d,1u} r1439={1d,1u} r1441={1d,1u} r1442={1d,3u} r1446={1d,1u} r1447={1d,2u} r1453={1d,1u} r1455={1d,4u} r1466={1d,4u} r1476={1d,2u,1e} r1480={1d,1u,1e} r1482={1d,1u} r1485={1d,4u} r1495={1d,1u} r1497={1d,2u,1e} r1500={1d,1u,1e} r1502={1d,1u} r1504={1d,2u,1e} r1508={1d,1u,1e} r1510={1d,1u} r1513={1d,4u} r1523={1d,1u} r1525={1d,2u,1e} r1528={1d,1u,1e} r1530={1d,1u} r1532={1d,1u} r1533={1d,1u} r1534={1d,1u} r1536={1d,1u} r1537={1d,1u} r1539={1d,1u} r1540={1d,1u} r1541={1d,1u} r1542={1d,1u} r1543={1d,1u} r1544={1d,1u} r1549={1d,1u} r1550={1d,4u} r1560={1d,1u} r1561={1d,1u} r1564={1d,1u} r1566={1d,1u} r1567={1d,1u} r1569={1d,1u} r1570={1d,4u} r1580={1d,1u} r1582={1d,1u} r1583={1d,4u} r1585={1d,6u} r1605={1d,1u} r1606={1d,1u} r1607={1d,1u} r1609={1d,1u} r1613={1d,1u} r1614={1d,1u} r1615={1d,1u} r1616={1d,10u} r1623={1d,1u} r1624={1d,1u} r1625={1d,1u} r1626={1d,1u} r1627={1d,1u} r1628={1d,1u} r1629={1d,1u} r1630={1d,1u} r1633={1d,1u} r1636={1d,1u} r1638={1d,1u} r1639={1d,3u} r1645={1d,1u} r1646={1d,1u} r1647={1d,1u} r1648={1d,1u} r1649={1d,1u} r1652={1d,1u} r1653={1d,1u} r1654={1d,1u} r1656={1d,1u} r1657={1d,1u} r1660={1d,1u} r1661={1d,1u} r1662={1d,1u} r1663={1d,1u} r1664={1d,1u} r1665={1d,1u} r1668={1d,1u} r1669={1d,1u} r1670={1d,1u} r1671={1d,2u} r1673={1d,1u} r1674={1d,1u} r1675={1d,1u} r1678={1d,1u} r1679={1d,1u} r1680={1d,1u} r1683={1d,1u} r1688={1d,1u} r1694={1d,1u} r1695={1d,1u} r1696={1d,1u} r1697={1d,1u} r1698={1d,2u} r1699={1d,1u} r1700={1d,1u} r1701={1d,1u} r1702={1d,1u} r1703={1d,1u} r1704={1d,1u} r1705={1d,1u} r1706={1d,1u} r1707={1d,1u} r1708={1d,1u} r1709={1d,1u} r1710={2d,3u} r1711={1d,1u} r1716={1d,1u} r1717={1d,1u} r1719={1d,1u} r1720={1d,1u} r1722={1d,1u,1e} r1724={1d,1u} r1725={1d,1u} r1726={1d,1u} r1727={1d,1u} r1728={1d,1u} r1730={1d,1u} r1731={1d,1u} r1732={1d,1u} r1733={1d,1u} r1735={1d,1u} r1736={1d,1u} r1737={1d,1u} r1738={1d,1u} r1739={1d,1u} r1741={1d,1u} r1742={1d,1u} r1743={1d,1u} r1744={1d,1u} r1746={1d,1u} r1747={1d,1u} r1748={1d,1u} r1749={1d,1u} r1750={1d,1u} r1751={1d,1u} r1752={1d,1u} r1754={1d,1u} r1755={1d,1u} r1756={1d,1u} r1757={1d,1u} r1758={1d,1u} r1759={1d,1u} r1760={1d,1u} r1761={1d,1u} r1763={1d,1u} r1764={1d,1u} r1765={1d,1u} r1766={1d,1u} r1767={1d,1u} r1768={1d,1u} r1770={1d,1u} r1771={1d,1u} r1775={1d,1u} r1776={1d,1u} r1777={1d,1u} r1778={1d,1u} r1780={1d,1u} r1781={1d,1u} r1783={1d,1u} r1785={1d,1u} r1786={1d,1u} r1788={1d,1u} r1790={1d,1u} r1791={1d,1u} r1793={1d,1u} r1794={1d,1u} r1796={1d,1u} r1799={1d,1u} r1800={1d,1u} r1801={1d,1u} r1802={1d,1u} r1804={1d,1u} r1805={1d,1u} r1806={1d,1u} r1807={1d,1u} r1808={1d,1u} r1812={1d,1u} r1813={1d,1u} r1814={1d,1u} r1816={1d,1u} r1819={1d,1u} r1820={1d,1u} r1821={1d,1u} r1822={1d,1u} r1824={1d,1u} r1825={1d,1u} r1826={1d,1u} r1828={1d,1u} r1831={1d,1u} r1832={1d,1u} r1833={1d,1u} r1834={1d,1u} r1837={1d,1u} r1839={1d,1u} r1842={1d,1u} r1843={1d,1u} r1844={1d,1u} r1845={1d,1u} r1846={1d,1u} r1848={1d,1u} r1851={1d,1u} r1852={1d,1u} r1853={1d,15u} r1854={13d,31u} r1855={4d,8u} r1856={29d,28u} r1857={1d,1u} r1858={1d,1u} r1859={3d,4u} r1860={3d,4u} r1861={1d,19u} r1862={1d,14u} r1863={1d,7u} r1864={1d,1u} r1867={1d,1u} r1869={1d,1u} r1870={1d} r1871={1d,1u} r1872={1d} r1873={1d} r1874={1d,2u} r1875={1d,3u} r1876={1d,1u} r1877={1d,1u} r1878={1d,1u} r1879={1d,3u} r1880={1d,2u} r1881={1d,8u} r1882={1d,2u} r1883={1d,1u} r1884={1d,1u} r1885={1d,1u} r1886={1d,1u} r1887={1d} r1888={1d,2u} r1892={1d,2u} r1895={1d,1u} r1896={1d,1u} r1897={1d} r1898={1d} r1899={1d,1u} r1900={1d} r1901={1d,1u} r1902={1d,1u} r1903={1d,3u} r1904={1d,1u} r1905={1d,3u} r1906={1d,1u} r1907={1d,3u} r1908={1d,1u} r1909={1d,1u} r1910={1d,1u} r1911={1d,1u} 
;;    total ref usage 11501{7838d,3594u,69e} in 2689{2554 regular + 135 call} insns.
;; basic block 2, loop depth 0, count 0, freq 57, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(29){ }u1(31){ }u2(64){ }u3(65){ }}
;; lr  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 66 [cc] 837 838
;; live  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 66 [cc] 837 838
;; live  kill	
(note 287 0 169 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 169 287 170 2 (set (reg/v:SI 837 [ argc ])
        (reg:SI 0 x0 [ argc ])) graph500.c:58 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 0 x0 [ argc ])
        (nil)))
(insn 170 169 171 2 (set (reg/v/f:DI 838 [ argv ])
        (reg:DI 1 x1 [ argv ])) graph500.c:58 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1 x1 [ argv ])
        (nil)))
(note 171 170 289 2 NOTE_INSN_FUNCTION_BEG)
(insn 289 171 290 2 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 837 [ argc ])
            (const_int 1 [0x1]))) graph500.c:65 390 {*cmpsi}
     (nil))
(jump_insn 290 289 4256 2 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) graph500.c:65 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5248 (nil)))
 -> 294)
;;  succ:       4 [52.5%] 
;;              3 [47.5%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

;; basic block 3, loop depth 0, count 0, freq 27
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [47.5%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1854
;; live  kill	
(note 4256 290 4197 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 4197 4256 294 3 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) -1
     (nil))
;;  succ:       84 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

;; basic block 4, loop depth 0, count 0, freq 30
;;  prev block 3, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [52.5%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u8(29){ }u9(31){ }u10(64){ }u11(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 293 839 840
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 0 [x0] 66 [cc] 293 839 840
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 294 4197 295 4 11 "" [1 uses])
(note 295 294 296 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 296 295 297 4 (var_location:SI argc (reg/v:SI 837 [ argc ])) -1
     (nil))
(debug_insn 297 296 298 4 (var_location:DI argv (reg/v/f:DI 838 [ argv ])) -1
     (nil))
(debug_insn 298 297 299 4 (var_location:SI err (const_int 0 [0])) options.c:44 -1
     (nil))
(debug_insn 299 298 300 4 (var_location:SI nset (const_int 0 [0])) options.c:45 -1
     (nil))
(debug_insn 300 299 301 4 (var_location:SI whichset (const_int 0 [0])) options.c:46 -1
     (nil))
(insn 301 300 302 4 (set (reg/f:DI 840)
        (high:DI (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7f3c5d82eab0 *.LC1>))) options.c:48 48 {*movdi_aarch64}
     (nil))
(insn 302 301 303 4 (set (reg/f:DI 839)
        (lo_sum:DI (reg/f:DI 840)
            (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7f3c5d82eab0 *.LC1>))) options.c:48 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 840)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7f3c5d82eab0 *.LC1>)
            (nil))))
(insn 303 302 304 4 (set (reg:DI 0 x0)
        (reg/f:DI 839)) options.c:48 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 839)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7f3c5d82eab0 *.LC1>)
            (nil))))
(call_insn 304 303 305 4 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f3c5e252200 getenv>) [0 getenv S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:48 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f3c5e252200 getenv>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 305 304 306 4 (set (reg/f:DI 293 [ D.3800 ])
        (reg:DI 0 x0)) options.c:48 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 306 305 307 4 (set (reg:CC 66 cc)
        (compare:CC (reg/f:DI 293 [ D.3800 ])
            (const_int 0 [0]))) options.c:48 391 {*cmpdi}
     (expr_list:REG_DEAD (reg/f:DI 293 [ D.3800 ])
        (nil)))
(jump_insn 307 306 308 4 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 313)
            (pc))) options.c:48 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 313)
;;  succ:       6 [85.0%]  (FALLTHRU)
;;              7 [15.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

;; basic block 6, loop depth 0, count 0, freq 25
;;  prev block 4, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [85.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u21(29){ }u22(31){ }u23(64){ }u24(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 842 843
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 842 843
;; live  kill	
(note 308 307 309 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 309 308 311 6 (set (reg/f:DI 842)
        (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:49 48 {*movdi_aarch64}
     (nil))
(insn 311 309 312 6 (set (reg:SI 843)
        (const_int 1 [0x1])) options.c:49 47 {*movsi_aarch64}
     (nil))
(insn 312 311 313 6 (set (mem/c:SI (lo_sum:DI (reg/f:DI 842)
                (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])
        (reg:SI 843)) options.c:49 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 843)
        (expr_list:REG_DEAD (reg/f:DI 842)
            (nil))))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838

;; basic block 7, loop depth 0, count 0, freq 30
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [15.0%] 
;;              6 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u28(29){ }u29(31){ }u30(64){ }u31(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 320 328 360 1013 1864 1908 1909 1910 1911
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838
;; live  gen 	 320 328 360 1013 1864 1908 1909 1910 1911
;; live  kill	
(code_label 313 312 314 7 13 "" [1 uses])
(note 314 313 191 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 191 314 192 7 (set (reg/v:SI 320 [ whichset ])
        (const_int 0 [0])) options.c:117 47 {*movsi_aarch64}
     (nil))
(insn 192 191 193 7 (set (reg/v:SI 328 [ nset ])
        (const_int 0 [0])) options.c:117 47 {*movsi_aarch64}
     (nil))
(insn 193 192 4198 7 (set (reg/v:SI 360 [ err ])
        (const_int 0 [0])) options.c:117 47 {*movsi_aarch64}
     (nil))
(insn 4198 193 932 7 (set (reg/f:DI 1864)
        (high:DI (symbol_ref/f:DI ("*.LC27") [flags 0x82]  <var_decl 0x7f3c5d840870 *.LC27>))) -1
     (nil))
(insn 932 4198 913 7 (set (reg/f:DI 1013)
        (lo_sum:DI (reg/f:DI 1864)
            (symbol_ref/f:DI ("*.LC27") [flags 0x82]  <var_decl 0x7f3c5d840870 *.LC27>))) options.c:51 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC27") [flags 0x82]  <var_decl 0x7f3c5d840870 *.LC27>)
        (nil)))
(insn 913 932 914 7 (set (reg/f:DI 1908)
        (high:DI (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 914 913 321 7 (set (reg/f:DI 1909)
        (lo_sum:DI (reg/f:DI 1908)
            (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>)
        (expr_list:REG_DEAD (reg/f:DI 1010)
            (nil))))
(insn 321 914 322 7 (set (reg/f:DI 1910)
        (high:DI (label_ref 324))) options.c:52 48 {*movdi_aarch64}
     (insn_list:REG_LABEL_OPERAND 324 (nil)))
(insn 322 321 939 7 (set (reg/f:DI 1911)
        (lo_sum:DI (reg/f:DI 1910)
            (label_ref 324))) options.c:52 836 {add_losym_di}
     (expr_list:REG_EQUAL (label_ref 324)
        (expr_list:REG_DEAD (reg/f:DI 846)
            (insn_list:REG_LABEL_OPERAND 324 (nil)))))
;;  succ:       65 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 8, loop depth 0, count 0, freq 161, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       65 [97.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u32(29){ }u33(31){ }u34(64){ }u35(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294
;; lr  def 	 66 [cc] 844
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1909 1911
;; live  gen 	 66 [cc] 844
;; live  kill	
(code_label 939 322 317 8 48 "" [1 uses])
(note 317 939 318 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 318 317 319 8 (set (reg:SI 844)
        (plus:SI (reg/v:SI 294 [ c ])
            (const_int -63 [0xffffffffffffffc1]))) options.c:52 94 {*addsi3_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 294 [ c ])
        (nil)))
(insn 319 318 320 8 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 844)
            (const_int 55 [0x37]))) options.c:52 390 {*cmpsi}
     (nil))
(jump_insn 320 319 4051 8 (set (pc)
        (if_then_else (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 909)
            (pc))) options.c:52 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 909)
;;  succ:       64 [50.0%] 
;;              9 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1909 1911

;; basic block 9, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [50.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u39(29){ }u40(31){ }u41(64){ }u42(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 844 1911
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 844 1013 1909 1911
;; live  gen 	
;; live  kill	 66 [cc]
(note 4051 320 323 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 323 4051 327 9 (parallel [
            (set (pc)
                (mem:DI (unspec [
                            (reg/f:DI 1911)
                            (reg:SI 844)
                        ] UNSPEC_CASESI) [0  S8 A8]))
            (clobber (reg:CC 66 cc))
            (clobber (scratch:DI))
            (clobber (scratch:DI))
            (use (label_ref 324))
        ]) options.c:52 16 {casesi_dispatch}
     (expr_list:REG_DEAD (reg/f:DI 845)
        (expr_list:REG_DEAD (reg:SI 844)
            (expr_list:REG_UNUSED (reg:CC 66 cc)
                (nil))))
 -> 324)
;;  succ:       64 [4.0%] 
;;              11 [8.0%]  (LOOP_EXIT)
;;              28 [8.0%] 
;;              37 [8.0%] 
;;              46 [8.0%] 
;;              55 [8.0%] 
;;              13 [8.0%] 
;;              12 [8.0%] 
;;              23 [8.0%] 
;;              14 [8.0%] 
;;              16 [8.0%] 
;;              18 [8.0%] 
;;              10 [8.0%]  (LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 10, loop depth 0, count 0, freq 12
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%]  (LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u46(29){ }u47(31){ }u48(64){ }u49(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 847 848 849 850
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 847 848 849 850
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 327 323 328 10 28 "" [1 uses])
(note 328 327 329 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(debug_insn 329 328 330 10 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>)) -1
     (nil))
(insn 330 329 331 10 (set (reg/f:DI 848)
        (high:DI (symbol_ref/f:DI ("*.LC2") [flags 0x82]  <var_decl 0x7f3c5d82eb40 *.LC2>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 48 {*movdi_aarch64}
     (nil))
(insn 331 330 332 10 (set (reg/f:DI 847)
        (lo_sum:DI (reg/f:DI 848)
            (symbol_ref/f:DI ("*.LC2") [flags 0x82]  <var_decl 0x7f3c5d82eb40 *.LC2>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 848)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x82]  <var_decl 0x7f3c5d82eb40 *.LC2>)
            (nil))))
(insn 332 331 333 10 (set (reg/f:DI 850)
        (high:DI (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 48 {*movdi_aarch64}
     (nil))
(insn 333 332 334 10 (set (reg/f:DI 849)
        (lo_sum:DI (reg/f:DI 850)
            (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 850)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>)
            (nil))))
(insn 334 333 335 10 (set (reg:SI 3 x3)
        (const_int 0 [0])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 47 {*movsi_aarch64}
     (nil))
(insn 335 334 336 10 (set (reg:DI 2 x2)
        (reg/f:DI 847)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 847)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x82]  <var_decl 0x7f3c5d82eb40 *.LC2>)
            (nil))))
(insn 336 335 337 10 (set (reg:DI 1 x1)
        (reg/f:DI 849)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 849)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x82]  <var_decl 0x7f3c5d82ebd0 *.LC3>)
            (nil))))
(insn 337 336 338 10 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 47 {*movsi_aarch64}
     (nil))
(call_insn 338 337 339 10 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7f3c5e252700 __printf_chk>) [0 __printf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7f3c5e252700 __printf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:SI (use (reg:SI 3 x3))
                            (nil))))))))
(debug_insn 339 338 340 10 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:54 -1
     (nil))
(insn 340 339 341 10 (set (reg:SI 0 x0)
        (const_int 0 [0])) options.c:55 47 {*movsi_aarch64}
     (nil))
(call_insn 341 340 343 10 (parallel [
            (call (mem:DI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>) [0 __builtin_exit S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:55 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 11, loop depth 0, count 0, freq 12
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%]  (LOOP_EXIT)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u61(29){ }u62(31){ }u63(64){ }u64(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 851 852 854 855 856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 851 852 854 855 856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 343 341 344 11 16 "" [2 uses])
(note 344 343 345 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 345 344 346 11 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>)) -1
     (nil))
(insn 346 345 347 11 (set (reg:DF 851)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [1  S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 54 {*movdf_aarch64}
     (expr_list:REG_EQUAL (const_double:DF 5.00000000000000444089209850062616169452667236328125e-2 [0x0.cccccccccccdp-4])
        (nil)))
(insn 347 346 349 11 (set (reg:DF 852)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [1  S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 54 {*movdf_aarch64}
     (expr_list:REG_EQUAL (const_double:DF 1.90000000000000002220446049250313080847263336181640625e-1 [0x0.c28f5c28f5c29p-2])
        (nil)))
(insn 349 347 350 11 (set (reg:DF 854)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [1  S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 54 {*movdf_aarch64}
     (expr_list:REG_EQUAL (const_double:DF 5.6999999999999995115018691649311222136020660400390625e-1 [0x0.91eb851eb851e8p+0])
        (nil)))
(insn 350 349 351 11 (set (reg/f:DI 856)
        (high:DI (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 48 {*movdi_aarch64}
     (nil))
(insn 351 350 352 11 (set (reg/f:DI 855)
        (lo_sum:DI (reg/f:DI 856)
            (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 856)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>)
            (nil))))
(insn 352 351 353 11 (set (reg:DF 35 v3)
        (reg:DF 851)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 851)
        (expr_list:REG_EQUAL (const_double:DF 5.00000000000000444089209850062616169452667236328125e-2 [0x0.cccccccccccdp-4])
            (nil))))
(insn 353 352 354 11 (set (reg:DF 34 v2)
        (reg:DF 852)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 54 {*movdf_aarch64}
     (expr_list:REG_EQUAL (const_double:DF 1.90000000000000002220446049250313080847263336181640625e-1 [0x0.c28f5c28f5c29p-2])
        (nil)))
(insn 354 353 355 11 (set (reg:DF 33 v1)
        (reg:DF 852)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 852)
        (expr_list:REG_EQUAL (const_double:DF 1.90000000000000002220446049250313080847263336181640625e-1 [0x0.c28f5c28f5c29p-2])
            (nil))))
(insn 355 354 356 11 (set (reg:DF 32 v0)
        (reg:DF 854)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 854)
        (expr_list:REG_EQUAL (const_double:DF 5.6999999999999995115018691649311222136020660400390625e-1 [0x0.91eb851eb851e8p+0])
            (nil))))
(insn 356 355 357 11 (set (reg:DI 3 x3)
        (const_int 16 [0x10])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 48 {*movdi_aarch64}
     (nil))
(insn 357 356 358 11 (set (reg:DI 2 x2)
        (const_int 14 [0xe])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 48 {*movdi_aarch64}
     (nil))
(insn 358 357 359 11 (set (reg:DI 1 x1)
        (reg/f:DI 855)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 855)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC7") [flags 0x82]  <var_decl 0x7f3c5d82ec60 *.LC7>)
            (nil))))
(insn 359 358 360 11 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 47 {*movsi_aarch64}
     (nil))
(call_insn 360 359 361 11 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7f3c5e252700 __printf_chk>) [0 __printf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:104 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DF 35 v3)
        (expr_list:REG_DEAD (reg:DF 34 v2)
            (expr_list:REG_DEAD (reg:DF 33 v1)
                (expr_list:REG_DEAD (reg:DF 32 v0)
                    (expr_list:REG_DEAD (reg:DI 3 x3)
                        (expr_list:REG_DEAD (reg:DI 2 x2)
                            (expr_list:REG_DEAD (reg:DI 1 x1)
                                (expr_list:REG_UNUSED (reg:SI 0 x0)
                                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7f3c5e252700 __printf_chk>)
                                        (nil))))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (expr_list:DF (use (reg:DF 32 v0))
                                (expr_list:DF (use (reg:DF 33 v1))
                                    (expr_list:DF (use (reg:DF 34 v2))
                                        (expr_list:DF (use (reg:DF 35 v3))
                                            (nil))))))))))))
(debug_insn 361 360 362 11 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:59 -1
     (nil))
(insn 362 361 363 11 (set (reg:SI 0 x0)
        (const_int 0 [0])) options.c:105 47 {*movsi_aarch64}
     (nil))
(call_insn 363 362 365 11 (parallel [
            (call (mem:DI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>) [0 __builtin_exit S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:105 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 12, loop depth 0, count 0, freq 12
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u83(29){ }u84(31){ }u85(64){ }u86(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 857 858 859
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 857 858 859
;; live  kill	
(code_label 365 363 366 12 23 "" [1 uses])
(note 366 365 367 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 367 366 368 12 (set (reg/f:DI 858)
        (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:108 48 {*movdi_aarch64}
     (nil))
(insn 368 367 369 12 (set (reg/f:DI 857)
        (lo_sum:DI (reg/f:DI 858)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:108 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 858)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (nil))))
(insn 369 368 370 12 (set (reg:SI 859)
        (const_int 1 [0x1])) options.c:108 47 {*movsi_aarch64}
     (nil))
(insn 370 369 373 12 (set (mem/c:SI (reg/f:DI 857) [3 VERBOSE+0 S4 A32])
        (reg:SI 859)) options.c:108 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 859)
        (expr_list:REG_DEAD (reg/f:DI 857)
            (nil))))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 13, loop depth 0, count 0, freq 12
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u90(29){ }u91(31){ }u92(64){ }u93(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 860 861 862
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 860 861 862
;; live  kill	
(code_label 373 370 374 13 22 "" [1 uses])
(note 374 373 375 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 375 374 376 13 (set (reg/f:DI 861)
        (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:111 48 {*movdi_aarch64}
     (nil))
(insn 376 375 377 13 (set (reg/f:DI 860)
        (lo_sum:DI (reg/f:DI 861)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:111 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 861)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (nil))))
(insn 377 376 378 13 (set (reg:SI 862)
        (const_int 1 [0x1])) options.c:111 47 {*movsi_aarch64}
     (nil))
(insn 378 377 381 13 (set (mem/c:SI (plus:DI (reg/f:DI 860)
                (const_int 4 [0x4])) [3 use_RMAT+0 S4 A32])
        (reg:SI 862)) options.c:111 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 862)
        (expr_list:REG_DEAD (reg/f:DI 860)
            (nil))))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 14, loop depth 0, count 0, freq 12
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u97(29){ }u98(31){ }u99(64){ }u100(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 863 864 865 866 867
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 66 [cc] 863 864 865 866 867
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 381 378 382 14 25 "" [1 uses])
(note 382 381 383 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 384 14 (set (reg/f:DI 864)
        (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:114 48 {*movdi_aarch64}
     (nil))
(insn 384 383 385 14 (set (reg/f:DI 863)
        (lo_sum:DI (reg/f:DI 864)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:114 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 864)
        (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
            (nil))))
(insn 385 384 386 14 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 863) [2 optarg+0 S8 A64])) options.c:114 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 863)
        (nil)))
(call_insn 386 385 387 14 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__strdup") [flags 0x41]  <function_decl 0x7f3c5e252600 __strdup>) [0 __strdup S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:114 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__strdup") [flags 0x41]  <function_decl 0x7f3c5e252600 __strdup>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 387 386 389 14 (set (reg/f:DI 865)
        (reg:DI 0 x0)) options.c:114 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_NOALIAS (reg/f:DI 865)
            (nil))))
(insn 389 387 390 14 (set (reg/f:DI 867)
        (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:114 48 {*movdi_aarch64}
     (nil))
(insn 390 389 391 14 (set (reg/f:DI 866)
        (lo_sum:DI (reg/f:DI 867)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:114 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 867)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (nil))))
(insn 391 390 392 14 (set (mem/f/c:DI (plus:DI (reg/f:DI 866)
                (const_int 8 [0x8])) [2 dumpname+0 S8 A64])
        (reg/f:DI 865)) options.c:114 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 866)
        (nil)))
(insn 392 391 393 14 (set (reg:CC 66 cc)
        (compare:CC (reg/f:DI 865)
            (const_int 0 [0]))) options.c:115 391 {*cmpdi}
     (expr_list:REG_DEAD (reg/f:DI 865)
        (nil)))
(jump_insn 393 392 394 14 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 926)
            (pc))) options.c:115 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9328 (nil)))
 -> 926)
;;  succ:       15 [6.7%]  (FALLTHRU)
;;              65 [93.3%]  (DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 15, loop depth 0, count 0, freq 1
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [6.7%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u112(29){ }u113(31){ }u114(64){ }u115(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 868 869 870 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 868 869 870 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 394 393 395 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(debug_insn 395 394 396 15 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:116 -1
     (nil))
(debug_insn 396 395 397 15 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>)) options.c:116 -1
     (nil))
(insn 397 396 398 15 (set (reg/f:DI 869)
        (high:DI (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 398 397 399 15 (set (reg/f:DI 868)
        (lo_sum:DI (reg/f:DI 869)
            (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 869)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>)
            (nil))))
(insn 399 398 400 15 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:116 48 {*movdi_aarch64}
     (nil))
(insn 400 399 401 15 (set (reg/f:DI 870)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:116 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 401 400 402 15 (set (reg:DI 2 x2)
        (reg/f:DI 868)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 868)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x82]  <var_decl 0x7f3c5d82ecf0 *.LC8>)
            (nil))))
(insn 402 401 403 15 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 403 402 404 15 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 870) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 870)
        (nil)))
(call_insn 404 403 405 15 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 405 404 406 15 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:116 -1
     (nil))
(debug_insn 406 405 407 15 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:116 -1
     (nil))
(debug_insn 407 406 190 15 (var_location:SI err (const_int 1 [0x1])) options.c:117 -1
     (nil))
(insn 190 407 410 15 (set (reg/v:SI 360 [ err ])
        (const_int 1 [0x1])) options.c:117 47 {*movsi_aarch64}
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 16, loop depth 0, count 0, freq 12
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u124(29){ }u125(31){ }u126(64){ }u127(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 872 873 874 875 876
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 66 [cc] 872 873 874 875 876
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 410 190 411 16 26 "" [1 uses])
(note 411 410 412 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 412 411 413 16 (set (reg/f:DI 873)
        (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:121 48 {*movdi_aarch64}
     (nil))
(insn 413 412 414 16 (set (reg/f:DI 872)
        (lo_sum:DI (reg/f:DI 873)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:121 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 873)
        (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
            (nil))))
(insn 414 413 415 16 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 872) [2 optarg+0 S8 A64])) options.c:121 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 872)
        (nil)))
(call_insn 415 414 416 16 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__strdup") [flags 0x41]  <function_decl 0x7f3c5e252600 __strdup>) [0 __strdup S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:121 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__strdup") [flags 0x41]  <function_decl 0x7f3c5e252600 __strdup>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 416 415 418 16 (set (reg/f:DI 874)
        (reg:DI 0 x0)) options.c:121 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_NOALIAS (reg/f:DI 874)
            (nil))))
(insn 418 416 419 16 (set (reg/f:DI 876)
        (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:121 48 {*movdi_aarch64}
     (nil))
(insn 419 418 420 16 (set (reg/f:DI 875)
        (lo_sum:DI (reg/f:DI 876)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) options.c:121 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 876)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (nil))))
(insn 420 419 421 16 (set (mem/f/c:DI (plus:DI (reg/f:DI 875)
                (const_int 16 [0x10])) [2 rootname+0 S8 A64])
        (reg/f:DI 874)) options.c:121 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 875)
        (nil)))
(insn 421 420 422 16 (set (reg:CC 66 cc)
        (compare:CC (reg/f:DI 874)
            (const_int 0 [0]))) options.c:122 391 {*cmpdi}
     (expr_list:REG_DEAD (reg/f:DI 874)
        (nil)))
(jump_insn 422 421 423 16 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 926)
            (pc))) options.c:122 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9328 (nil)))
 -> 926)
;;  succ:       17 [6.7%]  (FALLTHRU)
;;              65 [93.3%]  (DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 17, loop depth 0, count 0, freq 1
;;  prev block 16, next block 18, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       16 [6.7%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u139(29){ }u140(31){ }u141(64){ }u142(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 877 878 879 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 877 878 879 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 423 422 424 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 424 423 425 17 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:123 -1
     (nil))
(debug_insn 425 424 426 17 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>)) options.c:123 -1
     (nil))
(insn 426 425 427 17 (set (reg/f:DI 878)
        (high:DI (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 427 426 428 17 (set (reg/f:DI 877)
        (lo_sum:DI (reg/f:DI 878)
            (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 878)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>)
            (nil))))
(insn 428 427 429 17 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:123 48 {*movdi_aarch64}
     (nil))
(insn 429 428 430 17 (set (reg/f:DI 879)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:123 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 430 429 431 17 (set (reg:DI 2 x2)
        (reg/f:DI 877)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 877)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x82]  <var_decl 0x7f3c5d82ed80 *.LC9>)
            (nil))))
(insn 431 430 432 17 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 432 431 433 17 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 879) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 879)
        (nil)))
(call_insn 433 432 434 17 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 434 433 435 17 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:123 -1
     (nil))
(debug_insn 435 434 436 17 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:123 -1
     (nil))
(debug_insn 436 435 189 17 (var_location:SI err (const_int 1 [0x1])) options.c:124 -1
     (nil))
(insn 189 436 439 17 (set (reg/v:SI 360 [ err ])
        (const_int 1 [0x1])) options.c:124 47 {*movsi_aarch64}
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 18, loop depth 0, count 0, freq 12
;;  prev block 17, next block 20, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u151(29){ }u152(31){ }u153(64){ }u154(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 301 303 881 882 883 885 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 301 303 881 882 883 885 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 439 189 440 18 27 "" [1 uses])
(note 440 439 441 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 441 440 442 18 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>) [0 __errno_location S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:128 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 442 441 443 18 (set (reg/f:DI 301 [ D.3807 ])
        (reg:DI 0 x0)) options.c:128 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 443 442 444 18 (set (mem:SI (reg/f:DI 301 [ D.3807 ]) [3 *_125+0 S4 A32])
        (const_int 0 [0])) options.c:128 47 {*movsi_aarch64}
     (nil))
(insn 444 443 445 18 (set (reg/f:DI 882)
        (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:129 48 {*movdi_aarch64}
     (nil))
(insn 445 444 446 18 (set (reg/f:DI 881)
        (lo_sum:DI (reg/f:DI 882)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:129 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 882)
        (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
            (nil))))
(insn 446 445 447 18 (set (reg:SI 2 x2)
        (const_int 10 [0xa])) options.c:129 47 {*movsi_aarch64}
     (nil))
(insn 447 446 448 18 (set (reg:DI 1 x1)
        (const_int 0 [0])) options.c:129 48 {*movdi_aarch64}
     (nil))
(insn 448 447 449 18 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 881) [2 optarg+0 S8 A64])) options.c:129 48 {*movdi_aarch64}
     (nil))
(call_insn 449 448 450 18 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f3c5e252100 strtol>) [0 strtol S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:129 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f3c5e252100 strtol>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 450 449 451 18 (set (reg:DI 303 [ D.3798 ])
        (reg:DI 0 x0)) options.c:129 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 451 450 452 18 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:129 48 {*movdi_aarch64}
     (nil))
(insn 452 451 453 18 (set (reg/f:DI 883)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:129 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 453 452 454 18 (set (mem/c:DI (reg/f:DI 883) [4 SCALE+0 S8 A64])
        (reg:DI 303 [ D.3798 ])) options.c:129 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 883)
        (expr_list:REG_DEAD (reg:DI 303 [ D.3798 ])
            (nil))))
(insn 454 453 455 18 (set (reg:SI 885 [ *_125 ])
        (mem:SI (reg/f:DI 301 [ D.3807 ]) [3 *_125+0 S4 A32])) options.c:130 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 301 [ D.3807 ])
        (nil)))
(insn 455 454 456 18 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 885 [ *_125 ])
            (const_int 0 [0]))) options.c:130 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 885 [ *_125 ])
        (nil)))
(jump_insn 456 455 457 18 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 474)
            (pc))) options.c:130 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 474)
;;  succ:       20 [29.0%]  (FALLTHRU)
;;              21 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 881 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 881 1013 1854 1909 1911

;; basic block 20, loop depth 0, count 0, freq 4
;;  prev block 18, next block 21, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       18 [29.0%]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u171(29){ }u172(31){ }u173(64){ }u174(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 881 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 881
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 888 889 890 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 881 1013 1854 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 888 889 890 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 457 456 458 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(debug_insn 458 457 459 20 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:131 -1
     (nil))
(debug_insn 459 458 462 20 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>)) options.c:131 -1
     (nil))
(insn 462 459 463 20 (set (reg/f:DI 889)
        (high:DI (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 463 462 464 20 (set (reg/f:DI 888)
        (lo_sum:DI (reg/f:DI 889)
            (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 889)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>)
            (nil))))
(insn 464 463 465 20 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:131 48 {*movdi_aarch64}
     (nil))
(insn 465 464 466 20 (set (reg/f:DI 890)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:131 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 466 465 467 20 (set (reg:DI 3 x3)
        (mem/f/c:DI (reg/f:DI 881) [2 optarg+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 881)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>) [2 optarg+0 S8 A64])
            (nil))))
(insn 467 466 468 20 (set (reg:DI 2 x2)
        (reg/f:DI 888)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 888)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x82]  <var_decl 0x7f3c5d82ee10 *.LC10>)
            (nil))))
(insn 468 467 469 20 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 469 468 470 20 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 890) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 890)
        (nil)))
(call_insn 470 469 471 20 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:SI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
(debug_insn 471 470 472 20 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:131 -1
     (nil))
(debug_insn 472 471 473 20 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:131 -1
     (nil))
(debug_insn 473 472 172 20 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:132 -1
     (nil))
(insn 172 473 474 20 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:132 47 {*movsi_aarch64}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

;; basic block 21, loop depth 0, count 0, freq 12
;;  prev block 20, next block 22, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       18 [71.0%] 
;;              20 [100.0%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u187(29){ }u188(31){ }u189(64){ }u190(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 892 894
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 892 894
;; live  kill	
(code_label 474 172 475 21 30 "" [1 uses])
(note 475 474 476 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(debug_insn 476 475 478 21 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 478 476 479 21 (set (reg/f:DI 892)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:134 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1854)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (nil))))
(insn 479 478 480 21 (set (reg:DI 894 [ SCALE ])
        (mem/c:DI (reg/f:DI 892) [4 SCALE+0 S8 A64])) options.c:134 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 892)
        (nil)))
(insn 480 479 481 21 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 894 [ SCALE ])
            (const_int 0 [0]))) options.c:134 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 894 [ SCALE ])
        (nil)))
(jump_insn 481 480 482 21 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 926)
            (pc))) options.c:134 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 8688 (nil)))
 -> 926)
;;  succ:       22 [13.1%]  (FALLTHRU)
;;              65 [86.9%]  (DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 22, loop depth 0, count 0, freq 2
;;  prev block 21, next block 23, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       21 [13.1%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u196(29){ }u197(31){ }u198(64){ }u199(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 895 896 897 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 895 896 897 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 482 481 483 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(debug_insn 483 482 484 22 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:135 -1
     (nil))
(debug_insn 484 483 485 22 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>)) options.c:135 -1
     (nil))
(insn 485 484 486 22 (set (reg/f:DI 896)
        (high:DI (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 486 485 487 22 (set (reg/f:DI 895)
        (lo_sum:DI (reg/f:DI 896)
            (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 896)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>)
            (nil))))
(insn 487 486 488 22 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:135 48 {*movdi_aarch64}
     (nil))
(insn 488 487 489 22 (set (reg/f:DI 897)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:135 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 489 488 490 22 (set (reg:DI 2 x2)
        (reg/f:DI 895)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 895)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x82]  <var_decl 0x7f3c5d82eea0 *.LC11>)
            (nil))))
(insn 490 489 491 22 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 491 490 492 22 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 897) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 897)
        (nil)))
(call_insn 492 491 493 22 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 493 492 494 22 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:135 -1
     (nil))
(debug_insn 494 493 495 22 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:135 -1
     (nil))
(debug_insn 495 494 188 22 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:136 -1
     (nil))
(insn 188 495 498 22 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:136 47 {*movsi_aarch64}
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 23, loop depth 0, count 0, freq 12
;;  prev block 22, next block 25, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u208(29){ }u209(31){ }u210(64){ }u211(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 309 311 899 900 901 903 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 309 311 899 900 901 903 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 498 188 499 23 24 "" [1 uses])
(note 499 498 500 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 500 499 501 23 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>) [0 __errno_location S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:140 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 501 500 502 23 (set (reg/f:DI 309 [ D.3807 ])
        (reg:DI 0 x0)) options.c:140 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 502 501 503 23 (set (mem:SI (reg/f:DI 309 [ D.3807 ]) [3 *_133+0 S4 A32])
        (const_int 0 [0])) options.c:140 47 {*movsi_aarch64}
     (nil))
(insn 503 502 504 23 (set (reg/f:DI 900)
        (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:141 48 {*movdi_aarch64}
     (nil))
(insn 504 503 505 23 (set (reg/f:DI 899)
        (lo_sum:DI (reg/f:DI 900)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:141 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 900)
        (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
            (nil))))
(insn 505 504 506 23 (set (reg:SI 2 x2)
        (const_int 10 [0xa])) options.c:141 47 {*movsi_aarch64}
     (nil))
(insn 506 505 507 23 (set (reg:DI 1 x1)
        (const_int 0 [0])) options.c:141 48 {*movdi_aarch64}
     (nil))
(insn 507 506 508 23 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 899) [2 optarg+0 S8 A64])) options.c:141 48 {*movdi_aarch64}
     (nil))
(call_insn 508 507 509 23 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f3c5e252100 strtol>) [0 strtol S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:141 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f3c5e252100 strtol>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 509 508 510 23 (set (reg:DI 311 [ D.3798 ])
        (reg:DI 0 x0)) options.c:141 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 510 509 511 23 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:141 48 {*movdi_aarch64}
     (nil))
(insn 511 510 512 23 (set (reg/f:DI 901)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:141 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 512 511 513 23 (set (mem/c:DI (plus:DI (reg/f:DI 901)
                (const_int 8 [0x8])) [4 edgefactor+0 S8 A64])
        (reg:DI 311 [ D.3798 ])) options.c:141 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 901)
        (expr_list:REG_DEAD (reg:DI 311 [ D.3798 ])
            (nil))))
(insn 513 512 514 23 (set (reg:SI 903 [ *_133 ])
        (mem:SI (reg/f:DI 309 [ D.3807 ]) [3 *_133+0 S4 A32])) options.c:142 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 309 [ D.3807 ])
        (nil)))
(insn 514 513 515 23 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 903 [ *_133 ])
            (const_int 0 [0]))) options.c:142 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 903 [ *_133 ])
        (nil)))
(jump_insn 515 514 516 23 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 533)
            (pc))) options.c:142 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 533)
;;  succ:       25 [29.0%]  (FALLTHRU)
;;              26 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 899 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 899 1013 1854 1909 1911

;; basic block 25, loop depth 0, count 0, freq 4
;;  prev block 23, next block 26, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       23 [29.0%]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u228(29){ }u229(31){ }u230(64){ }u231(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 899 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 899
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 906 907 908 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 899 1013 1854 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 906 907 908 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 516 515 517 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(debug_insn 517 516 518 25 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:143 -1
     (nil))
(debug_insn 518 517 521 25 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>)) options.c:143 -1
     (nil))
(insn 521 518 522 25 (set (reg/f:DI 907)
        (high:DI (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 522 521 523 25 (set (reg/f:DI 906)
        (lo_sum:DI (reg/f:DI 907)
            (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 907)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>)
            (nil))))
(insn 523 522 524 25 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:143 48 {*movdi_aarch64}
     (nil))
(insn 524 523 525 25 (set (reg/f:DI 908)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:143 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 525 524 526 25 (set (reg:DI 3 x3)
        (mem/f/c:DI (reg/f:DI 899) [2 optarg+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 899)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>) [2 optarg+0 S8 A64])
            (nil))))
(insn 526 525 527 25 (set (reg:DI 2 x2)
        (reg/f:DI 906)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 906)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x82]  <var_decl 0x7f3c5d840000 *.LC12>)
            (nil))))
(insn 527 526 528 25 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 528 527 529 25 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 908) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 908)
        (nil)))
(call_insn 529 528 530 25 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:SI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
(debug_insn 530 529 531 25 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:143 -1
     (nil))
(debug_insn 531 530 532 25 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:143 -1
     (nil))
(debug_insn 532 531 173 25 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:144 -1
     (nil))
(insn 173 532 533 25 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:144 47 {*movsi_aarch64}
     (nil))
;;  succ:       26 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

;; basic block 26, loop depth 0, count 0, freq 12
;;  prev block 25, next block 27, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       23 [71.0%] 
;;              25 [100.0%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u244(29){ }u245(31){ }u246(64){ }u247(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 910 912
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 910 912
;; live  kill	
(code_label 533 173 534 26 31 "" [1 uses])
(note 534 533 535 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(debug_insn 535 534 537 26 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 537 535 538 26 (set (reg/f:DI 910)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:146 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1854)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (nil))))
(insn 538 537 539 26 (set (reg:DI 912 [ edgefactor ])
        (mem/c:DI (plus:DI (reg/f:DI 910)
                (const_int 8 [0x8])) [4 edgefactor+0 S8 A64])) options.c:146 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 910)
        (nil)))
(insn 539 538 540 26 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 912 [ edgefactor ])
            (const_int 0 [0]))) options.c:146 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 912 [ edgefactor ])
        (nil)))
(jump_insn 540 539 541 26 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 926)
            (pc))) options.c:146 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 8688 (nil)))
 -> 926)
;;  succ:       27 [13.1%]  (FALLTHRU)
;;              65 [86.9%]  (DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 27, loop depth 0, count 0, freq 2
;;  prev block 26, next block 28, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       26 [13.1%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u253(29){ }u254(31){ }u255(64){ }u256(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 913 914 915 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 913 914 915 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 541 540 542 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(debug_insn 542 541 543 27 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:147 -1
     (nil))
(debug_insn 543 542 544 27 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>)) options.c:147 -1
     (nil))
(insn 544 543 545 27 (set (reg/f:DI 914)
        (high:DI (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 545 544 546 27 (set (reg/f:DI 913)
        (lo_sum:DI (reg/f:DI 914)
            (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 914)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>)
            (nil))))
(insn 546 545 547 27 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:147 48 {*movdi_aarch64}
     (nil))
(insn 547 546 548 27 (set (reg/f:DI 915)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:147 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 548 547 549 27 (set (reg:DI 2 x2)
        (reg/f:DI 913)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 913)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC13") [flags 0x82]  <var_decl 0x7f3c5d840090 *.LC13>)
            (nil))))
(insn 549 548 550 27 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 550 549 551 27 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 915) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 915)
        (nil)))
(call_insn 551 550 552 27 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 552 551 553 27 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:147 -1
     (nil))
(debug_insn 553 552 554 27 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:147 -1
     (nil))
(debug_insn 554 553 187 27 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:148 -1
     (nil))
(insn 187 554 557 27 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:148 47 {*movsi_aarch64}
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 28, loop depth 0, count 0, freq 12
;;  prev block 27, next block 30, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u265(29){ }u266(31){ }u267(64){ }u268(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 317 319 917 919 921 1854 1855
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 317 319 917 919 921 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 557 187 558 28 18 "" [2 uses])
(note 558 557 559 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 559 558 560 28 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>) [0 __errno_location S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:153 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 560 559 561 28 (set (reg/f:DI 317 [ D.3807 ])
        (reg:DI 0 x0)) options.c:153 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 561 560 562 28 (set (mem:SI (reg/f:DI 317 [ D.3807 ]) [3 *_141+0 S4 A32])
        (const_int 0 [0])) options.c:153 47 {*movsi_aarch64}
     (nil))
(insn 562 561 563 28 (set (reg/f:DI 1855)
        (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:154 48 {*movdi_aarch64}
     (nil))
(insn 563 562 564 28 (set (reg/f:DI 917)
        (lo_sum:DI (reg/f:DI 1855)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:154 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
        (nil)))
(insn 564 563 565 28 (set (reg:DI 1 x1)
        (const_int 0 [0])) options.c:154 48 {*movdi_aarch64}
     (nil))
(insn 565 564 566 28 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 917) [2 optarg+0 S8 A64])) options.c:154 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 917)
        (nil)))
(call_insn 566 565 567 28 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f3c5e252500 strtod>) [0 strtod S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:154 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_DEAD (reg:DI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f3c5e252500 strtod>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 567 566 568 28 (set (reg:DF 319 [ D.3804 ])
        (reg:DF 32 v0)) options.c:154 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 568 567 569 28 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:154 48 {*movdi_aarch64}
     (nil))
(insn 569 568 570 28 (set (reg/f:DI 919)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:154 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 570 569 571 28 (set (mem/c:DF (plus:DI (reg/f:DI 919)
                (const_int 16 [0x10])) [1 A+0 S8 A64])
        (reg:DF 319 [ D.3804 ])) options.c:154 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 919)
        (expr_list:REG_DEAD (reg:DF 319 [ D.3804 ])
            (nil))))
(insn 571 570 572 28 (set (reg:SI 921 [ D.3797 ])
        (and:SI (reg/v:SI 320 [ whichset ])
            (const_int 1 [0x1]))) options.c:155 465 {andsi3}
     (nil))
(insn 572 571 573 28 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 921 [ D.3797 ])
            (const_int 0 [0]))) options.c:155 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 921 [ D.3797 ])
        (nil)))
(jump_insn 573 572 574 28 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 588)
            (pc))) options.c:155 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 588)
;;  succ:       30 [29.0%]  (FALLTHRU)
;;              31 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1854 1855 1909 1911

;; basic block 30, loop depth 0, count 0, freq 4
;;  prev block 28, next block 31, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       28 [29.0%]  (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u284(29){ }u285(31){ }u286(64){ }u287(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 922 923 924 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 922 923 924 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 574 573 575 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(debug_insn 575 574 576 30 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:156 -1
     (nil))
(debug_insn 576 575 577 30 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>)) options.c:156 -1
     (nil))
(insn 577 576 578 30 (set (reg/f:DI 923)
        (high:DI (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 578 577 579 30 (set (reg/f:DI 922)
        (lo_sum:DI (reg/f:DI 923)
            (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 923)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>)
            (nil))))
(insn 579 578 580 30 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:156 48 {*movdi_aarch64}
     (nil))
(insn 580 579 581 30 (set (reg/f:DI 924)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:156 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 581 580 582 30 (set (reg:DI 2 x2)
        (reg/f:DI 922)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 922)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x82]  <var_decl 0x7f3c5d840120 *.LC14>)
            (nil))))
(insn 582 581 583 30 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 583 582 584 30 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 924) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 924)
        (nil)))
(call_insn 584 583 585 30 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 585 584 586 30 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:156 -1
     (nil))
(debug_insn 586 585 587 30 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:156 -1
     (nil))
(debug_insn 587 586 174 30 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:157 -1
     (nil))
(insn 174 587 588 30 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:157 47 {*movsi_aarch64}
     (nil))
;;  succ:       31 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1854 1855 1909 1911

;; basic block 31, loop depth 0, count 0, freq 12
;;  prev block 30, next block 33, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       28 [71.0%] 
;;              30 [100.0%]  (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u296(29){ }u297(31){ }u298(64){ }u299(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317
;; lr  def 	 66 [cc] 926
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 317 320 328 360 837 838 1013 1854 1855 1909 1911
;; live  gen 	 66 [cc] 926
;; live  kill	
(code_label 588 174 589 31 32 "" [1 uses])
(note 589 588 590 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(debug_insn 590 589 591 31 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 591 590 592 31 (set (reg:SI 926 [ *_141 ])
        (mem:SI (reg/f:DI 317 [ D.3807 ]) [3 *_141+0 S4 A32])) options.c:159 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 317 [ D.3807 ])
        (nil)))
(insn 592 591 593 31 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 926 [ *_141 ])
            (const_int 0 [0]))) options.c:159 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 926 [ *_141 ])
        (nil)))
(jump_insn 593 592 594 31 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 611)
            (pc))) options.c:159 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 611)
;;  succ:       33 [29.0%]  (FALLTHRU)
;;              34 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1855 1909 1911

;; basic block 33, loop depth 0, count 0, freq 4
;;  prev block 31, next block 34, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       31 [29.0%]  (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u304(29){ }u305(31){ }u306(64){ }u307(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 927 929 930 931 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 927 929 930 931 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 594 593 595 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(debug_insn 595 594 596 33 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:160 -1
     (nil))
(debug_insn 596 595 598 33 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>)) options.c:160 -1
     (nil))
(insn 598 596 599 33 (set (reg/f:DI 927)
        (lo_sum:DI (reg/f:DI 1855)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:160 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1855)
        (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
            (nil))))
(insn 599 598 600 33 (set (reg/f:DI 930)
        (high:DI (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 600 599 601 33 (set (reg/f:DI 929)
        (lo_sum:DI (reg/f:DI 930)
            (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 930)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>)
            (nil))))
(insn 601 600 602 33 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:160 48 {*movdi_aarch64}
     (nil))
(insn 602 601 603 33 (set (reg/f:DI 931)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:160 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 603 602 604 33 (set (reg:DI 3 x3)
        (mem/f/c:DI (reg/f:DI 927) [2 optarg+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 927)
        (nil)))
(insn 604 603 605 33 (set (reg:DI 2 x2)
        (reg/f:DI 929)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 929)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC15") [flags 0x82]  <var_decl 0x7f3c5d8401b0 *.LC15>)
            (nil))))
(insn 605 604 606 33 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 606 605 607 33 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 931) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 931)
        (nil)))
(call_insn 607 606 608 33 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:SI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
(debug_insn 608 607 609 33 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:160 -1
     (nil))
(debug_insn 609 608 610 33 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:160 -1
     (nil))
(debug_insn 610 609 175 33 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:161 -1
     (nil))
(insn 175 610 611 33 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:161 47 {*movsi_aarch64}
     (nil))
;;  succ:       34 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

;; basic block 34, loop depth 0, count 0, freq 12
;;  prev block 33, next block 35, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       31 [71.0%] 
;;              33 [100.0%]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u319(29){ }u320(31){ }u321(64){ }u322(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 933 935
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 933 935
;; live  kill	
(code_label 611 175 612 34 33 "" [1 uses])
(note 612 611 613 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(debug_insn 613 612 615 34 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 615 613 616 34 (set (reg/f:DI 933)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:163 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1854)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (nil))))
(insn 616 615 617 34 (set (reg:DF 935 [ A ])
        (mem/c:DF (plus:DI (reg/f:DI 933)
                (const_int 16 [0x10])) [1 A+0 S8 A64])) options.c:163 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 933)
        (nil)))
(insn 617 616 618 34 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 935 [ A ])
            (const_double:DF 0.0 [0x0.0p+0]))) options.c:163 395 {*cmpedf}
     (expr_list:REG_DEAD (reg:DF 935 [ A ])
        (nil)))
(jump_insn 618 617 4063 34 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4063)
            (pc))) options.c:163 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 1312 (nil)))
 -> 4063)
;;  succ:       35 [13.1%] 
;;              36 [86.9%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 35, loop depth 0, count 0, freq 2
;;  prev block 34, next block 36, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       34 [13.1%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u328(29){ }u329(31){ }u330(64){ }u331(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 936 937 938 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 936 937 938 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 4063 618 622 35 215 "" [1 uses])
(note 622 4063 623 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(debug_insn 623 622 624 35 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:164 -1
     (nil))
(debug_insn 624 623 625 35 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>)) options.c:164 -1
     (nil))
(insn 625 624 626 35 (set (reg/f:DI 937)
        (high:DI (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 626 625 627 35 (set (reg/f:DI 936)
        (lo_sum:DI (reg/f:DI 937)
            (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 937)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>)
            (nil))))
(insn 627 626 628 35 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:164 48 {*movdi_aarch64}
     (nil))
(insn 628 627 629 35 (set (reg/f:DI 938)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:164 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 629 628 630 35 (set (reg:DI 2 x2)
        (reg/f:DI 936)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 936)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC16") [flags 0x82]  <var_decl 0x7f3c5d840240 *.LC16>)
            (nil))))
(insn 630 629 631 35 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 631 630 632 35 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 938) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 938)
        (nil)))
(call_insn 632 631 633 35 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 633 632 634 35 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:164 -1
     (nil))
(debug_insn 634 633 635 35 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:164 -1
     (nil))
(debug_insn 635 634 176 35 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:165 -1
     (nil))
(insn 176 635 636 35 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:165 47 {*movsi_aarch64}
     (nil))
;;  succ:       36 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 36, loop depth 0, count 0, freq 12
;;  prev block 35, next block 37, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       35 [100.0%]  (FALLTHRU)
;;              34 [86.9%]  (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u340(29){ }u341(31){ }u342(64){ }u343(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 320 328
;; live  kill	
(code_label 636 176 637 36 34 "" [0 uses])
(note 637 636 638 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(debug_insn 638 637 639 36 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 639 638 640 36 (set (reg/v:SI 320 [ whichset ])
        (ior:SI (reg/v:SI 320 [ whichset ])
            (const_int 1 [0x1]))) options.c:167 466 {iorsi3}
     (nil))
(debug_insn 640 639 641 36 (var_location:SI whichset (reg/v:SI 320 [ whichset ])) options.c:167 -1
     (nil))
(insn 641 640 642 36 (set (reg/v:SI 328 [ nset ])
        (plus:SI (reg/v:SI 328 [ nset ])
            (const_int 1 [0x1]))) options.c:168 94 {*addsi3_aarch64}
     (nil))
(debug_insn 642 641 645 36 (var_location:SI nset (reg/v:SI 328 [ nset ])) options.c:168 -1
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 37, loop depth 0, count 0, freq 12
;;  prev block 36, next block 39, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u349(29){ }u350(31){ }u351(64){ }u352(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 329 331 940 942 944 1854 1855
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 329 331 940 942 944 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 645 642 646 37 19 "" [2 uses])
(note 646 645 647 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 647 646 648 37 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>) [0 __errno_location S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:172 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 648 647 649 37 (set (reg/f:DI 329 [ D.3807 ])
        (reg:DI 0 x0)) options.c:172 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 649 648 650 37 (set (mem:SI (reg/f:DI 329 [ D.3807 ]) [3 *_155+0 S4 A32])
        (const_int 0 [0])) options.c:172 47 {*movsi_aarch64}
     (nil))
(insn 650 649 651 37 (set (reg/f:DI 1855)
        (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:173 48 {*movdi_aarch64}
     (nil))
(insn 651 650 652 37 (set (reg/f:DI 940)
        (lo_sum:DI (reg/f:DI 1855)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:173 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
        (nil)))
(insn 652 651 653 37 (set (reg:DI 1 x1)
        (const_int 0 [0])) options.c:173 48 {*movdi_aarch64}
     (nil))
(insn 653 652 654 37 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 940) [2 optarg+0 S8 A64])) options.c:173 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 940)
        (nil)))
(call_insn 654 653 655 37 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f3c5e252500 strtod>) [0 strtod S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:173 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_DEAD (reg:DI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f3c5e252500 strtod>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 655 654 656 37 (set (reg:DF 331 [ D.3804 ])
        (reg:DF 32 v0)) options.c:173 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 656 655 657 37 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:173 48 {*movdi_aarch64}
     (nil))
(insn 657 656 658 37 (set (reg/f:DI 942)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:173 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 658 657 659 37 (set (mem/c:DF (plus:DI (reg/f:DI 942)
                (const_int 24 [0x18])) [1 B+0 S8 A64])
        (reg:DF 331 [ D.3804 ])) options.c:173 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 942)
        (expr_list:REG_DEAD (reg:DF 331 [ D.3804 ])
            (nil))))
(insn 659 658 660 37 (set (reg:SI 944 [ D.3797 ])
        (and:SI (reg/v:SI 320 [ whichset ])
            (const_int 2 [0x2]))) options.c:174 465 {andsi3}
     (nil))
(insn 660 659 661 37 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 944 [ D.3797 ])
            (const_int 0 [0]))) options.c:174 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 944 [ D.3797 ])
        (nil)))
(jump_insn 661 660 662 37 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 676)
            (pc))) options.c:174 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 676)
;;  succ:       39 [29.0%]  (FALLTHRU)
;;              40 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1854 1855 1909 1911

;; basic block 39, loop depth 0, count 0, freq 4
;;  prev block 37, next block 40, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       37 [29.0%]  (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u368(29){ }u369(31){ }u370(64){ }u371(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 945 946 947 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 945 946 947 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 662 661 663 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(debug_insn 663 662 664 39 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:175 -1
     (nil))
(debug_insn 664 663 665 39 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>)) options.c:175 -1
     (nil))
(insn 665 664 666 39 (set (reg/f:DI 946)
        (high:DI (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 666 665 667 39 (set (reg/f:DI 945)
        (lo_sum:DI (reg/f:DI 946)
            (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 946)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>)
            (nil))))
(insn 667 666 668 39 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:175 48 {*movdi_aarch64}
     (nil))
(insn 668 667 669 39 (set (reg/f:DI 947)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:175 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 669 668 670 39 (set (reg:DI 2 x2)
        (reg/f:DI 945)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 945)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC17") [flags 0x82]  <var_decl 0x7f3c5d8402d0 *.LC17>)
            (nil))))
(insn 670 669 671 39 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 671 670 672 39 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 947) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 947)
        (nil)))
(call_insn 672 671 673 39 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 673 672 674 39 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:175 -1
     (nil))
(debug_insn 674 673 675 39 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:175 -1
     (nil))
(debug_insn 675 674 177 39 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:176 -1
     (nil))
(insn 177 675 676 39 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:176 47 {*movsi_aarch64}
     (nil))
;;  succ:       40 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1854 1855 1909 1911

;; basic block 40, loop depth 0, count 0, freq 12
;;  prev block 39, next block 42, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       37 [71.0%] 
;;              39 [100.0%]  (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u380(29){ }u381(31){ }u382(64){ }u383(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 329
;; lr  def 	 66 [cc] 949
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 329 360 837 838 1013 1854 1855 1909 1911
;; live  gen 	 66 [cc] 949
;; live  kill	
(code_label 676 177 677 40 36 "" [1 uses])
(note 677 676 678 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(debug_insn 678 677 679 40 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 679 678 680 40 (set (reg:SI 949 [ *_155 ])
        (mem:SI (reg/f:DI 329 [ D.3807 ]) [3 *_155+0 S4 A32])) options.c:178 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 329 [ D.3807 ])
        (nil)))
(insn 680 679 681 40 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 949 [ *_155 ])
            (const_int 0 [0]))) options.c:178 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 949 [ *_155 ])
        (nil)))
(jump_insn 681 680 682 40 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 699)
            (pc))) options.c:178 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 699)
;;  succ:       42 [29.0%]  (FALLTHRU)
;;              43 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1855 1909 1911

;; basic block 42, loop depth 0, count 0, freq 4
;;  prev block 40, next block 43, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       40 [29.0%]  (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u388(29){ }u389(31){ }u390(64){ }u391(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 950 952 953 954 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 950 952 953 954 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 682 681 683 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(debug_insn 683 682 684 42 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:179 -1
     (nil))
(debug_insn 684 683 686 42 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>)) options.c:179 -1
     (nil))
(insn 686 684 687 42 (set (reg/f:DI 950)
        (lo_sum:DI (reg/f:DI 1855)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:179 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1855)
        (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
            (nil))))
(insn 687 686 688 42 (set (reg/f:DI 953)
        (high:DI (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 688 687 689 42 (set (reg/f:DI 952)
        (lo_sum:DI (reg/f:DI 953)
            (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 953)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>)
            (nil))))
(insn 689 688 690 42 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:179 48 {*movdi_aarch64}
     (nil))
(insn 690 689 691 42 (set (reg/f:DI 954)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:179 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 691 690 692 42 (set (reg:DI 3 x3)
        (mem/f/c:DI (reg/f:DI 950) [2 optarg+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 950)
        (nil)))
(insn 692 691 693 42 (set (reg:DI 2 x2)
        (reg/f:DI 952)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 952)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC18") [flags 0x82]  <var_decl 0x7f3c5d840360 *.LC18>)
            (nil))))
(insn 693 692 694 42 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 694 693 695 42 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 954) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 954)
        (nil)))
(call_insn 695 694 696 42 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:SI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
(debug_insn 696 695 697 42 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:179 -1
     (nil))
(debug_insn 697 696 698 42 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:179 -1
     (nil))
(debug_insn 698 697 178 42 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:180 -1
     (nil))
(insn 178 698 699 42 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:180 47 {*movsi_aarch64}
     (nil))
;;  succ:       43 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

;; basic block 43, loop depth 0, count 0, freq 12
;;  prev block 42, next block 44, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       40 [71.0%] 
;;              42 [100.0%]  (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u403(29){ }u404(31){ }u405(64){ }u406(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 956 958
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 956 958
;; live  kill	
(code_label 699 178 700 43 37 "" [1 uses])
(note 700 699 701 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(debug_insn 701 700 703 43 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 703 701 704 43 (set (reg/f:DI 956)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:182 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1854)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (nil))))
(insn 704 703 705 43 (set (reg:DF 958 [ B ])
        (mem/c:DF (plus:DI (reg/f:DI 956)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) options.c:182 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 956)
        (nil)))
(insn 705 704 706 43 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 958 [ B ])
            (const_double:DF 0.0 [0x0.0p+0]))) options.c:182 395 {*cmpedf}
     (expr_list:REG_DEAD (reg:DF 958 [ B ])
        (nil)))
(jump_insn 706 705 4064 43 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4064)
            (pc))) options.c:182 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 1312 (nil)))
 -> 4064)
;;  succ:       44 [13.1%] 
;;              45 [86.9%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 44, loop depth 0, count 0, freq 2
;;  prev block 43, next block 45, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       43 [13.1%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u412(29){ }u413(31){ }u414(64){ }u415(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 959 960 961 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 959 960 961 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 4064 706 710 44 216 "" [1 uses])
(note 710 4064 711 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(debug_insn 711 710 712 44 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:183 -1
     (nil))
(debug_insn 712 711 713 44 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>)) options.c:183 -1
     (nil))
(insn 713 712 714 44 (set (reg/f:DI 960)
        (high:DI (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 714 713 715 44 (set (reg/f:DI 959)
        (lo_sum:DI (reg/f:DI 960)
            (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 960)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>)
            (nil))))
(insn 715 714 716 44 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:183 48 {*movdi_aarch64}
     (nil))
(insn 716 715 717 44 (set (reg/f:DI 961)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:183 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 717 716 718 44 (set (reg:DI 2 x2)
        (reg/f:DI 959)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 959)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC19") [flags 0x82]  <var_decl 0x7f3c5d8403f0 *.LC19>)
            (nil))))
(insn 718 717 719 44 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 719 718 720 44 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 961) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 961)
        (nil)))
(call_insn 720 719 721 44 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 721 720 722 44 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:183 -1
     (nil))
(debug_insn 722 721 723 44 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:183 -1
     (nil))
(debug_insn 723 722 179 44 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:184 -1
     (nil))
(insn 179 723 724 44 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:184 47 {*movsi_aarch64}
     (nil))
;;  succ:       45 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 45, loop depth 0, count 0, freq 12
;;  prev block 44, next block 46, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       44 [100.0%]  (FALLTHRU)
;;              43 [86.9%]  (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u424(29){ }u425(31){ }u426(64){ }u427(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 320 328
;; live  kill	
(code_label 724 179 725 45 38 "" [0 uses])
(note 725 724 726 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(debug_insn 726 725 727 45 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 727 726 728 45 (set (reg/v:SI 320 [ whichset ])
        (ior:SI (reg/v:SI 320 [ whichset ])
            (const_int 2 [0x2]))) options.c:186 466 {iorsi3}
     (nil))
(debug_insn 728 727 729 45 (var_location:SI whichset (reg/v:SI 320 [ whichset ])) options.c:186 -1
     (nil))
(insn 729 728 730 45 (set (reg/v:SI 328 [ nset ])
        (plus:SI (reg/v:SI 328 [ nset ])
            (const_int 1 [0x1]))) options.c:187 94 {*addsi3_aarch64}
     (nil))
(debug_insn 730 729 733 45 (var_location:SI nset (reg/v:SI 328 [ nset ])) options.c:187 -1
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 46, loop depth 0, count 0, freq 12
;;  prev block 45, next block 48, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u433(29){ }u434(31){ }u435(64){ }u436(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 339 341 963 965 967 1854 1855
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 339 341 963 965 967 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 733 730 734 46 20 "" [2 uses])
(note 734 733 735 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 735 734 736 46 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>) [0 __errno_location S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:191 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 736 735 737 46 (set (reg/f:DI 339 [ D.3807 ])
        (reg:DI 0 x0)) options.c:191 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 737 736 738 46 (set (mem:SI (reg/f:DI 339 [ D.3807 ]) [3 *_167+0 S4 A32])
        (const_int 0 [0])) options.c:191 47 {*movsi_aarch64}
     (nil))
(insn 738 737 739 46 (set (reg/f:DI 1855)
        (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:192 48 {*movdi_aarch64}
     (nil))
(insn 739 738 740 46 (set (reg/f:DI 963)
        (lo_sum:DI (reg/f:DI 1855)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:192 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
        (nil)))
(insn 740 739 741 46 (set (reg:DI 1 x1)
        (const_int 0 [0])) options.c:192 48 {*movdi_aarch64}
     (nil))
(insn 741 740 742 46 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 963) [2 optarg+0 S8 A64])) options.c:192 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 963)
        (nil)))
(call_insn 742 741 743 46 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f3c5e252500 strtod>) [0 strtod S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:192 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_DEAD (reg:DI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f3c5e252500 strtod>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 743 742 744 46 (set (reg:DF 341 [ D.3804 ])
        (reg:DF 32 v0)) options.c:192 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 744 743 745 46 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:192 48 {*movdi_aarch64}
     (nil))
(insn 745 744 746 46 (set (reg/f:DI 965)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:192 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 746 745 747 46 (set (mem/c:DF (plus:DI (reg/f:DI 965)
                (const_int 32 [0x20])) [1 C+0 S8 A64])
        (reg:DF 341 [ D.3804 ])) options.c:192 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 965)
        (expr_list:REG_DEAD (reg:DF 341 [ D.3804 ])
            (nil))))
(insn 747 746 748 46 (set (reg:SI 967 [ D.3797 ])
        (and:SI (reg/v:SI 320 [ whichset ])
            (const_int 4 [0x4]))) options.c:193 465 {andsi3}
     (nil))
(insn 748 747 749 46 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 967 [ D.3797 ])
            (const_int 0 [0]))) options.c:193 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 967 [ D.3797 ])
        (nil)))
(jump_insn 749 748 750 46 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 764)
            (pc))) options.c:193 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 764)
;;  succ:       48 [29.0%]  (FALLTHRU)
;;              49 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1854 1855 1909 1911

;; basic block 48, loop depth 0, count 0, freq 4
;;  prev block 46, next block 49, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       46 [29.0%]  (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u452(29){ }u453(31){ }u454(64){ }u455(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 968 969 970 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 968 969 970 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 750 749 751 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(debug_insn 751 750 752 48 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:194 -1
     (nil))
(debug_insn 752 751 753 48 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>)) options.c:194 -1
     (nil))
(insn 753 752 754 48 (set (reg/f:DI 969)
        (high:DI (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 754 753 755 48 (set (reg/f:DI 968)
        (lo_sum:DI (reg/f:DI 969)
            (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 969)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>)
            (nil))))
(insn 755 754 756 48 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:194 48 {*movdi_aarch64}
     (nil))
(insn 756 755 757 48 (set (reg/f:DI 970)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:194 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 757 756 758 48 (set (reg:DI 2 x2)
        (reg/f:DI 968)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 968)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC20") [flags 0x82]  <var_decl 0x7f3c5d840480 *.LC20>)
            (nil))))
(insn 758 757 759 48 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 759 758 760 48 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 970) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 970)
        (nil)))
(call_insn 760 759 761 48 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 761 760 762 48 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:194 -1
     (nil))
(debug_insn 762 761 763 48 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:194 -1
     (nil))
(debug_insn 763 762 180 48 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:195 -1
     (nil))
(insn 180 763 764 48 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:195 47 {*movsi_aarch64}
     (nil))
;;  succ:       49 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1854 1855 1909 1911

;; basic block 49, loop depth 0, count 0, freq 12
;;  prev block 48, next block 51, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       46 [71.0%] 
;;              48 [100.0%]  (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u464(29){ }u465(31){ }u466(64){ }u467(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 339
;; lr  def 	 66 [cc] 972
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 339 360 837 838 1013 1854 1855 1909 1911
;; live  gen 	 66 [cc] 972
;; live  kill	
(code_label 764 180 765 49 40 "" [1 uses])
(note 765 764 766 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(debug_insn 766 765 767 49 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 767 766 768 49 (set (reg:SI 972 [ *_167 ])
        (mem:SI (reg/f:DI 339 [ D.3807 ]) [3 *_167+0 S4 A32])) options.c:197 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 339 [ D.3807 ])
        (nil)))
(insn 768 767 769 49 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 972 [ *_167 ])
            (const_int 0 [0]))) options.c:197 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 972 [ *_167 ])
        (nil)))
(jump_insn 769 768 770 49 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 787)
            (pc))) options.c:197 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 787)
;;  succ:       51 [29.0%]  (FALLTHRU)
;;              52 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1855 1909 1911

;; basic block 51, loop depth 0, count 0, freq 4
;;  prev block 49, next block 52, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       49 [29.0%]  (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u472(29){ }u473(31){ }u474(64){ }u475(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 973 975 976 977 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 973 975 976 977 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 770 769 771 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(debug_insn 771 770 772 51 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:198 -1
     (nil))
(debug_insn 772 771 774 51 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>)) options.c:198 -1
     (nil))
(insn 774 772 775 51 (set (reg/f:DI 973)
        (lo_sum:DI (reg/f:DI 1855)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:198 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1855)
        (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
            (nil))))
(insn 775 774 776 51 (set (reg/f:DI 976)
        (high:DI (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 776 775 777 51 (set (reg/f:DI 975)
        (lo_sum:DI (reg/f:DI 976)
            (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 976)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>)
            (nil))))
(insn 777 776 778 51 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:198 48 {*movdi_aarch64}
     (nil))
(insn 778 777 779 51 (set (reg/f:DI 977)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:198 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 779 778 780 51 (set (reg:DI 3 x3)
        (mem/f/c:DI (reg/f:DI 973) [2 optarg+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 973)
        (nil)))
(insn 780 779 781 51 (set (reg:DI 2 x2)
        (reg/f:DI 975)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 975)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x82]  <var_decl 0x7f3c5d840510 *.LC21>)
            (nil))))
(insn 781 780 782 51 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 782 781 783 51 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 977) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 977)
        (nil)))
(call_insn 783 782 784 51 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:SI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
(debug_insn 784 783 785 51 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:198 -1
     (nil))
(debug_insn 785 784 786 51 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:198 -1
     (nil))
(debug_insn 786 785 181 51 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:199 -1
     (nil))
(insn 181 786 787 51 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:199 47 {*movsi_aarch64}
     (nil))
;;  succ:       52 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

;; basic block 52, loop depth 0, count 0, freq 12
;;  prev block 51, next block 53, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       49 [71.0%] 
;;              51 [100.0%]  (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u487(29){ }u488(31){ }u489(64){ }u490(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 979 981
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 979 981
;; live  kill	
(code_label 787 181 788 52 41 "" [1 uses])
(note 788 787 789 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(debug_insn 789 788 791 52 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 791 789 792 52 (set (reg/f:DI 979)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:201 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1854)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (nil))))
(insn 792 791 793 52 (set (reg:DF 981 [ C ])
        (mem/c:DF (plus:DI (reg/f:DI 979)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) options.c:201 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 979)
        (nil)))
(insn 793 792 794 52 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 981 [ C ])
            (const_double:DF 0.0 [0x0.0p+0]))) options.c:201 395 {*cmpedf}
     (expr_list:REG_DEAD (reg:DF 981 [ C ])
        (nil)))
(jump_insn 794 793 4065 52 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4065)
            (pc))) options.c:201 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 1312 (nil)))
 -> 4065)
;;  succ:       53 [13.1%] 
;;              54 [86.9%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 53, loop depth 0, count 0, freq 2
;;  prev block 52, next block 54, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       52 [13.1%] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u496(29){ }u497(31){ }u498(64){ }u499(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 982 983 984 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 982 983 984 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 4065 794 798 53 217 "" [1 uses])
(note 798 4065 799 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(debug_insn 799 798 800 53 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:202 -1
     (nil))
(debug_insn 800 799 801 53 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>)) options.c:202 -1
     (nil))
(insn 801 800 802 53 (set (reg/f:DI 983)
        (high:DI (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 802 801 803 53 (set (reg/f:DI 982)
        (lo_sum:DI (reg/f:DI 983)
            (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 983)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>)
            (nil))))
(insn 803 802 804 53 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:202 48 {*movdi_aarch64}
     (nil))
(insn 804 803 805 53 (set (reg/f:DI 984)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:202 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 805 804 806 53 (set (reg:DI 2 x2)
        (reg/f:DI 982)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 982)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC22") [flags 0x82]  <var_decl 0x7f3c5d8405a0 *.LC22>)
            (nil))))
(insn 806 805 807 53 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 807 806 808 53 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 984) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 984)
        (nil)))
(call_insn 808 807 809 53 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 809 808 810 53 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:202 -1
     (nil))
(debug_insn 810 809 811 53 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:202 -1
     (nil))
(debug_insn 811 810 182 53 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:203 -1
     (nil))
(insn 182 811 812 53 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:203 47 {*movsi_aarch64}
     (nil))
;;  succ:       54 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 54, loop depth 0, count 0, freq 12
;;  prev block 53, next block 55, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       53 [100.0%]  (FALLTHRU)
;;              52 [86.9%]  (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u508(29){ }u509(31){ }u510(64){ }u511(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 320 328
;; live  kill	
(code_label 812 182 813 54 42 "" [0 uses])
(note 813 812 814 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(debug_insn 814 813 815 54 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 815 814 816 54 (set (reg/v:SI 320 [ whichset ])
        (ior:SI (reg/v:SI 320 [ whichset ])
            (const_int 4 [0x4]))) options.c:205 466 {iorsi3}
     (nil))
(debug_insn 816 815 817 54 (var_location:SI whichset (reg/v:SI 320 [ whichset ])) options.c:205 -1
     (nil))
(insn 817 816 818 54 (set (reg/v:SI 328 [ nset ])
        (plus:SI (reg/v:SI 328 [ nset ])
            (const_int 1 [0x1]))) options.c:206 94 {*addsi3_aarch64}
     (nil))
(debug_insn 818 817 821 54 (var_location:SI nset (reg/v:SI 328 [ nset ])) options.c:206 -1
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 55, loop depth 0, count 0, freq 12
;;  prev block 54, next block 57, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [8.0%] 
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u517(29){ }u518(31){ }u519(64){ }u520(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 349 351 986 988 990 1854 1855
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 349 351 986 988 990 1854 1855
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 821 818 822 55 21 "" [2 uses])
(note 822 821 823 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 823 822 824 55 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>) [0 __errno_location S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:210 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 824 823 825 55 (set (reg/f:DI 349 [ D.3807 ])
        (reg:DI 0 x0)) options.c:210 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 825 824 826 55 (set (mem:SI (reg/f:DI 349 [ D.3807 ]) [3 *_179+0 S4 A32])
        (const_int 0 [0])) options.c:210 47 {*movsi_aarch64}
     (nil))
(insn 826 825 827 55 (set (reg/f:DI 1855)
        (high:DI (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:211 48 {*movdi_aarch64}
     (nil))
(insn 827 826 828 55 (set (reg/f:DI 986)
        (lo_sum:DI (reg/f:DI 1855)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:211 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
        (nil)))
(insn 828 827 829 55 (set (reg:DI 1 x1)
        (const_int 0 [0])) options.c:211 48 {*movdi_aarch64}
     (nil))
(insn 829 828 830 55 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 986) [2 optarg+0 S8 A64])) options.c:211 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 986)
        (nil)))
(call_insn 830 829 831 55 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f3c5e252500 strtod>) [0 strtod S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:211 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_DEAD (reg:DI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f3c5e252500 strtod>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 831 830 832 55 (set (reg:DF 351 [ D.3804 ])
        (reg:DF 32 v0)) options.c:211 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 832 831 833 55 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:211 48 {*movdi_aarch64}
     (nil))
(insn 833 832 834 55 (set (reg/f:DI 988)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:211 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 834 833 835 55 (set (mem/c:DF (plus:DI (reg/f:DI 988)
                (const_int 40 [0x28])) [1 D+0 S8 A64])
        (reg:DF 351 [ D.3804 ])) options.c:211 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 988)
        (expr_list:REG_DEAD (reg:DF 351 [ D.3804 ])
            (nil))))
(insn 835 834 836 55 (set (reg:SI 990 [ D.3797 ])
        (and:SI (reg/v:SI 320 [ whichset ])
            (const_int 8 [0x8]))) options.c:212 465 {andsi3}
     (nil))
(insn 836 835 837 55 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 990 [ D.3797 ])
            (const_int 0 [0]))) options.c:212 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 990 [ D.3797 ])
        (nil)))
(jump_insn 837 836 838 55 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 852)
            (pc))) options.c:212 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 852)
;;  succ:       57 [29.0%]  (FALLTHRU)
;;              58 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1854 1855 1909 1911

;; basic block 57, loop depth 0, count 0, freq 4
;;  prev block 55, next block 58, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       55 [29.0%]  (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u536(29){ }u537(31){ }u538(64){ }u539(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 991 992 993 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 991 992 993 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 838 837 839 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(debug_insn 839 838 840 57 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:213 -1
     (nil))
(debug_insn 840 839 841 57 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>)) options.c:213 -1
     (nil))
(insn 841 840 842 57 (set (reg/f:DI 992)
        (high:DI (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 842 841 843 57 (set (reg/f:DI 991)
        (lo_sum:DI (reg/f:DI 992)
            (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 992)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>)
            (nil))))
(insn 843 842 844 57 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:213 48 {*movdi_aarch64}
     (nil))
(insn 844 843 845 57 (set (reg/f:DI 993)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:213 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 845 844 846 57 (set (reg:DI 2 x2)
        (reg/f:DI 991)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 991)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC23") [flags 0x82]  <var_decl 0x7f3c5d840630 *.LC23>)
            (nil))))
(insn 846 845 847 57 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 847 846 848 57 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 993) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 993)
        (nil)))
(call_insn 848 847 849 57 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 849 848 850 57 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:213 -1
     (nil))
(debug_insn 850 849 851 57 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:213 -1
     (nil))
(debug_insn 851 850 183 57 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:214 -1
     (nil))
(insn 183 851 852 57 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:214 47 {*movsi_aarch64}
     (nil))
;;  succ:       58 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1854 1855 1909 1911

;; basic block 58, loop depth 0, count 0, freq 12
;;  prev block 57, next block 60, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       55 [71.0%] 
;;              57 [100.0%]  (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u548(29){ }u549(31){ }u550(64){ }u551(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 349
;; lr  def 	 66 [cc] 995
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 349 360 837 838 1013 1854 1855 1909 1911
;; live  gen 	 66 [cc] 995
;; live  kill	
(code_label 852 183 853 58 44 "" [1 uses])
(note 853 852 854 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(debug_insn 854 853 855 58 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 855 854 856 58 (set (reg:SI 995 [ *_179 ])
        (mem:SI (reg/f:DI 349 [ D.3807 ]) [3 *_179+0 S4 A32])) options.c:216 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 349 [ D.3807 ])
        (nil)))
(insn 856 855 857 58 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 995 [ *_179 ])
            (const_int 0 [0]))) options.c:216 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 995 [ *_179 ])
        (nil)))
(jump_insn 857 856 858 58 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 875)
            (pc))) options.c:216 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 875)
;;  succ:       60 [29.0%]  (FALLTHRU)
;;              61 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1855 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1855 1909 1911

;; basic block 60, loop depth 0, count 0, freq 4
;;  prev block 58, next block 61, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       58 [29.0%]  (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u556(29){ }u557(31){ }u558(64){ }u559(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1854 1855 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1855
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 996 998 999 1000 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1854 1855 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 360 996 998 999 1000 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 858 857 859 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(debug_insn 859 858 860 60 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:217 -1
     (nil))
(debug_insn 860 859 862 60 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>)) options.c:217 -1
     (nil))
(insn 862 860 863 60 (set (reg/f:DI 996)
        (lo_sum:DI (reg/f:DI 1855)
            (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>))) options.c:217 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1855)
        (expr_list:REG_EQUAL (symbol_ref:DI ("optarg") [flags 0xc0]  <var_decl 0x7f3c5e254ab0 optarg>)
            (nil))))
(insn 863 862 864 60 (set (reg/f:DI 999)
        (high:DI (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 864 863 865 60 (set (reg/f:DI 998)
        (lo_sum:DI (reg/f:DI 999)
            (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 999)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>)
            (nil))))
(insn 865 864 866 60 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:217 48 {*movdi_aarch64}
     (nil))
(insn 866 865 867 60 (set (reg/f:DI 1000)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:217 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 867 866 868 60 (set (reg:DI 3 x3)
        (mem/f/c:DI (reg/f:DI 996) [2 optarg+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 996)
        (nil)))
(insn 868 867 869 60 (set (reg:DI 2 x2)
        (reg/f:DI 998)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 998)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC24") [flags 0x82]  <var_decl 0x7f3c5d8406c0 *.LC24>)
            (nil))))
(insn 869 868 870 60 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 870 869 871 60 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 1000) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1000)
        (nil)))
(call_insn 871 870 872 60 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:SI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
(debug_insn 872 871 873 60 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:217 -1
     (nil))
(debug_insn 873 872 874 60 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:217 -1
     (nil))
(debug_insn 874 873 184 60 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:218 -1
     (nil))
(insn 184 874 875 60 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:218 47 {*movsi_aarch64}
     (nil))
;;  succ:       61 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911

;; basic block 61, loop depth 0, count 0, freq 12
;;  prev block 60, next block 62, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       58 [71.0%] 
;;              60 [100.0%]  (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u571(29){ }u572(31){ }u573(64){ }u574(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1854 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 1002 1004
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1854 1909 1911
;; live  gen 	 66 [cc] 1002 1004
;; live  kill	
(code_label 875 184 876 61 45 "" [1 uses])
(note 876 875 877 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(debug_insn 877 876 879 61 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 879 877 880 61 (set (reg/f:DI 1002)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:220 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1854)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (nil))))
(insn 880 879 881 61 (set (reg:DF 1004 [ D ])
        (mem/c:DF (plus:DI (reg/f:DI 1002)
                (const_int 40 [0x28])) [1 D+0 S8 A64])) options.c:220 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1002)
        (nil)))
(insn 881 880 882 61 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 1004 [ D ])
            (const_double:DF 0.0 [0x0.0p+0]))) options.c:220 395 {*cmpedf}
     (expr_list:REG_DEAD (reg:DF 1004 [ D ])
        (nil)))
(jump_insn 882 881 4066 61 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4066)
            (pc))) options.c:220 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 1312 (nil)))
 -> 4066)
;;  succ:       62 [13.1%] 
;;              63 [86.9%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 62, loop depth 0, count 0, freq 2
;;  prev block 61, next block 63, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       61 [13.1%] 
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u580(29){ }u581(31){ }u582(64){ }u583(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 1005 1006 1007 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 1005 1006 1007 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 4066 882 886 62 218 "" [1 uses])
(note 886 4066 887 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(debug_insn 887 886 888 62 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:221 -1
     (nil))
(debug_insn 888 887 889 62 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>)) options.c:221 -1
     (nil))
(insn 889 888 890 62 (set (reg/f:DI 1006)
        (high:DI (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 890 889 891 62 (set (reg/f:DI 1005)
        (lo_sum:DI (reg/f:DI 1006)
            (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1006)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>)
            (nil))))
(insn 891 890 892 62 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:221 48 {*movdi_aarch64}
     (nil))
(insn 892 891 893 62 (set (reg/f:DI 1007)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:221 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 893 892 894 62 (set (reg:DI 2 x2)
        (reg/f:DI 1005)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1005)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC25") [flags 0x82]  <var_decl 0x7f3c5d840750 *.LC25>)
            (nil))))
(insn 894 893 895 62 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 895 894 896 62 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 1007) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1007)
        (nil)))
(call_insn 896 895 897 62 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 897 896 898 62 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:221 -1
     (nil))
(debug_insn 898 897 899 62 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:221 -1
     (nil))
(debug_insn 899 898 185 62 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:222 -1
     (nil))
(insn 185 899 900 62 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:222 47 {*movsi_aarch64}
     (nil))
;;  succ:       63 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 63, loop depth 0, count 0, freq 12
;;  prev block 62, next block 64, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       62 [100.0%]  (FALLTHRU)
;;              61 [86.9%]  (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u592(29){ }u593(31){ }u594(64){ }u595(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; lr  def 	 320 328
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 320 328
;; live  kill	
(code_label 900 185 901 63 46 "" [0 uses])
(note 901 900 902 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(debug_insn 902 901 903 63 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 903 902 904 63 (set (reg/v:SI 320 [ whichset ])
        (ior:SI (reg/v:SI 320 [ whichset ])
            (const_int 8 [0x8]))) options.c:224 466 {iorsi3}
     (nil))
(debug_insn 904 903 905 63 (var_location:SI whichset (reg/v:SI 320 [ whichset ])) options.c:224 -1
     (nil))
(insn 905 904 906 63 (set (reg/v:SI 328 [ nset ])
        (plus:SI (reg/v:SI 328 [ nset ])
            (const_int 1 [0x1]))) options.c:225 94 {*addsi3_aarch64}
     (nil))
(debug_insn 906 905 909 63 (var_location:SI nset (reg/v:SI 328 [ nset ])) options.c:225 -1
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 64, loop depth 0, count 0, freq 12
;;  prev block 63, next block 65, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [4.0%] 
;;              8 [50.0%] 
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u601(29){ }u602(31){ }u603(64){ }u604(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1909
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 360 1011 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 360 1011 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 909 906 910 64 15 "" [40 uses])
(note 910 909 911 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(debug_insn 911 910 912 64 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:228 -1
     (nil))
(debug_insn 912 911 915 64 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>)) options.c:228 -1
     (nil))
(insn 915 912 916 64 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:228 48 {*movdi_aarch64}
     (nil))
(insn 916 915 917 64 (set (reg/f:DI 1011)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:228 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 917 916 918 64 (set (reg:DI 2 x2)
        (reg/f:DI 1909)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1009)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC26") [flags 0x82]  <var_decl 0x7f3c5d8407e0 *.LC26>)
            (nil))))
(insn 918 917 919 64 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 919 918 920 64 (set (reg:DI 0 x0)
        (mem/f/c:DI (reg/f:DI 1011) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1011)
        (nil)))
(call_insn 920 919 921 64 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 921 920 922 64 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:228 -1
     (nil))
(debug_insn 922 921 923 64 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:228 -1
     (nil))
(debug_insn 923 922 186 64 (var_location:SI err (const_int -1 [0xffffffffffffffff])) options.c:229 -1
     (nil))
(insn 186 923 926 64 (set (reg/v:SI 360 [ err ])
        (const_int -1 [0xffffffffffffffff])) options.c:229 47 {*movsi_aarch64}
     (nil))
;;  succ:       65 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911

;; basic block 65, loop depth 0, count 0, freq 166, maybe hot
;;  prev block 64, next block 66, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              64 [100.0%]  (FALLTHRU,DFS_BACK)
;;              12 [100.0%]  (FALLTHRU,DFS_BACK)
;;              13 [100.0%]  (FALLTHRU,DFS_BACK)
;;              14 [93.3%]  (DFS_BACK)
;;              15 [100.0%]  (FALLTHRU,DFS_BACK)
;;              16 [93.3%]  (DFS_BACK)
;;              17 [100.0%]  (FALLTHRU,DFS_BACK)
;;              21 [86.9%]  (DFS_BACK)
;;              22 [100.0%]  (FALLTHRU,DFS_BACK)
;;              26 [86.9%]  (DFS_BACK)
;;              27 [100.0%]  (FALLTHRU,DFS_BACK)
;;              36 [100.0%]  (FALLTHRU,DFS_BACK)
;;              45 [100.0%]  (FALLTHRU,DFS_BACK)
;;              54 [100.0%]  (FALLTHRU,DFS_BACK)
;;              63 [100.0%]  (FALLTHRU,DFS_BACK)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u617(29){ }u618(31){ }u619(64){ }u620(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1710 1909 1911
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 837 838 1013
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 294
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 837 838 1013 1909 1911
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 294
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 926 186 927 65 14 "" [4 uses])
(note 927 926 928 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(debug_insn 928 927 929 65 (var_location:SI whichset (reg/v:SI 320 [ whichset ])) -1
     (nil))
(debug_insn 929 928 930 65 (var_location:SI nset (reg/v:SI 328 [ nset ])) -1
     (nil))
(debug_insn 930 929 933 65 (var_location:SI err (reg/v:SI 360 [ err ])) -1
     (nil))
(insn 933 930 934 65 (set (reg:DI 2 x2)
        (reg/f:DI 1013)) options.c:51 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1013)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC27") [flags 0x82]  <var_decl 0x7f3c5d840870 *.LC27>)
            (nil))))
(insn 934 933 935 65 (set (reg:DI 1 x1)
        (reg/v/f:DI 838 [ argv ])) options.c:51 48 {*movdi_aarch64}
     (nil))
(insn 935 934 936 65 (set (reg:SI 0 x0)
        (reg/v:SI 837 [ argc ])) options.c:51 47 {*movsi_aarch64}
     (nil))
(call_insn 936 935 937 65 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("getopt") [flags 0x41]  <function_decl 0x7f3c5e252400 getopt>) [0 getopt S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:51 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("getopt") [flags 0x41]  <function_decl 0x7f3c5e252400 getopt>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(insn 937 936 938 65 (set (reg/v:SI 294 [ c ])
        (reg:SI 0 x0)) options.c:51 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (nil)))
(debug_insn 938 937 940 65 (var_location:SI c (reg/v:SI 294 [ c ])) options.c:51 -1
     (nil))
(insn 940 938 941 65 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 294 [ c ])
            (const_int -1 [0xffffffffffffffff]))) options.c:51 390 {*cmpsi}
     (nil))
(jump_insn 941 940 942 65 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 939)
            (pc))) options.c:51 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9700 (nil)))
 -> 939)
;;  succ:       8 [97.0%] 
;;              66 [3.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1710 1909 1911
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 294 320 328 360 837 838 1013 1909 1911

;; basic block 66, loop depth 0, count 0, freq 5
;;  prev block 65, next block 67, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       65 [3.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u636(29){ }u637(31){ }u638(64){ }u639(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 360
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 360
;; live  gen 	 66 [cc]
;; live  kill	
(note 942 941 943 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 943 942 944 66 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 360 [ err ])
            (const_int 0 [0]))) options.c:232 390 {*cmpsi}
     (expr_list:REG_DEAD (reg/v:SI 360 [ err ])
        (nil)))
(jump_insn 944 943 945 66 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 949)
            (pc))) options.c:232 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 949)
;;  succ:       67 [0.0%]  (FALLTHRU)
;;              68 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328

;; basic block 67, loop depth 0, count 0, freq 0
;;  prev block 66, next block 68, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       66 [0.0%]  (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u642(29){ }u643(31){ }u644(64){ }u645(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 945 944 946 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 946 945 947 67 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) options.c:233 47 {*movsi_aarch64}
     (nil))
(call_insn 947 946 949 67 (parallel [
            (call (mem:DI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>) [0 __builtin_exit S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:233 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 68, loop depth 0, count 0, freq 5
;;  prev block 67, next block 69, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       66 [100.0%] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u648(29){ }u649(31){ }u650(64){ }u651(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 949 947 950 68 49 "" [1 uses])
(note 950 949 951 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 951 950 952 68 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 328 [ nset ])
            (const_int 3 [0x3]))) options.c:234 390 {*cmpsi}
     (nil))
(jump_insn 952 951 953 68 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1115)
            (pc))) options.c:234 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 1115)
;;  succ:       69 [28.0%]  (FALLTHRU)
;;              81 [72.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 328

;; basic block 69, loop depth 0, count 0, freq 1
;;  prev block 68, next block 70, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       68 [28.0%]  (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u654(29){ }u655(31){ }u656(64){ }u657(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; lr  def 	 66 [cc] 1015
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 320
;; live  gen 	 66 [cc] 1015
;; live  kill	
(note 953 952 954 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 954 953 955 69 (set (reg:SI 1015)
        (plus:SI (reg/v:SI 320 [ whichset ])
            (const_int -7 [0xfffffffffffffff9]))) options.c:235 94 {*addsi3_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 320 [ whichset ])
        (nil)))
(insn 955 954 956 69 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1015)
            (const_int 7 [0x7]))) options.c:235 390 {*cmpsi}
     (nil))
(jump_insn 956 955 4060 69 (set (pc)
        (if_then_else (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1043)
            (pc))) options.c:235 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1043)
;;  succ:       75 [50.0%] 
;;              70 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015

;; basic block 70, loop depth 0, count 0, freq 1
;;  prev block 69, next block 71, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       69 [50.0%]  (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u661(29){ }u662(31){ }u663(64){ }u664(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015
;; lr  def 	 66 [cc] 1016 1017
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1015
;; live  gen 	 1016 1017
;; live  kill	 66 [cc]
(note 4060 956 957 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 957 4060 958 70 (set (reg/f:DI 1017)
        (high:DI (label_ref 960))) options.c:235 48 {*movdi_aarch64}
     (insn_list:REG_LABEL_OPERAND 960 (nil)))
(insn 958 957 959 70 (set (reg/f:DI 1016)
        (lo_sum:DI (reg/f:DI 1017)
            (label_ref 960))) options.c:235 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1017)
        (insn_list:REG_LABEL_OPERAND 960 (expr_list:REG_EQUAL (label_ref 960)
                (nil)))))
(jump_insn 959 958 963 70 (parallel [
            (set (pc)
                (mem:DI (unspec [
                            (reg/f:DI 1016)
                            (reg:SI 1015)
                        ] UNSPEC_CASESI) [0  S8 A8]))
            (clobber (reg:CC 66 cc))
            (clobber (scratch:DI))
            (clobber (scratch:DI))
            (use (label_ref 960))
        ]) options.c:235 16 {casesi_dispatch}
     (expr_list:REG_DEAD (reg/f:DI 1016)
        (expr_list:REG_DEAD (reg:SI 1015)
            (expr_list:REG_UNUSED (reg:CC 66 cc)
                (nil))))
 -> 960)
;;  succ:       75 [11.1%] 
;;              71 [22.2%] 
;;              72 [22.2%] 
;;              73 [22.2%] 
;;              74 [22.2%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 71, loop depth 0, count 0, freq 0
;;  prev block 70, next block 72, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       70 [22.2%] 
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u668(29){ }u669(31){ }u670(64){ }u671(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1018 1024 1025 1026 1029 1030 1031 1032 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1018 1024 1025 1026 1029 1030 1031 1032 1854
;; live  kill	
(code_label 963 959 964 71 52 "" [1 uses])
(note 964 963 965 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 965 964 966 71 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:237 48 {*movdi_aarch64}
     (nil))
(insn 966 965 971 71 (set (reg/f:DI 1018)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:237 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 971 966 972 71 (set (reg:DF 1025 [ A ])
        (mem/c:DF (plus:DI (reg/f:DI 1018)
                (const_int 16 [0x10])) [1 A+0 S8 A64])) options.c:237 54 {*movdf_aarch64}
     (nil))
(insn 972 971 973 71 (set (reg:DF 1026 [ B ])
        (mem/c:DF (plus:DI (reg/f:DI 1018)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) options.c:237 54 {*movdf_aarch64}
     (nil))
(insn 973 972 976 71 (set (reg:DF 1024 [ D.3804 ])
        (plus:DF (reg:DF 1025 [ A ])
            (reg:DF 1026 [ B ]))) options.c:237 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1026 [ B ])
        (expr_list:REG_DEAD (reg:DF 1025 [ A ])
            (nil))))
(insn 976 973 977 71 (set (reg:DF 1030 [ C ])
        (mem/c:DF (plus:DI (reg/f:DI 1018)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) options.c:237 54 {*movdf_aarch64}
     (nil))
(insn 977 976 978 71 (set (reg:DF 1029 [ D.3804 ])
        (plus:DF (reg:DF 1024 [ D.3804 ])
            (reg:DF 1030 [ C ]))) options.c:237 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1030 [ C ])
        (expr_list:REG_DEAD (reg:DF 1024 [ D.3804 ])
            (nil))))
(insn 978 977 979 71 (set (reg:DF 1032)
        (const_double:DF 1.0e+0 [0x0.8p+1])) options.c:237 54 {*movdf_aarch64}
     (nil))
(insn 979 978 980 71 (set (reg:DF 1031 [ D.3804 ])
        (minus:DF (reg:DF 1032)
            (reg:DF 1029 [ D.3804 ]))) options.c:237 807 {subdf3}
     (expr_list:REG_DEAD (reg:DF 1032)
        (expr_list:REG_DEAD (reg:DF 1029 [ D.3804 ])
            (expr_list:REG_EQUAL (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
                    (reg:DF 1029 [ D.3804 ]))
                (nil)))))
(insn 980 979 983 71 (set (mem/c:DF (plus:DI (reg/f:DI 1018)
                (const_int 40 [0x28])) [1 D+0 S8 A64])
        (reg:DF 1031 [ D.3804 ])) options.c:237 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 1031 [ D.3804 ])
        (expr_list:REG_DEAD (reg/f:DI 1018)
            (nil))))
;;  succ:       76 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

;; basic block 72, loop depth 0, count 0, freq 0
;;  prev block 71, next block 73, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       70 [22.2%] 
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u690(29){ }u691(31){ }u692(64){ }u693(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1033 1039 1040 1041 1044 1045 1046 1047 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1033 1039 1040 1041 1044 1045 1046 1047 1854
;; live  kill	
(code_label 983 980 984 72 54 "" [1 uses])
(note 984 983 985 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 985 984 986 72 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:240 48 {*movdi_aarch64}
     (nil))
(insn 986 985 991 72 (set (reg/f:DI 1033)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:240 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 991 986 992 72 (set (reg:DF 1040 [ A ])
        (mem/c:DF (plus:DI (reg/f:DI 1033)
                (const_int 16 [0x10])) [1 A+0 S8 A64])) options.c:240 54 {*movdf_aarch64}
     (nil))
(insn 992 991 993 72 (set (reg:DF 1041 [ B ])
        (mem/c:DF (plus:DI (reg/f:DI 1033)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) options.c:240 54 {*movdf_aarch64}
     (nil))
(insn 993 992 996 72 (set (reg:DF 1039 [ D.3804 ])
        (plus:DF (reg:DF 1040 [ A ])
            (reg:DF 1041 [ B ]))) options.c:240 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1041 [ B ])
        (expr_list:REG_DEAD (reg:DF 1040 [ A ])
            (nil))))
(insn 996 993 997 72 (set (reg:DF 1045 [ D ])
        (mem/c:DF (plus:DI (reg/f:DI 1033)
                (const_int 40 [0x28])) [1 D+0 S8 A64])) options.c:240 54 {*movdf_aarch64}
     (nil))
(insn 997 996 998 72 (set (reg:DF 1044 [ D.3804 ])
        (plus:DF (reg:DF 1039 [ D.3804 ])
            (reg:DF 1045 [ D ]))) options.c:240 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1045 [ D ])
        (expr_list:REG_DEAD (reg:DF 1039 [ D.3804 ])
            (nil))))
(insn 998 997 999 72 (set (reg:DF 1047)
        (const_double:DF 1.0e+0 [0x0.8p+1])) options.c:240 54 {*movdf_aarch64}
     (nil))
(insn 999 998 1000 72 (set (reg:DF 1046 [ D.3804 ])
        (minus:DF (reg:DF 1047)
            (reg:DF 1044 [ D.3804 ]))) options.c:240 807 {subdf3}
     (expr_list:REG_DEAD (reg:DF 1047)
        (expr_list:REG_DEAD (reg:DF 1044 [ D.3804 ])
            (expr_list:REG_EQUAL (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
                    (reg:DF 1044 [ D.3804 ]))
                (nil)))))
(insn 1000 999 1003 72 (set (mem/c:DF (plus:DI (reg/f:DI 1033)
                (const_int 32 [0x20])) [1 C+0 S8 A64])
        (reg:DF 1046 [ D.3804 ])) options.c:240 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 1046 [ D.3804 ])
        (expr_list:REG_DEAD (reg/f:DI 1033)
            (nil))))
;;  succ:       76 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

;; basic block 73, loop depth 0, count 0, freq 0
;;  prev block 72, next block 74, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       70 [22.2%] 
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u712(29){ }u713(31){ }u714(64){ }u715(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1048 1054 1055 1056 1059 1060 1061 1062 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1048 1054 1055 1056 1059 1060 1061 1062 1854
;; live  kill	
(code_label 1003 1000 1004 73 55 "" [1 uses])
(note 1004 1003 1005 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1005 1004 1006 73 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:243 48 {*movdi_aarch64}
     (nil))
(insn 1006 1005 1011 73 (set (reg/f:DI 1048)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:243 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 1011 1006 1012 73 (set (reg:DF 1055 [ A ])
        (mem/c:DF (plus:DI (reg/f:DI 1048)
                (const_int 16 [0x10])) [1 A+0 S8 A64])) options.c:243 54 {*movdf_aarch64}
     (nil))
(insn 1012 1011 1013 73 (set (reg:DF 1056 [ C ])
        (mem/c:DF (plus:DI (reg/f:DI 1048)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) options.c:243 54 {*movdf_aarch64}
     (nil))
(insn 1013 1012 1016 73 (set (reg:DF 1054 [ D.3804 ])
        (plus:DF (reg:DF 1055 [ A ])
            (reg:DF 1056 [ C ]))) options.c:243 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1056 [ C ])
        (expr_list:REG_DEAD (reg:DF 1055 [ A ])
            (nil))))
(insn 1016 1013 1017 73 (set (reg:DF 1060 [ D ])
        (mem/c:DF (plus:DI (reg/f:DI 1048)
                (const_int 40 [0x28])) [1 D+0 S8 A64])) options.c:243 54 {*movdf_aarch64}
     (nil))
(insn 1017 1016 1018 73 (set (reg:DF 1059 [ D.3804 ])
        (plus:DF (reg:DF 1054 [ D.3804 ])
            (reg:DF 1060 [ D ]))) options.c:243 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1060 [ D ])
        (expr_list:REG_DEAD (reg:DF 1054 [ D.3804 ])
            (nil))))
(insn 1018 1017 1019 73 (set (reg:DF 1062)
        (const_double:DF 1.0e+0 [0x0.8p+1])) options.c:243 54 {*movdf_aarch64}
     (nil))
(insn 1019 1018 1020 73 (set (reg:DF 1061 [ D.3804 ])
        (minus:DF (reg:DF 1062)
            (reg:DF 1059 [ D.3804 ]))) options.c:243 807 {subdf3}
     (expr_list:REG_DEAD (reg:DF 1062)
        (expr_list:REG_DEAD (reg:DF 1059 [ D.3804 ])
            (expr_list:REG_EQUAL (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
                    (reg:DF 1059 [ D.3804 ]))
                (nil)))))
(insn 1020 1019 1023 73 (set (mem/c:DF (plus:DI (reg/f:DI 1048)
                (const_int 24 [0x18])) [1 B+0 S8 A64])
        (reg:DF 1061 [ D.3804 ])) options.c:243 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 1061 [ D.3804 ])
        (expr_list:REG_DEAD (reg/f:DI 1048)
            (nil))))
;;  succ:       76 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

;; basic block 74, loop depth 0, count 0, freq 0
;;  prev block 73, next block 75, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       70 [22.2%] 
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u734(29){ }u735(31){ }u736(64){ }u737(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1063 1069 1070 1071 1074 1075 1076 1077 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1063 1069 1070 1071 1074 1075 1076 1077 1854
;; live  kill	
(code_label 1023 1020 1024 74 56 "" [1 uses])
(note 1024 1023 1025 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 1025 1024 1026 74 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:246 48 {*movdi_aarch64}
     (nil))
(insn 1026 1025 1031 74 (set (reg/f:DI 1063)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:246 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 1031 1026 1032 74 (set (reg:DF 1070 [ B ])
        (mem/c:DF (plus:DI (reg/f:DI 1063)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) options.c:246 54 {*movdf_aarch64}
     (nil))
(insn 1032 1031 1033 74 (set (reg:DF 1071 [ C ])
        (mem/c:DF (plus:DI (reg/f:DI 1063)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) options.c:246 54 {*movdf_aarch64}
     (nil))
(insn 1033 1032 1036 74 (set (reg:DF 1069 [ D.3804 ])
        (plus:DF (reg:DF 1070 [ B ])
            (reg:DF 1071 [ C ]))) options.c:246 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1071 [ C ])
        (expr_list:REG_DEAD (reg:DF 1070 [ B ])
            (nil))))
(insn 1036 1033 1037 74 (set (reg:DF 1075 [ D ])
        (mem/c:DF (plus:DI (reg/f:DI 1063)
                (const_int 40 [0x28])) [1 D+0 S8 A64])) options.c:246 54 {*movdf_aarch64}
     (nil))
(insn 1037 1036 1038 74 (set (reg:DF 1074 [ D.3804 ])
        (plus:DF (reg:DF 1069 [ D.3804 ])
            (reg:DF 1075 [ D ]))) options.c:246 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1075 [ D ])
        (expr_list:REG_DEAD (reg:DF 1069 [ D.3804 ])
            (nil))))
(insn 1038 1037 1039 74 (set (reg:DF 1077)
        (const_double:DF 1.0e+0 [0x0.8p+1])) options.c:246 54 {*movdf_aarch64}
     (nil))
(insn 1039 1038 1040 74 (set (reg:DF 1076 [ D.3804 ])
        (minus:DF (reg:DF 1077)
            (reg:DF 1074 [ D.3804 ]))) options.c:246 807 {subdf3}
     (expr_list:REG_DEAD (reg:DF 1077)
        (expr_list:REG_DEAD (reg:DF 1074 [ D.3804 ])
            (expr_list:REG_EQUAL (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
                    (reg:DF 1074 [ D.3804 ]))
                (nil)))))
(insn 1040 1039 1043 74 (set (mem/c:DF (plus:DI (reg/f:DI 1063)
                (const_int 16 [0x10])) [1 A+0 S8 A64])
        (reg:DF 1076 [ D.3804 ])) options.c:246 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 1076 [ D.3804 ])
        (expr_list:REG_DEAD (reg/f:DI 1063)
            (nil))))
;;  succ:       76 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

;; basic block 75, loop depth 0, count 0, freq 0
;;  prev block 74, next block 76, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       70 [11.1%] 
;;              69 [50.0%] 
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u756(29){ }u757(31){ }u758(64){ }u759(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1078 1079 1081
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1078 1079 1081
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 1043 1040 1044 75 51 "" [5 uses])
(note 1044 1043 1045 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1045 1044 1046 75 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:249 -1
     (nil))
(debug_insn 1046 1045 1047 75 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>)) options.c:249 -1
     (nil))
(insn 1047 1046 1048 75 (set (reg/f:DI 1079)
        (high:DI (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 1048 1047 1049 75 (set (reg/f:DI 1078)
        (lo_sum:DI (reg/f:DI 1079)
            (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1079)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>)
            (nil))))
(insn 1049 1048 1051 75 (set (reg/f:DI 1081)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:249 48 {*movdi_aarch64}
     (nil))
(insn 1051 1049 1052 75 (set (reg:DI 2 x2)
        (reg/f:DI 1078)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1078)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC28") [flags 0x82]  <var_decl 0x7f3c5d840900 *.LC28>)
            (nil))))
(insn 1052 1051 1053 75 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 1053 1052 1054 75 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1081)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1081)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 1054 1053 1055 75 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 1055 1054 1056 75 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:249 -1
     (nil))
(debug_insn 1056 1055 1057 75 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:249 -1
     (nil))
(call_insn 1057 1056 1059 75 (parallel [
            (call (mem:DI (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>) [0 __builtin_abort S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:250 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 76, loop depth 0, count 0, freq 1
;;  prev block 75, next block 77, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       71 [100.0%]  (FALLTHRU)
;;              72 [100.0%]  (FALLTHRU)
;;              73 [100.0%]  (FALLTHRU)
;;              74 [100.0%]  (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u769(29){ }u770(31){ }u771(64){ }u772(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 386 1082
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; live  gen 	 66 [cc] 386 1082
;; live  kill	
(code_label 1059 1057 1060 76 57 "" [0 uses])
(note 1060 1059 1062 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 1062 1060 1063 76 (set (reg/f:DI 1082)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:252 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 1063 1062 1064 76 (set (reg:DF 386 [ D.3804 ])
        (mem/c:DF (plus:DI (reg/f:DI 1082)
                (const_int 16 [0x10])) [1 A+0 S8 A64])) options.c:252 54 {*movdf_aarch64}
     (nil))
(insn 1064 1063 1065 76 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 386 [ D.3804 ])
            (const_double:DF 0.0 [0x0.0p+0]))) options.c:252 395 {*cmpedf}
     (nil))
(jump_insn 1065 1064 1066 76 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref 1088)
            (pc))) options.c:252 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 1088)
;;  succ:       80 [0.0%] 
;;              77 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

;; basic block 77, loop depth 0, count 0, freq 1
;;  prev block 76, next block 78, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       76 [100.0%]  (FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u777(29){ }u778(31){ }u779(64){ }u780(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1086
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1086
;; live  kill	
(note 1066 1065 1069 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1069 1066 1070 77 (set (reg:DF 1086 [ B ])
        (mem/c:DF (plus:DI (reg/f:DI 1082)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) options.c:252 54 {*movdf_aarch64}
     (expr_list:REG_EQUAL (mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
                    (const_int 24 [0x18]))) [1 B+0 S8 A64])
        (nil)))
(insn 1070 1069 1071 77 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 1086 [ B ])
            (const_double:DF 0.0 [0x0.0p+0]))) options.c:252 395 {*cmpedf}
     (expr_list:REG_DEAD (reg:DF 1086 [ B ])
        (nil)))
(jump_insn 1071 1070 1072 77 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref 1088)
            (pc))) options.c:252 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 1088)
;;  succ:       80 [0.0%] 
;;              78 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

;; basic block 78, loop depth 0, count 0, freq 1
;;  prev block 77, next block 79, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       77 [100.0%]  (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u786(29){ }u787(31){ }u788(64){ }u789(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1089
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1089
;; live  kill	
(note 1072 1071 1075 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 1075 1072 1076 78 (set (reg:DF 1089 [ C ])
        (mem/c:DF (plus:DI (reg/f:DI 1082)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) options.c:252 54 {*movdf_aarch64}
     (expr_list:REG_EQUAL (mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
                    (const_int 32 [0x20]))) [1 C+0 S8 A64])
        (nil)))
(insn 1076 1075 1077 78 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 1089 [ C ])
            (const_double:DF 0.0 [0x0.0p+0]))) options.c:252 395 {*cmpedf}
     (expr_list:REG_DEAD (reg:DF 1089 [ C ])
        (nil)))
(jump_insn 1077 1076 1078 78 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref 1088)
            (pc))) options.c:252 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 1088)
;;  succ:       80 [0.0%] 
;;              79 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854

;; basic block 79, loop depth 0, count 0, freq 1
;;  prev block 78, next block 80, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       78 [100.0%]  (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u795(29){ }u796(31){ }u797(64){ }u798(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1082
;; lr  def 	 66 [cc] 1092
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1082 1854
;; live  gen 	 66 [cc] 1092
;; live  kill	
(note 1078 1077 1082 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 1082 1078 1083 79 (set (reg:DF 1092 [ D ])
        (mem/c:DF (plus:DI (reg/f:DI 1082)
                (const_int 40 [0x28])) [1 D+0 S8 A64])) options.c:252 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1082)
        (expr_list:REG_EQUAL (mem/c:DF (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
                        (const_int 40 [0x28]))) [1 D+0 S8 A64])
            (nil))))
(insn 1083 1082 1084 79 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 1092 [ D ])
            (const_double:DF 0.0 [0x0.0p+0]))) options.c:252 395 {*cmpedf}
     (expr_list:REG_DEAD (reg:DF 1092 [ D ])
        (nil)))
(jump_insn 1084 1083 1088 79 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 1088)
            (pc))) options.c:252 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 1088)
;;  succ:       80 [0.0%] 
;;              84 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854

;; basic block 80, loop depth 0, count 0, freq 0
;;  prev block 79, next block 81, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       77 [0.0%] 
;;              76 [0.0%] 
;;              79 [0.0%] 
;;              78 [0.0%] 
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u804(29){ }u805(31){ }u806(64){ }u807(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1093 1099 1100 1102
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 386 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 1093 1099 1100 1102
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 1088 1084 1089 80 58 "" [4 uses])
(note 1089 1088 1090 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1090 1089 1091 80 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) options.c:253 -1
     (nil))
(debug_insn 1091 1090 1093 80 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>)) options.c:253 -1
     (nil))
(insn 1093 1091 1098 80 (set (reg/f:DI 1093)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:253 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1854)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
            (nil))))
(insn 1098 1093 1099 80 (set (reg/f:DI 1100)
        (high:DI (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 1099 1098 1100 80 (set (reg/f:DI 1099)
        (lo_sum:DI (reg/f:DI 1100)
            (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1100)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>)
            (nil))))
(insn 1100 1099 1102 80 (set (reg/f:DI 1102)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) options.c:253 48 {*movdi_aarch64}
     (nil))
(insn 1102 1100 1103 80 (set (reg:DF 35 v3)
        (mem/c:DF (plus:DI (reg/f:DI 1093)
                (const_int 40 [0x28])) [1 D+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 54 {*movdf_aarch64}
     (nil))
(insn 1103 1102 1104 80 (set (reg:DF 34 v2)
        (mem/c:DF (plus:DI (reg/f:DI 1093)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 54 {*movdf_aarch64}
     (nil))
(insn 1104 1103 1105 80 (set (reg:DF 33 v1)
        (mem/c:DF (plus:DI (reg/f:DI 1093)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1093)
        (nil)))
(insn 1105 1104 1106 80 (set (reg:DF 32 v0)
        (reg:DF 386 [ D.3804 ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 386 [ D.3804 ])
        (nil)))
(insn 1106 1105 1107 80 (set (reg:DI 2 x2)
        (reg/f:DI 1099)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1099)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC29") [flags 0x82]  <var_decl 0x7f3c5d840990 *.LC29>)
            (nil))))
(insn 1107 1106 1108 80 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 1108 1107 1109 80 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1102)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1102)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 1109 1108 1110 80 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DF 35 v3)
        (expr_list:REG_DEAD (reg:DF 34 v2)
            (expr_list:REG_DEAD (reg:DF 33 v1)
                (expr_list:REG_DEAD (reg:DF 32 v0)
                    (expr_list:REG_DEAD (reg:DI 2 x2)
                        (expr_list:REG_DEAD (reg:SI 1 x1)
                            (expr_list:REG_UNUSED (reg:SI 0 x0)
                                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                                    (nil)))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DF (use (reg:DF 32 v0))
                            (expr_list:DF (use (reg:DF 33 v1))
                                (expr_list:DF (use (reg:DF 34 v2))
                                    (expr_list:DF (use (reg:DF 35 v3))
                                        (nil)))))))))))
(debug_insn 1110 1109 1111 80 (var_location:DI __stream (clobber (const_int 0 [0]))) options.c:253 -1
     (nil))
(debug_insn 1111 1110 1112 80 (var_location:DI __fmt (clobber (const_int 0 [0]))) options.c:253 -1
     (nil))
(insn 1112 1111 1113 80 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) options.c:256 47 {*movsi_aarch64}
     (nil))
(call_insn 1113 1112 1115 80 (parallel [
            (call (mem:DI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>) [0 __builtin_exit S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:256 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 81, loop depth 0, count 0, freq 4
;;  prev block 80, next block 82, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       68 [72.0%] 
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u831(29){ }u832(31){ }u833(64){ }u834(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 328
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 1115 1113 1116 81 50 "" [1 uses])
(note 1116 1115 1117 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1117 1116 1118 81 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 328 [ nset ])
            (const_int 0 [0]))) options.c:258 390 {*cmpsi}
     (expr_list:REG_DEAD (reg/v:SI 328 [ nset ])
        (nil)))
(jump_insn 1118 1117 4258 81 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4258)
            (pc))) options.c:258 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 1912 (nil)))
 -> 4258)
;;  succ:       83 [80.9%]  (FALLTHRU)
;;              82 [19.1%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 82, loop depth 0, count 0, freq 1
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81 [19.1%] 
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 1854
;; live  kill	
(code_label 4258 1118 4257 82 247 "" [1 uses])
(note 4257 4258 4199 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 4199 4257 1119 82 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) -1
     (nil))
;;  succ:       84 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

;; basic block 83, loop depth 0, count 0, freq 3
;;  prev block 82, next block 84, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       81 [80.9%]  (FALLTHRU)
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u837(29){ }u838(31){ }u839(64){ }u840(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 397 400 406 408 410 1103 1105 1108 1111 1115 1127 1128 1129 1130 1854
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 32 [v0] 33 [v1] 397 400 406 408 410 1103 1105 1108 1111 1115 1127 1128 1129 1130 1854
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 1119 4199 1120 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1120 1119 1121 83 (set (reg/f:DI 1854)
        (high:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:259 48 {*movdi_aarch64}
     (nil))
(insn 1121 1120 1122 83 (set (reg/f:DI 1103)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) options.c:259 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 1122 1121 1123 83 (set (reg:DF 32 v0)
        (mem/c:DF (plus:DI (reg/f:DI 1103)
                (const_int 16 [0x10])) [1 A+0 S8 A64])) options.c:259 54 {*movdf_aarch64}
     (nil))
(call_insn/u 1123 1122 1124 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__extenddftf2") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:259 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__extenddftf2") [flags 0x41])
        (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:DF 32 v0))
                (nil)))))
(insn 1124 1123 1126 83 (set (reg:TF 1105)
        (reg:TF 32 v0)) options.c:259 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 32 v0)
        (nil)))
(debug_insn 1126 1124 1129 83 (var_location:TF sum (reg:TF 1105)) options.c:259 -1
     (nil))
(insn 1129 1126 1130 83 (set (reg:DF 32 v0)
        (mem/c:DF (plus:DI (reg/f:DI 1103)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) options.c:260 54 {*movdf_aarch64}
     (nil))
(call_insn/u 1130 1129 1131 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__extenddftf2") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:260 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__extenddftf2") [flags 0x41])
        (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:DF 32 v0))
                (nil)))))
(insn 1131 1130 1132 83 (set (reg:TF 397 [ D.3808 ])
        (reg:TF 32 v0)) options.c:260 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 32 v0)
        (nil)))
(insn 1132 1131 1133 83 (set (reg:TF 33 v1)
        (reg:TF 397 [ D.3808 ])) options.c:260 55 {*movtf_aarch64}
     (nil))
(insn 1133 1132 1134 83 (set (reg:TF 32 v0)
        (reg:TF 1105)) options.c:260 55 {*movtf_aarch64}
     (nil))
(call_insn/u 1134 1133 1135 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__addtf3") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:260 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:TF 33 v1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__addtf3") [flags 0x41])
            (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 33 v1))
                (expr_list (use (reg:TF 32 v0))
                    (nil))))))
(insn 1135 1134 1137 83 (set (reg:TF 1108)
        (reg:TF 32 v0)) options.c:260 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 32 v0)
        (expr_list:REG_EQUAL (plus:TF (reg:TF 1105)
                (reg:TF 397 [ D.3808 ]))
            (nil))))
(debug_insn 1137 1135 1140 83 (var_location:TF sum (reg:TF 1108)) options.c:260 -1
     (nil))
(insn 1140 1137 1141 83 (set (reg:DF 32 v0)
        (mem/c:DF (plus:DI (reg/f:DI 1103)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) options.c:261 54 {*movdf_aarch64}
     (nil))
(call_insn/u 1141 1140 1142 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__extenddftf2") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:261 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__extenddftf2") [flags 0x41])
        (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:DF 32 v0))
                (nil)))))
(insn 1142 1141 1143 83 (set (reg:TF 400 [ D.3808 ])
        (reg:TF 32 v0)) options.c:261 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 32 v0)
        (nil)))
(insn 1143 1142 1144 83 (set (reg:TF 33 v1)
        (reg:TF 400 [ D.3808 ])) options.c:261 55 {*movtf_aarch64}
     (nil))
(insn 1144 1143 1145 83 (set (reg:TF 32 v0)
        (reg:TF 1108)) options.c:261 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 1108)
        (nil)))
(call_insn/u 1145 1144 1146 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__addtf3") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:261 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:TF 33 v1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__addtf3") [flags 0x41])
            (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 33 v1))
                (expr_list (use (reg:TF 32 v0))
                    (nil))))))
(insn 1146 1145 1148 83 (set (reg:TF 1111)
        (reg:TF 32 v0)) options.c:261 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 32 v0)
        (nil)))
(debug_insn 1148 1146 1151 83 (var_location:TF sum (reg:TF 1111)) options.c:261 -1
     (nil))
(insn 1151 1148 1152 83 (set (reg:DF 32 v0)
        (mem/c:DF (plus:DI (reg/f:DI 1103)
                (const_int 40 [0x28])) [1 D+0 S8 A64])) options.c:262 54 {*movdf_aarch64}
     (nil))
(call_insn/u 1152 1151 1154 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__extenddftf2") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:262 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__extenddftf2") [flags 0x41])
        (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:DF 32 v0))
                (nil)))))
(insn 1154 1152 1156 83 (set (reg:TF 33 v1)
        (reg:TF 1111)) options.c:262 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 1111)
        (nil)))
(call_insn/u 1156 1154 1157 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__addtf3") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:262 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:TF 33 v1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__addtf3") [flags 0x41])
            (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 33 v1))
                (expr_list (use (reg:TF 32 v0))
                    (nil))))))
(insn 1157 1156 1159 83 (set (reg:TF 1115)
        (reg:TF 32 v0)) options.c:262 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 32 v0)
        (nil)))
(debug_insn 1159 1157 1160 83 (var_location:TF sum (reg:TF 1115)) options.c:262 -1
     (nil))
(insn 1160 1159 1161 83 (set (reg:TF 33 v1)
        (reg:TF 1115)) options.c:263 55 {*movtf_aarch64}
     (nil))
(insn 1161 1160 1162 83 (set (reg:TF 32 v0)
        (reg:TF 1105)) options.c:263 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 1105)
        (nil)))
(call_insn/u 1162 1161 1165 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__divtf3") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:263 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:TF 33 v1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__divtf3") [flags 0x41])
            (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 33 v1))
                (expr_list (use (reg:TF 32 v0))
                    (nil))))))
(call_insn/u 1165 1162 1166 83 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__trunctfdf2") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:263 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__trunctfdf2") [flags 0x41])
        (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 32 v0))
                (nil)))))
(insn 1166 1165 1169 83 (set (reg:DF 406 [ D.3804 ])
        (reg:DF 32 v0)) options.c:263 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 1169 1166 1170 83 (set (mem/c:DF (plus:DI (reg/f:DI 1103)
                (const_int 16 [0x10])) [1 A+0 S8 A64])
        (reg:DF 406 [ D.3804 ])) options.c:263 54 {*movdf_aarch64}
     (nil))
(insn 1170 1169 1171 83 (set (reg:TF 33 v1)
        (reg:TF 1115)) options.c:264 55 {*movtf_aarch64}
     (nil))
(insn 1171 1170 1172 83 (set (reg:TF 32 v0)
        (reg:TF 397 [ D.3808 ])) options.c:264 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 397 [ D.3808 ])
        (nil)))
(call_insn/u 1172 1171 1175 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__divtf3") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:264 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:TF 33 v1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__divtf3") [flags 0x41])
            (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 33 v1))
                (expr_list (use (reg:TF 32 v0))
                    (nil))))))
(call_insn/u 1175 1172 1176 83 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__trunctfdf2") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:264 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__trunctfdf2") [flags 0x41])
        (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 32 v0))
                (nil)))))
(insn 1176 1175 1179 83 (set (reg:DF 408 [ D.3804 ])
        (reg:DF 32 v0)) options.c:264 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 1179 1176 1180 83 (set (mem/c:DF (plus:DI (reg/f:DI 1103)
                (const_int 24 [0x18])) [1 B+0 S8 A64])
        (reg:DF 408 [ D.3804 ])) options.c:264 54 {*movdf_aarch64}
     (nil))
(insn 1180 1179 1181 83 (set (reg:TF 33 v1)
        (reg:TF 1115)) options.c:265 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 1115)
        (nil)))
(insn 1181 1180 1182 83 (set (reg:TF 32 v0)
        (reg:TF 400 [ D.3808 ])) options.c:265 55 {*movtf_aarch64}
     (expr_list:REG_DEAD (reg:TF 400 [ D.3808 ])
        (nil)))
(call_insn/u 1182 1181 1185 83 (parallel [
            (set (reg:TF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__divtf3") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:265 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:TF 33 v1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__divtf3") [flags 0x41])
            (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 33 v1))
                (expr_list (use (reg:TF 32 v0))
                    (nil))))))
(call_insn/u 1185 1182 1186 83 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("__trunctfdf2") [flags 0x41]) [0  S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) options.c:265 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__trunctfdf2") [flags 0x41])
        (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list (use (reg:TF 32 v0))
                (nil)))))
(insn 1186 1185 1189 83 (set (reg:DF 410 [ D.3804 ])
        (reg:DF 32 v0)) options.c:265 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 1189 1186 1192 83 (set (mem/c:DF (plus:DI (reg/f:DI 1103)
                (const_int 32 [0x20])) [1 C+0 S8 A64])
        (reg:DF 410 [ D.3804 ])) options.c:265 54 {*movdf_aarch64}
     (nil))
(insn 1192 1189 1193 83 (set (reg:DF 1127 [ D.3804 ])
        (plus:DF (reg:DF 406 [ D.3804 ])
            (reg:DF 408 [ D.3804 ]))) options.c:266 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 408 [ D.3804 ])
        (expr_list:REG_DEAD (reg:DF 406 [ D.3804 ])
            (nil))))
(insn 1193 1192 1194 83 (set (reg:DF 1128 [ D.3804 ])
        (plus:DF (reg:DF 1127 [ D.3804 ])
            (reg:DF 410 [ D.3804 ]))) options.c:266 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1127 [ D.3804 ])
        (expr_list:REG_DEAD (reg:DF 410 [ D.3804 ])
            (nil))))
(insn 1194 1193 1195 83 (set (reg:DF 1130)
        (const_double:DF 1.0e+0 [0x0.8p+1])) options.c:266 54 {*movdf_aarch64}
     (nil))
(insn 1195 1194 1196 83 (set (reg:DF 1129 [ D.3804 ])
        (minus:DF (reg:DF 1130)
            (reg:DF 1128 [ D.3804 ]))) options.c:266 807 {subdf3}
     (expr_list:REG_DEAD (reg:DF 1130)
        (expr_list:REG_DEAD (reg:DF 1128 [ D.3804 ])
            (expr_list:REG_EQUAL (minus:DF (const_double:DF 1.0e+0 [0x0.8p+1])
                    (reg:DF 1128 [ D.3804 ]))
                (nil)))))
(insn 1196 1195 1197 83 (set (mem/c:DF (plus:DI (reg/f:DI 1103)
                (const_int 40 [0x28])) [1 D+0 S8 A64])
        (reg:DF 1129 [ D.3804 ])) options.c:266 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 1129 [ D.3804 ])
        (expr_list:REG_DEAD (reg/f:DI 1103)
            (nil))))
;;  succ:       84 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854

;; basic block 84, loop depth 0, count 0, freq 32
;;  prev block 83, next block 86, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU)
;;              83 [100.0%]  (FALLTHRU)
;;              79 [100.0%]  (FALLTHRU)
;;              82 [100.0%]  (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u944(29){ }u945(31){ }u946(64){ }u947(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 243 286 1133 1135 1136 1138 1139 1853
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; live  gen 	 0 [x0] 66 [cc] 243 286 1133 1135 1136 1138 1139 1853
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 1197 1196 1198 84 12 "" [0 uses])
(note 1198 1197 1201 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1201 1198 1203 84 (set (reg:DI 1133 [ SCALE ])
        (mem/c:DI (lo_sum:DI (reg/f:DI 1854)
                (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])) [4 SCALE+0 S8 A64])) graph500.c:68 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/c:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]) [4 SCALE+0 S8 A64])
        (nil)))
(insn 1203 1201 1204 84 (set (reg:DI 1135)
        (const_int 1 [0x1])) graph500.c:68 48 {*movdi_aarch64}
     (nil))
(insn 1204 1203 1205 84 (set (reg:DI 243 [ D.3798 ])
        (ashift:DI (reg:DI 1135)
            (subreg:QI (reg:DI 1133 [ SCALE ]) 0))) graph500.c:68 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1135)
        (expr_list:REG_DEAD (reg:DI 1133 [ SCALE ])
            (expr_list:REG_EQUAL (ashift:DI (const_int 1 [0x1])
                    (subreg:QI (reg:DI 1133 [ SCALE ]) 0))
                (nil)))))
(insn 1205 1204 1206 84 (set (reg/f:DI 1853)
        (high:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:68 48 {*movdi_aarch64}
     (nil))
(insn 1206 1205 1207 84 (set (reg/f:DI 1136)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:68 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 1207 1206 1208 84 (set (mem/c:DI (plus:DI (reg/f:DI 1136)
                (const_int 24 [0x18])) [4 nvtx_scale+0 S8 A64])
        (reg:DI 243 [ D.3798 ])) graph500.c:68 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1136)
        (nil)))
(debug_insn 1208 1207 1209 84 (var_location:DI seed (const_int -1 [0xffffffffffffffff])) prng.c:29 -1
     (nil))
(insn 1209 1208 1210 84 (set (reg/f:DI 1139)
        (high:DI (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>))) prng.c:30 48 {*movdi_aarch64}
     (nil))
(insn 1210 1209 1211 84 (set (reg/f:DI 1138)
        (lo_sum:DI (reg/f:DI 1139)
            (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>))) prng.c:30 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1139)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>)
            (nil))))
(insn 1211 1210 1212 84 (set (reg:DI 0 x0)
        (reg/f:DI 1138)) prng.c:30 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>)
        (nil)))
(call_insn 1212 1211 1213 84 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f3c5e252200 getenv>) [0 getenv S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) prng.c:30 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f3c5e252200 getenv>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 1213 1212 1214 84 (set (reg/f:DI 286 [ D.3800 ])
        (reg:DI 0 x0)) prng.c:30 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 1214 1213 1215 84 (set (reg:CC 66 cc)
        (compare:CC (reg/f:DI 286 [ D.3800 ])
            (const_int 0 [0]))) prng.c:30 391 {*cmpdi}
     (expr_list:REG_DEAD (reg/f:DI 286 [ D.3800 ])
        (nil)))
(jump_insn 1215 1214 1216 84 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3766)
            (pc))) prng.c:30 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 3766)
;;  succ:       86 [69.8%]  (FALLTHRU)
;;              298 [30.2%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1853 1854

;; basic block 86, loop depth 0, count 0, freq 22
;;  prev block 84, next block 87, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       84 [69.8%]  (FALLTHRU)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u963(29){ }u964(31){ }u965(64){ }u966(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1138
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 414 416 1142
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1138 1853 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 414 416 1142
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 1216 1215 1217 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 1217 1216 1218 86 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>) [0 __errno_location S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) prng.c:31 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f3c5e252300 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 1218 1217 1219 86 (set (reg/f:DI 414 [ D.3807 ])
        (reg:DI 0 x0)) prng.c:31 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(insn 1219 1218 1222 86 (set (mem:SI (reg/f:DI 414 [ D.3807 ]) [3 *_266+0 S4 A32])
        (const_int 0 [0])) prng.c:31 47 {*movsi_aarch64}
     (nil))
(insn 1222 1219 1223 86 (set (reg:DI 0 x0)
        (reg/f:DI 1138)) prng.c:32 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1138)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC30") [flags 0x82]  <var_decl 0x7f3c5d840a20 *.LC30>)
            (nil))))
(call_insn 1223 1222 1225 86 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f3c5e252200 getenv>) [0 getenv S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) prng.c:32 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f3c5e252200 getenv>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 1225 1223 1226 86 (set (reg:SI 2 x2)
        (const_int 10 [0xa])) prng.c:32 47 {*movsi_aarch64}
     (nil))
(insn 1226 1225 1228 86 (set (reg:DI 1 x1)
        (const_int 0 [0])) prng.c:32 48 {*movdi_aarch64}
     (nil))
(call_insn 1228 1226 1229 86 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f3c5e252100 strtol>) [0 strtol S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) prng.c:32 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f3c5e252100 strtol>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 1229 1228 1230 86 (set (reg/v:DI 416 [ seed ])
        (reg:DI 0 x0)) prng.c:32 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(debug_insn 1230 1229 1231 86 (var_location:DI seed (reg/v:DI 416 [ seed ])) prng.c:32 -1
     (nil))
(insn 1231 1230 1232 86 (set (reg:SI 1142 [ *_266 ])
        (mem:SI (reg/f:DI 414 [ D.3807 ]) [3 *_266+0 S4 A32])) prng.c:33 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 414 [ D.3807 ])
        (nil)))
(insn 1232 1231 1233 86 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1142 [ *_266 ])
            (const_int 0 [0]))) prng.c:33 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1142 [ *_266 ])
        (nil)))
(jump_insn 1233 1232 1234 86 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3766)
            (pc))) prng.c:33 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 3766)
;;  succ:       298 [50.0%] 
;;              87 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

;; basic block 87, loop depth 0, count 0, freq 11
;;  prev block 86, next block 88, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       86 [50.0%]  (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u986(29){ }u987(31){ }u988(64){ }u989(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 416
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; live  gen 	 66 [cc]
;; live  kill	
(note 1234 1233 1235 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1235 1234 1236 87 (var_location:DI seed (reg/v:DI 416 [ seed ])) -1
     (nil))
(insn 1236 1235 1237 87 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 416 [ seed ])
            (const_int 0 [0]))) prng.c:36 391 {*cmpdi}
     (nil))
(jump_insn 1237 1236 3769 87 (set (pc)
        (if_then_else (lt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3766)
            (pc))) prng.c:36 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 3766)
;;  succ:       298
;;              88 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

;; basic block 88, loop depth 0, count 0, freq 32
;;  prev block 87, next block 89, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       87 [100.0%]  (FALLTHRU)
;;              298 [100.0%]  (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u993(29){ }u994(31){ }u995(64){ }u996(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; lr  def 	 66 [cc] 244 245 421 424 425 427 1143 1145 1149 1150 1151 1164 1165 1170 1180 1862
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854
;; live  gen 	 66 [cc] 244 245 421 424 425 427 1143 1145 1149 1150 1151 1164 1165 1170 1180 1862
;; live  kill	
(code_label 3769 1237 1238 88 182 "" [0 uses])
(note 1238 3769 1239 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1239 1238 1242 88 (var_location:DI seed (reg/v:DI 416 [ seed ])) -1
     (nil))
(insn 1242 1239 1243 88 (set (reg/f:DI 1143)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) prng.c:37 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 1243 1242 1244 88 (set (mem/c:DI (plus:DI (reg/f:DI 1143)
                (const_int 32 [0x20])) [4 userseed+0 S8 A64])
        (reg/v:DI 416 [ seed ])) prng.c:37 48 {*movdi_aarch64}
     (nil))
(debug_insn 1244 1243 1245 88 (var_location:DI userseed (reg/v:DI 416 [ seed ])) prng.c:38 -1
     (nil))
(debug_insn 1245 1244 1246 88 (var_location:DI seed (symbol_ref:DI ("prng_seed") [flags 0x82]  <var_decl 0x7f3c5e254a20 prng_seed>)) prng.c:38 -1
     (nil))
(insn 1246 1245 1247 88 (set (reg:DI 1145 [ D.3802 ])
        (and:DI (reg/v:DI 416 [ seed ])
            (const_int 1073741823 [0x3fffffff]))) prng.c:19 468 {anddi3}
     (nil))
(insn 1247 1246 1251 88 (set (reg:DI 421 [ D.3802 ])
        (plus:DI (reg:DI 1145 [ D.3802 ])
            (const_int 1 [0x1]))) prng.c:19 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1145 [ D.3802 ])
        (nil)))
(insn 1251 1247 1252 88 (set (reg/f:DI 1149)
        (plus:DI (reg/f:DI 1143)
            (const_int 40 [0x28]))) prng.c:19 95 {*adddi3_aarch64}
     (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                (const_int 40 [0x28])))
        (nil)))
(insn 1252 1251 1253 88 (set (mem/c:DI (plus:DI (reg/f:DI 1143)
                (const_int 40 [0x28])) [4 MEM[(uint_fast32_t *)&prng_seed]+0 S8 A64])
        (reg:DI 421 [ D.3802 ])) prng.c:19 48 {*movdi_aarch64}
     (nil))
(insn 1253 1252 1254 88 (set (reg:DI 1150 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 416 [ seed ])
            (const_int 30 [0x1e]))) prng.c:20 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 1254 1253 1255 88 (set (reg:DI 1151 [ D.3802 ])
        (and:DI (reg:DI 1150 [ D.3802 ])
            (const_int 1073741823 [0x3fffffff]))) prng.c:20 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1150 [ D.3802 ])
        (nil)))
(insn 1255 1254 1260 88 (set (reg:DI 424 [ D.3802 ])
        (plus:DI (reg:DI 1151 [ D.3802 ])
            (const_int 1 [0x1]))) prng.c:20 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1151 [ D.3802 ])
        (nil)))
(insn 1260 1255 1265 88 (set (mem/c:DI (plus:DI (reg/f:DI 1149)
                (const_int 8 [0x8])) [4 MEM[(uint_fast32_t *)&prng_seed + 8B]+0 S8 A64])
        (reg:DI 424 [ D.3802 ])) prng.c:20 48 {*movdi_aarch64}
     (nil))
(insn 1265 1260 1270 88 (set (mem/c:DI (plus:DI (reg/f:DI 1149)
                (const_int 16 [0x10])) [4 MEM[(uint_fast32_t *)&prng_seed + 16B]+0 S8 A64])
        (reg:DI 421 [ D.3802 ])) prng.c:21 48 {*movdi_aarch64}
     (nil))
(insn 1270 1265 1271 88 (set (mem/c:DI (plus:DI (reg/f:DI 1149)
                (const_int 24 [0x18])) [4 MEM[(uint_fast32_t *)&prng_seed + 24B]+0 S8 A64])
        (reg:DI 424 [ D.3802 ])) prng.c:22 48 {*movdi_aarch64}
     (nil))
(insn 1271 1270 1272 88 (set (reg:DI 425 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 416 [ seed ])
            (const_int 60 [0x3c]))) prng.c:23 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg/v:DI 416 [ seed ])
        (nil)))
(insn 1272 1271 1273 88 (set (reg:DI 1164 [ D.3802 ])
        (ashift:DI (reg:DI 425 [ D.3802 ])
            (const_int 4 [0x4]))) prng.c:23 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1273 1272 1274 88 (set (reg:DI 1165 [ D.3802 ])
        (plus:DI (reg:DI 425 [ D.3802 ])
            (const_int 1 [0x1]))) prng.c:23 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 425 [ D.3802 ])
        (nil)))
(insn 1274 1273 1279 88 (set (reg:DI 427 [ D.3802 ])
        (plus:DI (reg:DI 1164 [ D.3802 ])
            (reg:DI 1165 [ D.3802 ]))) prng.c:23 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1165 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 1164 [ D.3802 ])
            (nil))))
(insn 1279 1274 1280 88 (set (mem/c:DI (plus:DI (reg/f:DI 1149)
                (const_int 32 [0x20])) [4 MEM[(uint_fast32_t *)&prng_seed + 32B]+0 S8 A64])
        (reg:DI 427 [ D.3802 ])) prng.c:23 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1149)
        (nil)))
(debug_insn 1280 1279 1281 88 (var_location:DI userseed (clobber (const_int 0 [0]))) prng.c:38 -1
     (nil))
(debug_insn 1281 1280 1282 88 (var_location:DI seed (clobber (const_int 0 [0]))) prng.c:38 -1
     (nil))
(debug_insn 1282 1281 1283 88 (var_location:DI st (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) prng.c:38 -1
     (nil))
(debug_insn 1283 1282 1284 88 (var_location:DI seed (symbol_ref:DI ("prng_seed") [flags 0x82]  <var_decl 0x7f3c5e254a20 prng_seed>)) prng.c:38 -1
     (nil))
(insn 1284 1283 1285 88 (set (reg/f:DI 1862)
        (high:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))) generator/splittable_mrg.c:280 48 {*movdi_aarch64}
     (nil))
(insn 1285 1284 1286 88 (set (reg/f:DI 1170)
        (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))) generator/splittable_mrg.c:280 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
        (nil)))
(insn 1286 1285 1289 88 (set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
                (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
        (reg:DI 421 [ D.3802 ])) generator/splittable_mrg.c:280 48 {*movdi_aarch64}
     (nil))
(insn 1289 1286 1292 88 (set (mem/c:DI (plus:DI (reg/f:DI 1170)
                (const_int 8 [0x8])) [4 prng_state_store.z2+0 S8 A64])
        (reg:DI 424 [ D.3802 ])) generator/splittable_mrg.c:281 48 {*movdi_aarch64}
     (nil))
(insn 1292 1289 1295 88 (set (mem/c:DI (plus:DI (reg/f:DI 1170)
                (const_int 16 [0x10])) [4 prng_state_store.z3+0 S8 A64])
        (reg:DI 421 [ D.3802 ])) generator/splittable_mrg.c:282 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 421 [ D.3802 ])
        (nil)))
(insn 1295 1292 1298 88 (set (mem/c:DI (plus:DI (reg/f:DI 1170)
                (const_int 24 [0x18])) [4 prng_state_store.z4+0 S8 A64])
        (reg:DI 424 [ D.3802 ])) generator/splittable_mrg.c:283 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 424 [ D.3802 ])
        (nil)))
(insn 1298 1295 1299 88 (set (mem/c:DI (plus:DI (reg/f:DI 1170)
                (const_int 32 [0x20])) [4 prng_state_store.z5+0 S8 A64])
        (reg:DI 427 [ D.3802 ])) generator/splittable_mrg.c:284 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1170)
        (expr_list:REG_DEAD (reg:DI 427 [ D.3802 ])
            (nil))))
(debug_insn 1299 1298 1300 88 (var_location:DI st (clobber (const_int 0 [0]))) prng.c:39 -1
     (nil))
(debug_insn 1300 1299 1301 88 (var_location:DI seed (clobber (const_int 0 [0]))) prng.c:39 -1
     (nil))
(debug_insn 1301 1300 1303 88 (var_location:DI seed (clobber (const_int 0 [0]))) graph500.c:70 -1
     (nil))
(insn 1303 1301 1304 88 (set (reg/f:DI 1180)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) graph500.c:72 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 1304 1303 1305 88 (set (reg:DI 244 [ D.3798 ])
        (mem/c:DI (plus:DI (reg/f:DI 1180)
                (const_int 8 [0x8])) [4 edgefactor+0 S8 A64])) graph500.c:72 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1180)
        (nil)))
(insn 1305 1304 1306 88 (set (reg/v:DI 245 [ desired_nedge ])
        (mult:DI (reg:DI 243 [ D.3798 ])
            (reg:DI 244 [ D.3798 ]))) graph500.c:72 363 {muldi3}
     (nil))
(debug_insn 1306 1305 1307 88 (var_location:DI desired_nedge (reg/v:DI 245 [ desired_nedge ])) graph500.c:72 -1
     (nil))
(insn 1307 1306 1308 88 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 243 [ D.3798 ])
            (reg/v:DI 245 [ desired_nedge ]))) graph500.c:74 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 243 [ D.3798 ])
        (nil)))
(jump_insn 1308 1307 1309 88 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1322)
            (pc))) graph500.c:74 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 1322)
;;  succ:       89 [0.0%]  (FALLTHRU)
;;              90 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1853 1854 1862

;; basic block 89, loop depth 0, count 0, freq 0
;;  prev block 88, next block 90, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       88 [0.0%]  (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u1065(29){ }u1066(31){ }u1067(64){ }u1068(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1182 1183 1184 1185 1186 1187
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1182 1183 1184 1185 1186 1187
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 1309 1308 1310 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 1310 1309 1311 89 (set (reg/f:DI 1183)
        (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) graph500.c:74 48 {*movdi_aarch64}
     (nil))
(insn 1311 1310 1312 89 (set (reg/f:DI 1182)
        (lo_sum:DI (reg/f:DI 1183)
            (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) graph500.c:74 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1183)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 1312 1311 1313 89 (set (reg/f:DI 1185)
        (high:DI (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))) graph500.c:74 48 {*movdi_aarch64}
     (nil))
(insn 1313 1312 1314 89 (set (reg/f:DI 1184)
        (lo_sum:DI (reg/f:DI 1185)
            (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))) graph500.c:74 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1185)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
            (nil))))
(insn 1314 1313 1315 89 (set (reg/f:DI 1187)
        (high:DI (symbol_ref/f:DI ("*.LC32") [flags 0x82]  <var_decl 0x7f3c5d840b40 *.LC32>))) graph500.c:74 48 {*movdi_aarch64}
     (nil))
(insn 1315 1314 1316 89 (set (reg/f:DI 1186)
        (lo_sum:DI (reg/f:DI 1187)
            (symbol_ref/f:DI ("*.LC32") [flags 0x82]  <var_decl 0x7f3c5d840b40 *.LC32>))) graph500.c:74 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1187)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC32") [flags 0x82]  <var_decl 0x7f3c5d840b40 *.LC32>)
            (nil))))
(insn 1316 1315 1317 89 (set (reg:DI 3 x3)
        (reg/f:DI 1182)) graph500.c:74 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1182)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 1317 1316 1318 89 (set (reg:SI 2 x2)
        (const_int 74 [0x4a])) graph500.c:74 47 {*movsi_aarch64}
     (nil))
(insn 1318 1317 1319 89 (set (reg:DI 1 x1)
        (reg/f:DI 1184)) graph500.c:74 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1184)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
            (nil))))
(insn 1319 1318 1320 89 (set (reg:DI 0 x0)
        (reg/f:DI 1186)) graph500.c:74 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1186)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC32") [flags 0x82]  <var_decl 0x7f3c5d840b40 *.LC32>)
            (nil))))
(call_insn 1320 1319 1322 89 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:74 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 90, loop depth 0, count 0, freq 32
;;  prev block 89, next block 91, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       88 [100.0%] 
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u1080(29){ }u1081(31){ }u1082(64){ }u1083(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 244 245 1143 1853 1854 1862
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 1322 1320 1323 90 63 "" [1 uses])
(note 1323 1322 1324 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 1324 1323 1325 90 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 244 [ D.3798 ])
            (reg/v:DI 245 [ desired_nedge ]))) graph500.c:75 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 244 [ D.3798 ])
        (nil)))
(jump_insn 1325 1324 1326 90 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1339)
            (pc))) graph500.c:75 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 1339)
;;  succ:       91 [0.0%]  (FALLTHRU)
;;              92 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1853 1854 1862

;; basic block 91, loop depth 0, count 0, freq 0
;;  prev block 90, next block 92, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       90 [0.0%]  (FALLTHRU)
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u1087(29){ }u1088(31){ }u1089(64){ }u1090(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1188 1189 1190 1191 1192 1193
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1188 1189 1190 1191 1192 1193
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 1326 1325 1327 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 1327 1326 1328 91 (set (reg/f:DI 1189)
        (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) graph500.c:75 48 {*movdi_aarch64}
     (nil))
(insn 1328 1327 1329 91 (set (reg/f:DI 1188)
        (lo_sum:DI (reg/f:DI 1189)
            (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) graph500.c:75 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1189)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 1329 1328 1330 91 (set (reg/f:DI 1191)
        (high:DI (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))) graph500.c:75 48 {*movdi_aarch64}
     (nil))
(insn 1330 1329 1331 91 (set (reg/f:DI 1190)
        (lo_sum:DI (reg/f:DI 1191)
            (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))) graph500.c:75 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1191)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
            (nil))))
(insn 1331 1330 1332 91 (set (reg/f:DI 1193)
        (high:DI (symbol_ref/f:DI ("*.LC33") [flags 0x82]  <var_decl 0x7f3c5d840bd0 *.LC33>))) graph500.c:75 48 {*movdi_aarch64}
     (nil))
(insn 1332 1331 1333 91 (set (reg/f:DI 1192)
        (lo_sum:DI (reg/f:DI 1193)
            (symbol_ref/f:DI ("*.LC33") [flags 0x82]  <var_decl 0x7f3c5d840bd0 *.LC33>))) graph500.c:75 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1193)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC33") [flags 0x82]  <var_decl 0x7f3c5d840bd0 *.LC33>)
            (nil))))
(insn 1333 1332 1334 91 (set (reg:DI 3 x3)
        (reg/f:DI 1188)) graph500.c:75 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1188)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 1334 1333 1335 91 (set (reg:SI 2 x2)
        (const_int 75 [0x4b])) graph500.c:75 47 {*movsi_aarch64}
     (nil))
(insn 1335 1334 1336 91 (set (reg:DI 1 x1)
        (reg/f:DI 1190)) graph500.c:75 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1190)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
            (nil))))
(insn 1336 1335 1337 91 (set (reg:DI 0 x0)
        (reg/f:DI 1192)) graph500.c:75 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1192)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC33") [flags 0x82]  <var_decl 0x7f3c5d840bd0 *.LC33>)
            (nil))))
(call_insn 1337 1336 1339 91 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:75 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 92, loop depth 0, count 0, freq 32
;;  prev block 91, next block 93, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       90 [100.0%] 
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u1102(29){ }u1103(31){ }u1104(64){ }u1105(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1143
;; lr  def 	 66 [cc] 246
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1143 1853 1854 1862
;; live  gen 	 66 [cc] 246
;; live  kill	
(code_label 1339 1337 1340 92 64 "" [1 uses])
(note 1340 1339 1343 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 1343 1340 1344 92 (set (reg/f:DI 246 [ D.3800 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 1143)
                (const_int 8 [0x8])) [2 dumpname+0 S8 A64])) graph500.c:82 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [2 dumpname+0 S8 A64])
        (nil)))
(insn 1344 1343 1345 92 (set (reg:CC 66 cc)
        (compare:CC (reg/f:DI 246 [ D.3800 ])
            (const_int 0 [0]))) graph500.c:82 391 {*cmpdi}
     (nil))
(jump_insn 1345 1344 1346 92 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2225)
            (pc))) graph500.c:82 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 6983 (nil)))
 -> 2225)
;;  succ:       93 [30.2%]  (FALLTHRU)
;;              147 [69.8%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 246 1143 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 246 1143 1853 1854 1862

;; basic block 93, loop depth 0, count 0, freq 10
;;  prev block 92, next block 95, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       92 [30.2%]  (FALLTHRU)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u1111(29){ }u1112(31){ }u1113(64){ }u1114(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1198
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 66 [cc] 1198
;; live  kill	
(note 1346 1345 1349 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 1349 1346 1350 93 (set (reg:SI 1198 [ VERBOSE ])
        (mem/c:SI (lo_sum:DI (reg/f:DI 1853)
                (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])) graph500.c:83 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])
        (nil)))
(insn 1350 1349 1351 93 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1198 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:83 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1198 [ VERBOSE ])
        (nil)))
(jump_insn 1351 1350 1352 93 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 1363)
            (pc))) graph500.c:83 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 1363)
;;  succ:       95 [29.0%]  (FALLTHRU)
;;              96 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862

;; basic block 95, loop depth 0, count 0, freq 3
;;  prev block 93, next block 96, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       93 [29.0%]  (FALLTHRU)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u1120(29){ }u1121(31){ }u1122(64){ }u1123(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1199 1200 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1199 1200 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 1352 1351 1353 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1353 1352 1354 95 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:83 -1
     (nil))
(debug_insn 1354 1353 1355 95 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>)) graph500.c:83 -1
     (nil))
(insn 1355 1354 1356 95 (set (reg/f:DI 1200)
        (high:DI (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 1356 1355 1357 95 (set (reg/f:DI 1199)
        (lo_sum:DI (reg/f:DI 1200)
            (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1200)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>)
            (nil))))
(insn 1357 1356 1359 95 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:83 48 {*movdi_aarch64}
     (nil))
(insn 1359 1357 1360 95 (set (reg:DI 2 x2)
        (reg/f:DI 1199)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1199)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC34") [flags 0x82]  <var_decl 0x7f3c5d840c60 *.LC34>)
            (nil))))
(insn 1360 1359 1361 95 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 1361 1360 1362 95 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 1362 1361 1363 95 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
;;  succ:       96 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862

;; basic block 96, loop depth 0, count 0, freq 10
;;  prev block 95, next block 97, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       93 [71.0%] 
;;              95 [100.0%]  (FALLTHRU)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u1132(29){ }u1133(31){ }u1134(64){ }u1135(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1203 1205
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1853 1854 1862
;; live  gen 	 66 [cc] 1203 1205
;; live  kill	
(code_label 1363 1362 1364 96 66 "" [1 uses])
(note 1364 1363 1366 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 1366 1364 1367 96 (set (reg/f:DI 1203)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:84 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 1367 1366 1368 96 (set (reg:SI 1205 [ use_RMAT ])
        (mem/c:SI (plus:DI (reg/f:DI 1203)
                (const_int 4 [0x4])) [3 use_RMAT+0 S4 A32])) graph500.c:84 47 {*movsi_aarch64}
     (nil))
(insn 1368 1367 1369 96 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1205 [ use_RMAT ])
            (const_int 0 [0]))) graph500.c:84 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1205 [ use_RMAT ])
        (nil)))
(jump_insn 1369 1368 1370 96 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1415)
            (pc))) graph500.c:84 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1415)
;;  succ:       97 [50.0%]  (FALLTHRU)
;;              98 [50.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862

;; basic block 97, loop depth 0, count 0, freq 5
;;  prev block 96, next block 98, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       96 [50.0%]  (FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u1140(29){ }u1141(31){ }u1142(64){ }u1143(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 259 289 1208 1211 1213 1221 1859
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 32 [v0] 33 [v1] 34 [v2] 259 289 1208 1211 1213 1221 1859
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 1370 1369 1373 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 1373 1370 1374 97 (set (mem/c:DI (plus:DI (reg/f:DI 1203)
                (const_int 80 [0x50])) [4 nedge+0 S8 A64])
        (reg/v:DI 245 [ desired_nedge ])) graph500.c:85 48 {*movdi_aarch64}
     (nil))
(debug_insn 1374 1373 1375 97 (var_location:DI sz (ashift:DI (reg/v:DI 245 [ desired_nedge ])
        (const_int 4 [0x4]))) graph500.c:86 -1
     (nil))
(insn 1375 1374 1376 97 (set (reg:DI 1208 [ D.3802 ])
        (ashift:DI (reg/v:DI 245 [ desired_nedge ])
            (const_int 4 [0x4]))) xalloc.c:104 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg/v:DI 245 [ desired_nedge ])
        (nil)))
(insn 1376 1375 1377 97 (set (reg:DI 0 x0)
        (reg:DI 1208 [ D.3802 ])) xalloc.c:104 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1208 [ D.3802 ])
        (nil)))
(call_insn 1377 1376 1378 97 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("xmalloc") [flags 0x43]  <function_decl 0x7f3c5e239600 xmalloc>) [0 xmalloc S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) xalloc.c:104 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("xmalloc") [flags 0x43]  <function_decl 0x7f3c5e239600 xmalloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 1378 1377 1379 97 (set (reg/f:DI 289 [ D.3806 ])
        (reg:DI 0 x0)) xalloc.c:104 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(debug_insn 1379 1378 1382 97 (var_location:DI sz (clobber (const_int 0 [0]))) graph500.c:86 -1
     (nil))
(insn 1382 1379 1383 97 (set (mem/f/c:DI (plus:DI (reg/f:DI 1203)
                (const_int 88 [0x58])) [2 IJ+0 S8 A64])
        (reg/f:DI 289 [ D.3806 ])) graph500.c:86 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 289 [ D.3806 ])
        (nil)))
(insn 1383 1382 1384 97 (set (reg/f:DI 1859)
        (high:DI (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))) timer.c:43 48 {*movdi_aarch64}
     (nil))
(insn 1384 1383 1385 97 (set (reg/f:DI 1211)
        (lo_sum:DI (reg/f:DI 1859)
            (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))) timer.c:43 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
        (nil)))
(insn 1385 1384 1386 97 (set (reg:DI 1 x1)
        (reg/f:DI 1211)) timer.c:43 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1211)
        (expr_list:REG_EQUAL (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
            (nil))))
(insn 1386 1385 1387 97 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) timer.c:43 47 {*movsi_aarch64}
     (nil))
(call_insn 1387 1386 1389 97 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>) [0 clock_gettime S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) timer.c:43 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_UNUSED (reg:SI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 1389 1387 1396 97 (set (reg/f:DI 1213)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) graph500.c:87 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 1396 1389 1401 97 (set (reg:DI 1221 [ SCALE ])
        (mem/c:DI (lo_sum:DI (reg/f:DI 1854)
                (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])) [4 SCALE+0 S8 A64])) graph500.c:87 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/c:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]) [4 SCALE+0 S8 A64])
        (nil)))
(insn 1401 1396 1402 97 (set (reg:DF 34 v2)
        (mem/c:DF (plus:DI (reg/f:DI 1213)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) graph500.c:87 54 {*movdf_aarch64}
     (nil))
(insn 1402 1401 1403 97 (set (reg:DF 33 v1)
        (mem/c:DF (plus:DI (reg/f:DI 1213)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) graph500.c:87 54 {*movdf_aarch64}
     (nil))
(insn 1403 1402 1404 97 (set (reg:DF 32 v0)
        (mem/c:DF (plus:DI (reg/f:DI 1213)
                (const_int 16 [0x10])) [1 A+0 S8 A64])) graph500.c:87 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1213)
        (nil)))
(insn 1404 1403 1405 97 (set (reg:SI 2 x2)
        (subreg:SI (reg:DI 1221 [ SCALE ]) 0)) graph500.c:87 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1221 [ SCALE ])
        (nil)))
(insn 1405 1404 1406 97 (set (reg:DI 1 x1)
        (mem/c:DI (plus:DI (reg/f:DI 1203)
                (const_int 80 [0x50])) [4 nedge+0 S8 A64])) graph500.c:87 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                    (const_int 80 [0x50]))) [4 nedge+0 S8 A64])
        (nil)))
(insn 1406 1405 1407 97 (set (reg:DI 0 x0)
        (mem/f/c:DI (plus:DI (reg/f:DI 1203)
                (const_int 88 [0x58])) [2 IJ+0 S8 A64])) graph500.c:87 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                    (const_int 88 [0x58]))) [2 IJ+0 S8 A64])
        (nil)))
(call_insn 1407 1406 1408 97 (parallel [
            (call (mem:DI (symbol_ref:DI ("rmat_edgelist") [flags 0x43]  <function_decl 0x7f3c5e24c400 rmat_edgelist>) [0 rmat_edgelist S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:87 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DF 34 v2)
        (expr_list:REG_DEAD (reg:DF 33 v1)
            (expr_list:REG_DEAD (reg:DF 32 v0)
                (expr_list:REG_DEAD (reg:SI 2 x2)
                    (expr_list:REG_DEAD (reg:DI 1 x1)
                        (expr_list:REG_DEAD (reg:DI 0 x0)
                            (expr_list:REG_CALL_DECL (symbol_ref:DI ("rmat_edgelist") [flags 0x43]  <function_decl 0x7f3c5e24c400 rmat_edgelist>)
                                (expr_list:REG_EH_REGION (const_int 0 [0])
                                    (nil)))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DF (use (reg:DF 32 v0))
                            (expr_list:DF (use (reg:DF 33 v1))
                                (expr_list:DF (use (reg:DF 34 v2))
                                    (nil))))))))))
(call_insn 1408 1407 1409 97 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("toc") [flags 0x43]  <function_decl 0x7f3c5e239700 toc>) [0 toc S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:87 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("toc") [flags 0x43]  <function_decl 0x7f3c5e239700 toc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 1409 1408 1412 97 (set (reg:DF 259 [ D.3804 ])
        (reg:DF 32 v0)) graph500.c:87 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 1412 1409 1415 97 (set (mem/c:DF (plus:DI (reg/f:DI 1203)
                (const_int 96 [0x60])) [1 generation_time+0 S8 A64])
        (reg:DF 259 [ D.3804 ])) graph500.c:87 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1203)
        (expr_list:REG_DEAD (reg:DF 259 [ D.3804 ])
            (nil))))
;;  succ:       144 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

;; basic block 98, loop depth 0, count 0, freq 5
;;  prev block 97, next block 99, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       96 [50.0%] 
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u1194(29){ }u1195(31){ }u1196(64){ }u1197(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 261 262 290 430 431 432 433 434 435 438 441 444 447 576 1228 1232 1235 1236 1237 1238 1239 1242 1245 1248 1249 1251 1253 1256 1859 1863 1903 1904 1905 1906 1907
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 1203 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 261 262 290 430 431 432 433 434 435 438 441 444 447 576 1228 1232 1235 1236 1237 1238 1239 1242 1245 1248 1249 1251 1253 1256 1859 1863 1903 1904 1905 1906 1907
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 1415 1412 1416 98 67 "" [1 uses])
(note 1416 1415 1417 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 1417 1416 1418 98 (set (reg/f:DI 1859)
        (high:DI (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))) timer.c:43 48 {*movdi_aarch64}
     (nil))
(insn 1418 1417 1419 98 (set (reg/f:DI 1228)
        (lo_sum:DI (reg/f:DI 1859)
            (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))) timer.c:43 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
        (nil)))
(insn 1419 1418 1420 98 (set (reg:DI 1 x1)
        (reg/f:DI 1228)) timer.c:43 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1228)
        (expr_list:REG_EQUAL (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
            (nil))))
(insn 1420 1419 1421 98 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) timer.c:43 47 {*movsi_aarch64}
     (nil))
(call_insn 1421 1420 1424 98 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>) [0 clock_gettime S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) timer.c:43 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_UNUSED (reg:SI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 1424 1421 4075 98 (set (reg:DI 1232 [ SCALE ])
        (mem/c:DI (lo_sum:DI (reg/f:DI 1854)
                (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])) [4 SCALE+0 S8 A64])) graph500.c:89 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/c:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]) [4 SCALE+0 S8 A64])
        (nil)))
(debug_insn 4075 1424 1425 98 (var_location:SI D#53 (subreg:SI (reg:DI 1232 [ SCALE ]) 0)) -1
     (nil))
(insn 1425 4075 1428 98 (set (reg:SI 261 [ D.3797 ])
        (subreg:SI (reg:DI 1232 [ SCALE ]) 0)) graph500.c:89 47 {*movsi_aarch64}
     (nil))
(insn 1428 1425 1429 98 (set (reg:DI 262 [ D.3802 ])
        (mem/c:DI (plus:DI (reg/f:DI 1203)
                (const_int 32 [0x20])) [4 userseed+0 S8 A64])) graph500.c:89 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                    (const_int 32 [0x20]))) [4 userseed+0 S8 A64])
        (nil)))
(debug_insn 1429 1428 1430 98 (var_location:SI log_numverts (debug_expr:SI D#53)) graph500.c:89 -1
     (nil))
(debug_insn 1430 1429 1431 98 (var_location:DI M (reg/v:DI 245 [ desired_nedge ])) graph500.c:89 -1
     (nil))
(debug_insn 1431 1430 1432 98 (var_location:DI userseed1 (reg:DI 262 [ D.3802 ])) graph500.c:89 -1
     (nil))
(debug_insn 1432 1431 1433 98 (var_location:DI userseed2 (reg:DI 262 [ D.3802 ])) graph500.c:89 -1
     (nil))
(debug_insn 1433 1432 1434 98 (var_location:DI result_ptr_in (symbol_ref:DI ("IJ") [flags 0x82]  <var_decl 0x7f3c5e2541b0 IJ>)) -1
     (nil))
(debug_insn 1434 1433 1435 98 (var_location:DI nedges_ptr_in (symbol_ref:DI ("nedge") [flags 0x82]  <var_decl 0x7f3c5e254120 nedge>)) -1
     (nil))
(debug_insn 1435 1434 1436 98 (var_location:DI nedges_ptr (symbol_ref:DI ("nedge") [flags 0x82]  <var_decl 0x7f3c5e254120 nedge>)) generator/make_graph.c:44 -1
     (nil))
(debug_insn 1436 1435 1437 98 (var_location:DI result_ptr (symbol_ref:DI ("IJ") [flags 0x82]  <var_decl 0x7f3c5e2541b0 IJ>)) generator/make_graph.c:45 -1
     (nil))
(debug_insn 1437 1436 1438 98 (var_location:DI userseed1 (reg:DI 262 [ D.3802 ])) generator/make_graph.c:45 -1
     (nil))
(debug_insn 1438 1437 1439 98 (var_location:DI userseed2 (reg:DI 262 [ D.3802 ])) generator/make_graph.c:45 -1
     (nil))
(debug_insn 1439 1438 1440 98 (var_location:DI seed (debug_implicit_ptr:DI seed)) generator/make_graph.c:45 -1
     (nil))
(insn 1440 1439 1441 98 (set (reg:DI 1235 [ D.3802 ])
        (and:DI (reg:DI 262 [ D.3802 ])
            (const_int 1073741823 [0x3fffffff]))) generator/utils.c:52 468 {anddi3}
     (nil))
(insn 1441 1440 1442 98 (set (reg:DI 438 [ state$z1 ])
        (plus:DI (reg:DI 1235 [ D.3802 ])
            (const_int 1 [0x1]))) generator/utils.c:52 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1235 [ D.3802 ])
        (nil)))
(insn 1442 1441 1443 98 (set (reg:DI 1236 [ D.3802 ])
        (lshiftrt:DI (reg:DI 262 [ D.3802 ])
            (const_int 30 [0x1e]))) generator/utils.c:53 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 1443 1442 1444 98 (set (reg:DI 1237 [ D.3802 ])
        (and:DI (reg:DI 1236 [ D.3802 ])
            (const_int 1073741823 [0x3fffffff]))) generator/utils.c:53 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1236 [ D.3802 ])
        (nil)))
(insn 1444 1443 1445 98 (set (reg:DI 441 [ state$z2 ])
        (plus:DI (reg:DI 1237 [ D.3802 ])
            (const_int 1 [0x1]))) generator/utils.c:53 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1237 [ D.3802 ])
        (nil)))
(insn 1445 1444 1446 98 (set (reg:DI 444 [ D.3802 ])
        (lshiftrt:DI (reg:DI 262 [ D.3802 ])
            (const_int 60 [0x3c]))) generator/utils.c:56 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 262 [ D.3802 ])
        (nil)))
(insn 1446 1445 1447 98 (set (reg:DI 1238 [ D.3802 ])
        (ashift:DI (reg:DI 444 [ D.3802 ])
            (const_int 4 [0x4]))) generator/utils.c:56 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1447 1446 1448 98 (set (reg:DI 1239 [ D.3802 ])
        (plus:DI (reg:DI 444 [ D.3802 ])
            (const_int 1 [0x1]))) generator/utils.c:56 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 444 [ D.3802 ])
        (nil)))
(insn 1448 1447 1449 98 (set (reg:DI 447 [ state$z5 ])
        (plus:DI (reg:DI 1238 [ D.3802 ])
            (reg:DI 1239 [ D.3802 ]))) generator/utils.c:56 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1239 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 1238 [ D.3802 ])
            (nil))))
(debug_insn 1449 1448 1450 98 (var_location:DI userseed1 (clobber (const_int 0 [0]))) generator/make_graph.c:50 -1
     (nil))
(debug_insn 1450 1449 1451 98 (var_location:DI userseed2 (clobber (const_int 0 [0]))) generator/make_graph.c:50 -1
     (nil))
(debug_insn 1451 1450 1454 98 (var_location:DI seed (clobber (const_int 0 [0]))) generator/make_graph.c:50 -1
     (nil))
(insn 1454 1451 1455 98 (set (mem/c:DI (plus:DI (reg/f:DI 1203)
                (const_int 80 [0x50])) [4 nedge+0 S8 A64])
        (reg/v:DI 245 [ desired_nedge ])) generator/make_graph.c:52 48 {*movdi_aarch64}
     (nil))
(insn 1455 1454 1456 98 (set (reg:DI 1242 [ D.3802 ])
        (ashift:DI (reg/v:DI 245 [ desired_nedge ])
            (const_int 4 [0x4]))) generator/make_graph.c:53 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1456 1455 1457 98 (set (reg:DI 0 x0)
        (reg:DI 1242 [ D.3802 ])) generator/make_graph.c:53 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1242 [ D.3802 ])
        (nil)))
(call_insn 1457 1456 4080 98 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("xmalloc") [flags 0x43]  <function_decl 0x7f3c5e239600 xmalloc>) [0 xmalloc S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/make_graph.c:53 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("xmalloc") [flags 0x43]  <function_decl 0x7f3c5e239600 xmalloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 4080 1457 1458 98 (var_location:DI D#57 (reg:DI 0 x0)) -1
     (nil))
(insn 1458 4080 1459 98 (set (reg/v/f:DI 430 [ edges ])
        (reg:DI 0 x0)) generator/make_graph.c:53 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(debug_insn 1459 1458 1462 98 (var_location:DI edges (debug_expr:DI D#57)) generator/make_graph.c:53 -1
     (nil))
(insn 1462 1459 1463 98 (set (mem/f/c:DI (plus:DI (reg/f:DI 1203)
                (const_int 88 [0x58])) [2 IJ+0 S8 A64])
        (reg/v/f:DI 430 [ edges ])) generator/make_graph.c:54 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1203)
        (nil)))
(debug_insn 1463 1462 1464 98 (var_location:DI seed (debug_implicit_ptr:DI seed)) generator/make_graph.c:54 -1
     (nil))
(debug_insn 1464 1463 1465 98 (var_location:SI logN (debug_expr:SI D#53)) generator/make_graph.c:54 -1
     (nil))
(debug_insn 1465 1464 1466 98 (var_location:DI end_edge (reg/v:DI 245 [ desired_nedge ])) generator/make_graph.c:54 -1
     (nil))
(debug_insn 1466 1465 1467 98 (var_location:DI edges (debug_expr:DI D#57)) generator/make_graph.c:54 -1
     (nil))
(debug_insn 1467 1466 1468 98 (var_location:DI start_edge (const_int 0 [0])) -1
     (nil))
(insn 1468 1467 1469 98 (set (reg:DI 1245)
        (const_int 1 [0x1])) generator/graph_generator.c:169 48 {*movdi_aarch64}
     (nil))
(insn 1469 1468 1470 98 (set (reg/v:DI 290 [ nverts ])
        (ashift:DI (reg:DI 1245)
            (subreg:QI (reg:DI 1232 [ SCALE ]) 0))) generator/graph_generator.c:169 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1245)
        (expr_list:REG_DEAD (reg:DI 1232 [ SCALE ])
            (expr_list:REG_EQUAL (ashift:DI (const_int 1 [0x1])
                    (subreg:QI (reg:DI 1232 [ SCALE ]) 0))
                (nil)))))
(debug_insn 1470 1469 1473 98 (var_location:DI nverts (reg/v:DI 290 [ nverts ])) generator/graph_generator.c:169 -1
     (nil))
(debug_insn 1473 1470 1474 98 (var_location:DI state$z1 (reg:DI 438 [ state$z1 ])) generator/splittable_mrg.c:280 -1
     (nil))
(debug_insn 1474 1473 1475 98 (var_location:DI state$z2 (reg:DI 441 [ state$z2 ])) generator/splittable_mrg.c:281 -1
     (nil))
(debug_insn 1475 1474 1476 98 (var_location:DI state$z3 (reg:DI 438 [ state$z1 ])) generator/splittable_mrg.c:282 -1
     (nil))
(debug_insn 1476 1475 1477 98 (var_location:DI state$z4 (reg:DI 441 [ state$z2 ])) generator/splittable_mrg.c:283 -1
     (nil))
(debug_insn 1477 1476 1478 98 (var_location:DI state$z5 (reg:DI 447 [ state$z5 ])) generator/splittable_mrg.c:284 -1
     (nil))
(debug_insn 1478 1477 1479 98 (var_location:DI st (clobber (const_int 0 [0]))) generator/graph_generator.c:172 -1
     (nil))
(debug_insn 1479 1478 1480 98 (var_location:DI seed (clobber (const_int 0 [0]))) generator/graph_generator.c:172 -1
     (nil))
(insn 1480 1479 1481 98 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [5 MEM[(struct mrg_state *)&new_state]+0 S8 A64])
        (reg:DI 438 [ state$z1 ])) generator/graph_generator.c:176 48 {*movdi_aarch64}
     (nil))
(insn 1481 1480 1482 98 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [5 MEM[(struct mrg_state *)&new_state + 8B]+0 S8 A64])
        (reg:DI 441 [ state$z2 ])) generator/graph_generator.c:176 48 {*movdi_aarch64}
     (nil))
(insn 1482 1481 1483 98 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -24 [0xffffffffffffffe8])) [5 MEM[(struct mrg_state *)&new_state + 16B]+0 S8 A64])
        (reg:DI 438 [ state$z1 ])) generator/graph_generator.c:176 48 {*movdi_aarch64}
     (nil))
(insn 1483 1482 1484 98 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -16 [0xfffffffffffffff0])) [5 MEM[(struct mrg_state *)&new_state + 24B]+0 S8 A64])
        (reg:DI 441 [ state$z2 ])) generator/graph_generator.c:176 48 {*movdi_aarch64}
     (nil))
(insn 1484 1483 1485 98 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -8 [0xfffffffffffffff8])) [5 MEM[(struct mrg_state *)&new_state + 32B]+0 S8 A64])
        (reg:DI 447 [ state$z5 ])) generator/graph_generator.c:176 48 {*movdi_aarch64}
     (nil))
(insn 1485 1484 1486 98 (set (reg/f:DI 1863)
        (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:177 95 {*adddi3_aarch64}
     (nil))
(insn 1486 1485 1487 98 (set (reg:DI 2 x2)
        (const_int 7 [0x7])) generator/graph_generator.c:177 48 {*movdi_aarch64}
     (nil))
(insn 1487 1486 1488 98 (set (reg:DI 1 x1)
        (const_int 50 [0x32])) generator/graph_generator.c:177 48 {*movdi_aarch64}
     (nil))
(insn 1488 1487 1489 98 (set (reg:DI 0 x0)
        (reg/f:DI 1863)) generator/graph_generator.c:177 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))
        (nil)))
(call_insn 1489 1488 1490 98 (parallel [
            (call (mem:DI (symbol_ref:DI ("mrg_skip.constprop.2") [flags 0x43]  <function_decl 0x7f3c5e23c600 mrg_skip.constprop>) [0 mrg_skip.constprop S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/graph_generator.c:177 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_DEAD (reg:DI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("mrg_skip.constprop.2") [flags 0x43]  <function_decl 0x7f3c5e23c600 mrg_skip.constprop>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 1490 1489 1492 98 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:177 -1
     (nil))
(insn 1492 1490 1493 98 (set (reg:DI 0 x0)
        (reg/f:DI 1863)) generator/splittable_mrg.c:268 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))
        (nil)))
(call_insn 1493 1492 1494 98 (parallel [
            (call (mem:DI (symbol_ref:DI ("mrg_orig_step.lto_priv.12") [flags 0x43]  <function_decl 0x7f3c5e239b00 mrg_orig_step>) [0 mrg_orig_step S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/splittable_mrg.c:268 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("mrg_orig_step.lto_priv.12") [flags 0x43]  <function_decl 0x7f3c5e239b00 mrg_orig_step>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 1494 1493 1495 98 (var_location:DI state (clobber (const_int 0 [0]))) generator/graph_generator.c:178 -1
     (nil))
(debug_insn 1495 1494 1496 98 (var_location:DI val0 (clobber (const_int 0 [0]))) generator/graph_generator.c:178 -1
     (nil))
(insn 1496 1495 1497 98 (set (reg:DI 1248 [ new_state.z1 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])) generator/graph_generator.c:179 48 {*movdi_aarch64}
     (nil))
(insn 1497 1496 1498 98 (set (reg:DI 1249)
        (const_int 4294967295 [0xffffffff])) generator/graph_generator.c:179 48 {*movdi_aarch64}
     (nil))
(insn 1498 1497 1499 98 (set (reg/v:DI 431 [ val0 ])
        (mult:DI (reg:DI 1248 [ new_state.z1 ])
            (reg:DI 1249))) generator/graph_generator.c:179 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1248 [ new_state.z1 ])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1248 [ new_state.z1 ])
                (const_int 4294967295 [0xffffffff]))
            (nil))))
(debug_insn 1499 1498 1500 98 (var_location:DI val0 (reg/v:DI 431 [ val0 ])) generator/graph_generator.c:179 -1
     (nil))
(debug_insn 1500 1499 1502 98 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:179 -1
     (nil))
(insn 1502 1500 1503 98 (set (reg:DI 0 x0)
        (reg/f:DI 1863)) generator/splittable_mrg.c:268 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))
        (nil)))
(call_insn 1503 1502 1504 98 (parallel [
            (call (mem:DI (symbol_ref:DI ("mrg_orig_step.lto_priv.12") [flags 0x43]  <function_decl 0x7f3c5e239b00 mrg_orig_step>) [0 mrg_orig_step S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/splittable_mrg.c:268 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("mrg_orig_step.lto_priv.12") [flags 0x43]  <function_decl 0x7f3c5e239b00 mrg_orig_step>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 1504 1503 1505 98 (var_location:DI state (clobber (const_int 0 [0]))) generator/graph_generator.c:180 -1
     (nil))
(insn 1505 1504 4076 98 (set (reg:DI 1251 [ new_state.z1 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])) generator/graph_generator.c:180 48 {*movdi_aarch64}
     (nil))
(debug_insn 4076 1505 1506 98 (var_location:DI D#54 (plus:DI (reg/v:DI 431 [ val0 ])
        (reg:DI 1251 [ new_state.z1 ]))) -1
     (nil))
(insn 1506 4076 1507 98 (set (reg/v:DI 432 [ val0 ])
        (plus:DI (reg/v:DI 431 [ val0 ])
            (reg:DI 1251 [ new_state.z1 ]))) generator/graph_generator.c:180 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1251 [ new_state.z1 ])
        (expr_list:REG_DEAD (reg/v:DI 431 [ val0 ])
            (nil))))
(debug_insn 1507 1506 1508 98 (var_location:DI val0 (debug_expr:DI D#54)) generator/graph_generator.c:180 -1
     (nil))
(debug_insn 1508 1507 1510 98 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:180 -1
     (nil))
(insn 1510 1508 1511 98 (set (reg:DI 0 x0)
        (reg/f:DI 1863)) generator/splittable_mrg.c:268 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))
        (nil)))
(call_insn 1511 1510 1512 98 (parallel [
            (call (mem:DI (symbol_ref:DI ("mrg_orig_step.lto_priv.12") [flags 0x43]  <function_decl 0x7f3c5e239b00 mrg_orig_step>) [0 mrg_orig_step S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/splittable_mrg.c:268 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("mrg_orig_step.lto_priv.12") [flags 0x43]  <function_decl 0x7f3c5e239b00 mrg_orig_step>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 1512 1511 1513 98 (var_location:DI state (clobber (const_int 0 [0]))) generator/graph_generator.c:181 -1
     (nil))
(debug_insn 1513 1512 1514 98 (var_location:DI val1 (clobber (const_int 0 [0]))) generator/graph_generator.c:181 -1
     (nil))
(insn 1514 1513 1516 98 (set (reg:DI 1253 [ new_state.z1 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])) generator/graph_generator.c:182 48 {*movdi_aarch64}
     (nil))
(insn 1516 1514 1517 98 (set (reg/v:DI 433 [ val1 ])
        (mult:DI (reg:DI 1253 [ new_state.z1 ])
            (reg:DI 1249))) generator/graph_generator.c:182 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1253 [ new_state.z1 ])
        (expr_list:REG_DEAD (reg:DI 1249)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 1253 [ new_state.z1 ])
                    (const_int 4294967295 [0xffffffff]))
                (nil)))))
(debug_insn 1517 1516 1518 98 (var_location:DI val1 (reg/v:DI 433 [ val1 ])) generator/graph_generator.c:182 -1
     (nil))
(debug_insn 1518 1517 1520 98 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:182 -1
     (nil))
(insn 1520 1518 1521 98 (set (reg:DI 0 x0)
        (reg/f:DI 1863)) generator/splittable_mrg.c:268 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))
        (nil)))
(call_insn 1521 1520 1522 98 (parallel [
            (call (mem:DI (symbol_ref:DI ("mrg_orig_step.lto_priv.12") [flags 0x43]  <function_decl 0x7f3c5e239b00 mrg_orig_step>) [0 mrg_orig_step S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/splittable_mrg.c:268 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("mrg_orig_step.lto_priv.12") [flags 0x43]  <function_decl 0x7f3c5e239b00 mrg_orig_step>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 1522 1521 1523 98 (var_location:DI state (clobber (const_int 0 [0]))) generator/graph_generator.c:183 -1
     (nil))
(insn 1523 1522 4077 98 (set (reg:DI 1256 [ new_state.z1 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])) generator/graph_generator.c:183 48 {*movdi_aarch64}
     (nil))
(debug_insn 4077 1523 1524 98 (var_location:DI D#55 (plus:DI (reg/v:DI 433 [ val1 ])
        (reg:DI 1256 [ new_state.z1 ]))) -1
     (nil))
(insn 1524 4077 1525 98 (set (reg/v:DI 434 [ val1 ])
        (plus:DI (reg/v:DI 433 [ val1 ])
            (reg:DI 1256 [ new_state.z1 ]))) generator/graph_generator.c:183 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1256 [ new_state.z1 ])
        (expr_list:REG_DEAD (reg/v:DI 433 [ val1 ])
            (nil))))
(debug_insn 1525 1524 1526 98 (var_location:DI val1 (debug_expr:DI D#55)) generator/graph_generator.c:183 -1
     (nil))
(debug_insn 1526 1525 1527 98 (var_location:DI ei (const_int 0 [0])) generator/graph_generator.c:193 -1
     (nil))
(insn 1527 1526 215 98 (set (reg:DI 576 [ ivtmp.134 ])
        (reg/v/f:DI 430 [ edges ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v/f:DI 430 [ edges ])
        (nil)))
(insn 215 1527 1643 98 (set (reg/v:DI 435 [ start_edge ])
        (const_int 0 [0])) generator/graph_generator.c:193 48 {*movdi_aarch64}
     (nil))
(insn 1643 215 1969 98 (set (reg:DI 1903)
        (const_int 107374182 [0x6666666])) generator/mod_arith_64bit.h:29 48 {*movdi_aarch64}
     (nil))
(insn 1969 1643 1970 98 (set (reg:DI 1904)
        (const_int 4979156007449604625 [0x4519840211493211])) generator/graph_generator.c:123 48 {*movdi_aarch64}
     (nil))
(insn 1970 1969 2011 98 (set (reg:DI 1905 [ D.3802 ])
        (ior:DI (reg/v:DI 432 [ val0 ])
            (reg:DI 1904))) generator/graph_generator.c:123 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 1353)
        (nil)))
(insn 2011 1970 2012 98 (set (reg:DI 1906)
        (const_int 3481428888784487333 [0x3050852102c843a5])) generator/graph_generator.c:126 48 {*movdi_aarch64}
     (nil))
(insn 2012 2011 2167 98 (set (reg:DI 1907 [ D.3802 ])
        (ior:DI (reg/v:DI 434 [ val1 ])
            (reg:DI 1906))) generator/graph_generator.c:126 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 1364)
        (nil)))
;;  succ:       142 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 99, loop depth 0, count 0, freq 214, maybe hot
;; Invalid sum of incoming frequencies 19, should be 214
;;  prev block 98, next block 101, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       142 [91.0%] 
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u1313(29){ }u1314(31){ }u1315(64){ }u1316(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 435 438 441 447
;; lr  def 	 66 [cc] 266 460
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 266 460
;; live  kill	
(code_label 2167 2012 1530 99 94 "" [1 uses])
(note 1530 2167 1531 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 1531 1530 1532 99 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [5 MEM[(struct mrg_state *)&new_state]+0 S8 A64])
        (reg:DI 438 [ state$z1 ])) generator/graph_generator.c:194 48 {*movdi_aarch64}
     (nil))
(insn 1532 1531 1533 99 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [5 MEM[(struct mrg_state *)&new_state + 8B]+0 S8 A64])
        (reg:DI 441 [ state$z2 ])) generator/graph_generator.c:194 48 {*movdi_aarch64}
     (nil))
(insn 1533 1532 1534 99 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -24 [0xffffffffffffffe8])) [5 MEM[(struct mrg_state *)&new_state + 16B]+0 S8 A64])
        (reg:DI 438 [ state$z1 ])) generator/graph_generator.c:194 48 {*movdi_aarch64}
     (nil))
(insn 1534 1533 1535 99 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -16 [0xfffffffffffffff0])) [5 MEM[(struct mrg_state *)&new_state + 24B]+0 S8 A64])
        (reg:DI 441 [ state$z2 ])) generator/graph_generator.c:194 48 {*movdi_aarch64}
     (nil))
(insn 1535 1534 4079 99 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -8 [0xfffffffffffffff8])) [5 MEM[(struct mrg_state *)&new_state + 32B]+0 S8 A64])
        (reg:DI 447 [ state$z5 ])) generator/graph_generator.c:194 48 {*movdi_aarch64}
     (nil))
(debug_insn 4079 1535 1536 99 (var_location:DI D#56 (reg/v:DI 435 [ start_edge ])) -1
     (nil))
(insn 1536 4079 1537 99 (set (reg/v:DI 266 [ exponent_middle ])
        (reg/v:DI 435 [ start_edge ])) generator/graph_generator.c:195 48 {*movdi_aarch64}
     (nil))
(debug_insn 1537 1536 1538 99 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1538 1537 1542 99 (var_location:DI exponent_high (const_int 0 [0])) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1542 1538 1543 99 (var_location:DI exponent_low (const_int 0 [0])) -1
     (nil))
(debug_insn 1543 1542 1544 99 (var_location:SI byte_index (const_int 8 [0x8])) -1
     (nil))
(debug_insn 1544 1543 195 99 (var_location:DI exponent_middle (debug_expr:DI D#56)) -1
     (nil))
(insn 195 1544 1545 99 (set (reg/v:SI 460 [ byte_index ])
        (const_int 8 [0x8])) generator/splittable_mrg.c:193 47 {*movsi_aarch64}
     (nil))
(insn 1545 195 1546 99 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 435 [ start_edge ])
            (const_int 0 [0]))) generator/splittable_mrg.c:193 391 {*cmpdi}
     (nil))
(jump_insn 1546 1545 1623 99 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 1620)
            (pc))) generator/splittable_mrg.c:193 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 1620)
;;  succ:       103 [91.0%] 
;;              101 [9.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 101, loop depth 0, count 0, freq 214, maybe hot
;; Invalid sum of incoming frequencies 36, should be 214
;;  prev block 99, next block 102, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       99 [9.0%]  (FALLTHRU)
;;              107 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u1332(29){ }u1333(31){ }u1334(64){ }u1335(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 290
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 1623 1546 1547 101 75 "" [0 uses])
(note 1547 1623 1550 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1550 1547 1551 101 (var_location:DI state (clobber (const_int 0 [0]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1551 1550 1552 101 (var_location:DI exponent_high (clobber (const_int 0 [0]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1552 1551 1553 101 (var_location:DI exponent_middle (clobber (const_int 0 [0]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1553 1552 1554 101 (var_location:SI byte_index (clobber (const_int 0 [0]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1554 1553 1555 101 (var_location:QI val (clobber (const_int 0 [0]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1555 1554 1556 101 (var_location:QI val (clobber (const_int 0 [0]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1556 1555 1557 101 (var_location:QI val (clobber (const_int 0 [0]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1557 1556 1558 101 (var_location:DI exponent_low (clobber (const_int 0 [0]))) generator/graph_generator.c:195 -1
     (nil))
(debug_insn 1558 1557 1559 101 (var_location:DI D#37 (ashift:DI (debug_expr:DI D#56)
        (const_int 4 [0x4]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 1559 1558 1560 101 (var_location:DI D#36 (plus:DI (debug_expr:DI D#57)
        (debug_expr:DI D#37))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 1560 1559 1562 101 (var_location:SI D#1 (const_int 0 [0])) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 1562 1560 1563 101 (var_location:SI lgN (debug_expr:SI D#53)) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 1563 1562 1564 101 (var_location:DI st (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 1564 1563 1565 101 (var_location:DI result (debug_expr:DI D#36)) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 1565 1564 1566 101 (var_location:DI val0 (debug_expr:DI D#54)) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 1566 1565 1567 101 (var_location:DI val1 (debug_expr:DI D#55)) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 1567 1566 1568 101 (var_location:DI base_tgt (const_int 0 [0])) -1
     (nil))
(debug_insn 1568 1567 1569 101 (var_location:DI base_src (const_int 0 [0])) -1
     (nil))
(debug_insn 1569 1568 1570 101 (var_location:SI level (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 1570 1569 1571 101 (var_location:DI nverts (reg/v:DI 290 [ nverts ])) -1
     (nil))
(insn 1571 1570 1572 101 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 290 [ nverts ])
            (const_int 1 [0x1]))) generator/graph_generator.c:136 391 {*cmpdi}
     (nil))
(jump_insn 1572 1571 1575 101 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1627)
            (pc))) generator/graph_generator.c:136 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9550 (nil)))
 -> 1627)
;;  succ:       109 [95.5%] 
;;              102 [4.5%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 102, loop depth 0, count 0, freq 10
;;  prev block 101, next block 103, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       101 [4.5%]  (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u1340(29){ }u1341(31){ }u1342(64){ }u1343(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 443 747
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 443 747
;; live  kill	
(note 1575 1572 213 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 213 1575 4074 102 (set (reg/v:DI 443 [ base_tgt ])
        (const_int 0 [0])) generator/graph_generator.c:135 48 {*movdi_aarch64}
     (nil))
(debug_insn 4074 213 214 102 (var_location:DI D#52 (const_int 0 [0])) -1
     (nil))
(insn 214 4074 1620 102 (set (reg/v:DI 747 [ base_src ])
        (const_int 0 [0])) generator/graph_generator.c:135 48 {*movdi_aarch64}
     (nil))
;;  succ:       135 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 103, loop depth 0, count 0, freq 195, maybe hot
;;  prev block 102, next block 104, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       99 [91.0%] 
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u1348(29){ }u1349(31){ }u1350(64){ }u1351(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1901 1902
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 1901 1902
;; live  kill	
(code_label 1620 214 1578 103 74 "" [1 uses])
(note 1578 1620 1605 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 1605 1578 1606 103 (set (reg/f:DI 1901)
        (high:DI (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))) generator/splittable_mrg.c:195 48 {*movdi_aarch64}
     (nil))
(insn 1606 1605 4334 103 (set (reg/f:DI 1902)
        (lo_sum:DI (reg/f:DI 1901)
            (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))) generator/splittable_mrg.c:195 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>)
        (expr_list:REG_DEAD (reg/f:DI 1272)
            (nil))))
;;  succ:       104 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907

;; basic block 104, loop depth 0, count 0, freq 194, maybe hot
;; Invalid sum of incoming frequencies 372, should be 194
;;  prev block 103, next block 106, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103 [100.0%]  (FALLTHRU)
;;              107 [91.0%]  (DFS_BACK)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 266
;; lr  def 	 66 [cc] 457
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  gen 	 66 [cc] 457
;; live  kill	
(code_label 4334 1606 4333 104 276 "" [1 uses])
(note 4333 4334 1579 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1579 4333 1580 104 (var_location:SI byte_index (reg/v:SI 460 [ byte_index ])) -1
     (nil))
(debug_insn 1580 1579 1581 104 (var_location:DI exponent_middle (debug_expr:DI D#56)) -1
     (nil))
(insn 1581 1580 1582 104 (set (reg/v:SI 457 [ val ])
        (zero_extend:SI (subreg:QI (reg/v:DI 266 [ exponent_middle ]) 0))) generator/splittable_mrg.c:194 88 {*zero_extendqisi2_aarch64}
     (nil))
(debug_insn 1582 1581 1583 104 (var_location:QI val (subreg:QI (reg/v:SI 457 [ val ]) 0)) generator/splittable_mrg.c:194 -1
     (nil))
(insn 1583 1582 1584 104 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 457 [ val ])
            (const_int 0 [0]))) generator/splittable_mrg.c:195 390 {*cmpsi}
     (nil))
(jump_insn 1584 1583 1585 104 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 1612)
            (pc))) generator/splittable_mrg.c:195 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 1612)
;;  succ:       106 [29.0%]  (FALLTHRU)
;;              107 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907

;; basic block 106, loop depth 0, count 0, freq 56, maybe hot
;;  prev block 104, next block 107, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       104 [29.0%]  (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u1357(29){ }u1358(31){ }u1359(64){ }u1360(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 457 460 1863 1902
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1259 1261 1262 1263 1264 1266 1267 1268 1269 1270
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 457 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1259 1261 1262 1263 1264 1266 1267 1268 1269 1270
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 1585 1584 3975 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3975 1585 1586 106 (var_location:QI D#50 (subreg:QI (reg/v:SI 457 [ val ]) 0)) generator/graph_generator.c:136 -1
     (nil))
(debug_insn 1586 3975 1587 106 (var_location:DI mat (plus:DI (plus:DI (mult:DI (zero_extend:DI (debug_expr:QI D#50))
                (const_int 72 [0x48]))
            (mult:DI (sign_extend:DI (reg/v:SI 460 [ byte_index ]))
                (const_int 18432 [0x4800])))
        (symbol_ref:DI ("mrg_skip_matrices") [flags 0xc2]  <var_decl 0x7f3c5e254870 mrg_skip_matrices>))) generator/splittable_mrg.c:195 -1
     (nil))
(debug_insn 1587 1586 1590 106 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/splittable_mrg.c:195 -1
     (nil))
(insn 1590 1587 1592 106 (set (reg:DI 1259 [ val ])
        (sign_extend:DI (reg/v:SI 457 [ val ]))) generator/splittable_mrg.c:195 80 {*extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 457 [ val ])
        (nil)))
(insn 1592 1590 1594 106 (set (reg:DI 1261)
        (ashift:DI (reg:DI 1259 [ val ])
            (const_int 3 [0x3]))) generator/splittable_mrg.c:195 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1594 1592 1595 106 (set (reg:DI 1262)
        (plus:DI (reg:DI 1261)
            (reg:DI 1259 [ val ]))) generator/splittable_mrg.c:195 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1261)
        (expr_list:REG_DEAD (reg:DI 1259 [ val ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 1259 [ val ])
                    (const_int 9 [0x9]))
                (nil)))))
(insn 1595 1594 1597 106 (set (reg:DI 1263)
        (ashift:DI (reg:DI 1262)
            (const_int 3 [0x3]))) generator/splittable_mrg.c:195 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1262)
        (nil)))
(insn 1597 1595 1599 106 (set (reg:DI 1264 [ byte_index ])
        (sign_extend:DI (reg/v:SI 460 [ byte_index ]))) generator/splittable_mrg.c:195 80 {*extendsidi2_aarch64}
     (nil))
(insn 1599 1597 1601 106 (set (reg:DI 1266)
        (ashift:DI (reg:DI 1264 [ byte_index ])
            (const_int 3 [0x3]))) generator/splittable_mrg.c:195 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1601 1599 1602 106 (set (reg:DI 1267)
        (plus:DI (reg:DI 1266)
            (reg:DI 1264 [ byte_index ]))) generator/splittable_mrg.c:195 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1266)
        (expr_list:REG_DEAD (reg:DI 1264 [ byte_index ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 1264 [ byte_index ])
                    (const_int 9 [0x9]))
                (nil)))))
(insn 1602 1601 1604 106 (set (reg:DI 1268)
        (ashift:DI (reg:DI 1267)
            (const_int 11 [0xb]))) generator/splittable_mrg.c:195 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1267)
        (nil)))
(insn 1604 1602 1607 106 (set (reg:DI 1269)
        (plus:DI (reg:DI 1263)
            (reg:DI 1268))) generator/splittable_mrg.c:195 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1268)
        (expr_list:REG_DEAD (reg:DI 1263)
            (nil))))
(insn 1607 1604 1608 106 (set (reg:DI 1270 [ D.3811 ])
        (plus:DI (reg:DI 1269)
            (reg/f:DI 1902))) generator/splittable_mrg.c:195 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1271)
        (expr_list:REG_DEAD (reg:DI 1269)
            (nil))))
(insn 1608 1607 1609 106 (set (reg:DI 2 x2)
        (reg/f:DI 1863)) generator/splittable_mrg.c:165 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))
        (nil)))
(insn 1609 1608 1610 106 (set (reg:DI 1 x1)
        (reg/f:DI 1863)) generator/splittable_mrg.c:165 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))
        (nil)))
(insn 1610 1609 1611 106 (set (reg:DI 0 x0)
        (reg:DI 1270 [ D.3811 ])) generator/splittable_mrg.c:165 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1270 [ D.3811 ])
        (nil)))
(call_insn 1611 1610 1612 106 (parallel [
            (call (mem:DI (symbol_ref:DI ("mrg_apply_transition.lto_priv.7") [flags 0x43]  <function_decl 0x7f3c5e24cf00 mrg_apply_transition>) [0 mrg_apply_transition S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/splittable_mrg.c:165 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_DEAD (reg:DI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("mrg_apply_transition.lto_priv.7") [flags 0x43]  <function_decl 0x7f3c5e24cf00 mrg_apply_transition>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
;;  succ:       107 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907

;; basic block 107, loop depth 0, count 0, freq 194, maybe hot
;;  prev block 106, next block 109, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       104 [71.0%] 
;;              106 [100.0%]  (FALLTHRU)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u1401(29){ }u1402(31){ }u1403(64){ }u1404(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 266 460
;; lr  def 	 66 [cc] 266 460
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  gen 	 66 [cc] 266 460
;; live  kill	
(code_label 1612 1611 1613 107 73 "" [1 uses])
(note 1613 1612 1614 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 1614 1613 1615 107 (set (reg/v:SI 460 [ byte_index ])
        (plus:SI (reg/v:SI 460 [ byte_index ])
            (const_int 1 [0x1]))) generator/splittable_mrg.c:193 94 {*addsi3_aarch64}
     (nil))
(debug_insn 1615 1614 4078 107 (var_location:SI byte_index (reg/v:SI 460 [ byte_index ])) generator/splittable_mrg.c:193 -1
     (nil))
(debug_insn 4078 1615 1616 107 (var_location:DI D#56 (lshiftrt:DI (reg/v:DI 266 [ exponent_middle ])
        (const_int 8 [0x8]))) -1
     (nil))
(insn 1616 4078 1618 107 (set (reg/v:DI 266 [ exponent_middle ])
        (lshiftrt:DI (reg/v:DI 266 [ exponent_middle ])
            (const_int 8 [0x8]))) generator/splittable_mrg.c:193 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(debug_insn 1618 1616 1619 107 (var_location:SI byte_index (reg/v:SI 460 [ byte_index ])) -1
     (nil))
(debug_insn 1619 1618 1621 107 (var_location:DI exponent_middle (debug_expr:DI D#56)) -1
     (nil))
(insn 1621 1619 1622 107 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 266 [ exponent_middle ])
            (const_int 0 [0]))) generator/splittable_mrg.c:193 391 {*cmpdi}
     (nil))
(jump_insn 1622 1621 1627 107 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4334)
            (pc))) generator/splittable_mrg.c:193 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 4334)
;;  succ:       104 [91.0%]  (DFS_BACK)
;;              101 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1710 1853 1854 1859 1862 1863 1902 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 266 290 432 434 435 438 441 447 460 576 1853 1854 1859 1862 1863 1902 1903 1905 1907

;; basic block 109, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 107, next block 110, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       101 [95.5%] 
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u1412(29){ }u1413(31){ }u1414(64){ }u1415(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 66 [cc] 750 1273
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 750 1273
;; live  kill	
(code_label 1627 1622 1628 109 71 "" [1 uses])
(note 1628 1627 1629 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1629 1628 1630 109 (var_location:SI D#9 (debug_expr:SI D#53)) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1630 1629 1631 109 (var_location:DI st (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1631 1630 1632 109 (var_location:SI level (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 1632 1631 1633 109 (var_location:SI nlevels (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 1633 1632 1634 109 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) -1
     (nil))
(debug_insn 1634 1633 1635 109 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) -1
     (nil))
(insn 1635 1634 1636 109 (set (reg:DI 750 [ D.3802 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])) generator/splittable_mrg.c:172 48 {*movdi_aarch64}
     (nil))
(debug_insn 1636 1635 1637 109 (var_location:DI a (reg:DI 750 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1637 1636 1638 109 (var_location:DI a (reg:DI 750 [ D.3802 ])) -1
     (nil))
(debug_insn 1638 1637 1639 109 (var_location:DI b (const_int 107374182 [0x6666666])) -1
     (nil))
(insn 1639 1638 1640 109 (set (reg:DI 1273)
        (const_int 2147483646 [0x7ffffffe])) generator/mod_arith_64bit.h:27 48 {*movdi_aarch64}
     (nil))
(insn 1640 1639 1641 109 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 750 [ D.3802 ])
            (reg:DI 1273))) generator/mod_arith_64bit.h:27 391 {*cmpdi}
     (expr_list:REG_EQUAL (compare:CC (reg:DI 750 [ D.3802 ])
            (const_int 2147483646 [0x7ffffffe]))
        (nil)))
(jump_insn 1641 1640 1642 109 (set (pc)
        (if_then_else (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1671)
            (pc))) generator/mod_arith_64bit.h:27 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 1671)
;;  succ:       111 [0.0%]  (LOOP_EXIT)
;;              110 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 110, loop depth 0, count 0, freq 204, maybe hot
;;  prev block 109, next block 111, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       109 [100.0%]  (FALLTHRU)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u1425(29){ }u1426(31){ }u1427(64){ }u1428(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 750 1273 1903
;; lr  def 	 66 [cc] 468 751 1274 1276 1277 1278 1279 1280 1282 1283
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 750 1273 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 468 751 1274 1276 1277 1278 1279 1280 1282 1283
;; live  kill	
(note 1642 1641 1644 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn 1644 1642 1645 110 (set (reg:DI 1274 [ D.3802 ])
        (mult:DI (reg:DI 750 [ D.3802 ])
            (reg:DI 1903))) generator/mod_arith_64bit.h:29 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1275)
        (expr_list:REG_EQUAL (mult:DI (reg:DI 750 [ D.3802 ])
                (const_int 107374182 [0x6666666]))
            (nil))))
(insn 1645 1644 1646 110 (set (reg:DI 1277)
        (const_int 8589934597 [0x200000005])) generator/mod_arith_64bit.h:29 48 {*movdi_aarch64}
     (nil))
(insn 1646 1645 1647 110 (set (reg:DI 1276)
        (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1274 [ D.3802 ]))
                    (zero_extend:TI (reg:DI 1277)))
                (const_int 64 [0x40])))) generator/mod_arith_64bit.h:29 383 {umuldi3_highpart}
     (expr_list:REG_DEAD (reg:DI 1277)
        (expr_list:REG_EQUAL (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1274 [ D.3802 ]))
                        (const_int 8589934597 [0x200000005]))
                    (const_int 64 [0x40])))
            (nil))))
(insn 1647 1646 1648 110 (set (reg:DI 1278)
        (minus:DI (reg:DI 1274 [ D.3802 ])
            (reg:DI 1276))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (nil))
(insn 1648 1647 1649 110 (set (reg:DI 1279)
        (lshiftrt:DI (reg:DI 1278)
            (const_int 1 [0x1]))) generator/mod_arith_64bit.h:29 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1278)
        (nil)))
(insn 1649 1648 1650 110 (set (reg:DI 1280)
        (plus:DI (reg:DI 1276)
            (reg:DI 1279))) generator/mod_arith_64bit.h:29 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1279)
        (expr_list:REG_DEAD (reg:DI 1276)
            (nil))))
(insn 1650 1649 1652 110 (set (reg:DI 468 [ D.3802 ])
        (lshiftrt:DI (reg:DI 1280)
            (const_int 30 [0x1e]))) generator/mod_arith_64bit.h:29 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1280)
        (expr_list:REG_EQUAL (udiv:DI (reg:DI 1274 [ D.3802 ])
                (const_int 2147483647 [0x7fffffff]))
            (nil))))
(insn 1652 1650 1654 110 (set (reg:DI 1282)
        (ashift:DI (reg:DI 468 [ D.3802 ])
            (const_int 31 [0x1f]))) generator/mod_arith_64bit.h:29 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1654 1652 1655 110 (set (reg:DI 1283)
        (minus:DI (reg:DI 1282)
            (reg:DI 468 [ D.3802 ]))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1282)
        (expr_list:REG_DEAD (reg:DI 468 [ D.3802 ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 468 [ D.3802 ])
                    (const_int 2147483647 [0x7fffffff]))
                (nil)))))
(insn 1655 1654 1656 110 (set (reg:DI 468 [ D.3802 ])
        (minus:DI (reg:DI 1274 [ D.3802 ])
            (reg:DI 1283))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1283)
        (expr_list:REG_DEAD (reg:DI 1274 [ D.3802 ])
            (nil))))
(debug_insn 1656 1655 1657 110 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 1657 1656 1658 110 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 1658 1657 1659 110 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(insn 1659 1658 1660 110 (set (reg:DI 751 [ D.3802 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -8 [0xfffffffffffffff8])) [4 new_state.z5+0 S8 A64])) generator/splittable_mrg.c:172 48 {*movdi_aarch64}
     (nil))
(debug_insn 1660 1659 1661 110 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1661 1660 1662 110 (var_location:DI a (reg:DI 751 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1662 1661 1663 110 (var_location:DI sum (reg:DI 468 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1663 1662 1664 110 (var_location:DI a (reg:DI 751 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1664 1663 1666 110 (var_location:DI b (const_int 104480 [0x19820])) -1
     (nil))
(insn 1666 1664 1667 110 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 751 [ D.3802 ])
            (reg:DI 1273))) generator/mod_arith_64bit.h:34 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1273)
        (expr_list:REG_EQUAL (compare:CC (reg:DI 751 [ D.3802 ])
                (const_int 2147483646 [0x7ffffffe]))
            (nil))))
(jump_insn 1667 1666 1671 110 (set (pc)
        (if_then_else (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1751)
            (pc))) generator/mod_arith_64bit.h:34 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 1751)
;;  succ:       115 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              116 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 111, loop depth 0, count 0, freq 1
;;  prev block 110, next block 112, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       173 [100.0%]  (FALLTHRU)
;;              109 [0.0%]  (LOOP_EXIT)
;;              171 [100.0%] 
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u1457(29){ }u1458(31){ }u1459(64){ }u1460(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 1671 1667 1672 111 76 "" [2 uses])
(note 1672 1671 1673 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1673 1672 1674 111 (var_location:DI D#11 (const_int 107374182 [0x6666666])) -1
     (nil))
(call_insn/c/i 1674 1673 3968 111 (parallel [
            (call (mem:DI (symbol_ref:DI ("mod_mul.part.1.lto_priv.10") [flags 0x43]  <function_decl 0x7f3c5e24ce00 mod_mul.part.1>) [0 mod_mul.part.1 S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("mod_mul.part.1.lto_priv.10") [flags 0x43]  <function_decl 0x7f3c5e24ce00 mod_mul.part.1>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 112, loop depth 0, count 0, freq 143, maybe hot
;;  prev block 111, next block 113, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       322 [95.5%] 
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u1462(29){ }u1463(31){ }u1464(64){ }u1465(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 750 751 1306 1892 1903
;; lr  def 	 66 [cc] 468 1285 1287 1289 1290 1291 1293 1294
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 468 1285 1287 1289 1290 1291 1293 1294
;; live  kill	
(code_label 3968 1674 1676 112 194 "" [1 uses])
(note 1676 3968 1687 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1687 1676 1688 112 (var_location:SI D#9 (debug_expr:SI D#53)) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1688 1687 1689 112 (var_location:DI st (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1689 1688 1690 112 (var_location:SI level (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 1690 1689 1691 112 (var_location:SI nlevels (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 1691 1690 1692 112 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) -1
     (nil))
(debug_insn 1692 1691 1693 112 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) -1
     (nil))
(debug_insn 1693 1692 1694 112 (var_location:DI D#30 (mem/j/c:DI (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8])) [0 new_state.z1+0 S8 A64])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1694 1693 1695 112 (var_location:DI a (debug_expr:DI D#30)) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1695 1694 1696 112 (var_location:DI a (debug_expr:DI D#30)) -1
     (nil))
(debug_insn 1696 1695 1698 112 (var_location:DI b (const_int 107374182 [0x6666666])) -1
     (nil))
(insn 1698 1696 1700 112 (set (reg:DI 1285 [ D.3802 ])
        (mult:DI (reg:DI 750 [ D.3802 ])
            (reg:DI 1903))) generator/mod_arith_64bit.h:29 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1286)
        (expr_list:REG_EQUAL (mult:DI (reg:DI 750 [ D.3802 ])
                (const_int 107374182 [0x6666666]))
            (nil))))
(insn 1700 1698 1701 112 (set (reg:DI 1287)
        (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1285 [ D.3802 ]))
                    (zero_extend:TI (reg:DI 1306)))
                (const_int 64 [0x40])))) generator/mod_arith_64bit.h:29 383 {umuldi3_highpart}
     (expr_list:REG_DEAD (reg:DI 1288)
        (expr_list:REG_EQUAL (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1285 [ D.3802 ]))
                        (const_int 8589934597 [0x200000005]))
                    (const_int 64 [0x40])))
            (nil))))
(insn 1701 1700 1702 112 (set (reg:DI 1289)
        (minus:DI (reg:DI 1285 [ D.3802 ])
            (reg:DI 1287))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (nil))
(insn 1702 1701 1703 112 (set (reg:DI 1290)
        (lshiftrt:DI (reg:DI 1289)
            (const_int 1 [0x1]))) generator/mod_arith_64bit.h:29 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1289)
        (nil)))
(insn 1703 1702 1704 112 (set (reg:DI 1291)
        (plus:DI (reg:DI 1287)
            (reg:DI 1290))) generator/mod_arith_64bit.h:29 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1290)
        (expr_list:REG_DEAD (reg:DI 1287)
            (nil))))
(insn 1704 1703 1706 112 (set (reg:DI 468 [ D.3802 ])
        (lshiftrt:DI (reg:DI 1291)
            (const_int 30 [0x1e]))) generator/mod_arith_64bit.h:29 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1291)
        (expr_list:REG_EQUAL (udiv:DI (reg:DI 1285 [ D.3802 ])
                (const_int 2147483647 [0x7fffffff]))
            (nil))))
(insn 1706 1704 1708 112 (set (reg:DI 1293)
        (ashift:DI (reg:DI 468 [ D.3802 ])
            (const_int 31 [0x1f]))) generator/mod_arith_64bit.h:29 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1708 1706 1709 112 (set (reg:DI 1294)
        (minus:DI (reg:DI 1293)
            (reg:DI 468 [ D.3802 ]))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1293)
        (expr_list:REG_DEAD (reg:DI 468 [ D.3802 ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 468 [ D.3802 ])
                    (const_int 2147483647 [0x7fffffff]))
                (nil)))))
(insn 1709 1708 1710 112 (set (reg:DI 468 [ D.3802 ])
        (minus:DI (reg:DI 1285 [ D.3802 ])
            (reg:DI 1294))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1294)
        (expr_list:REG_DEAD (reg:DI 1285 [ D.3802 ])
            (nil))))
(debug_insn 1710 1709 1711 112 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 1711 1710 1712 112 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 1712 1711 1713 112 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1713 1712 1714 112 (var_location:DI D#29 (mem/j/c:DI (plus:DI (reg/f:DI 64 sfp)
            (const_int -8 [0xfffffffffffffff8])) [0 new_state.z5+0 S8 A64])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1714 1713 1715 112 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1715 1714 1716 112 (var_location:DI a (debug_expr:DI D#29)) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1716 1715 1717 112 (var_location:DI sum (reg:DI 468 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1717 1716 1718 112 (var_location:DI a (debug_expr:DI D#29)) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1718 1717 1720 112 (var_location:DI b (const_int 104480 [0x19820])) -1
     (nil))
(insn 1720 1718 1721 112 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 751 [ D.3802 ])
            (reg:DI 1892))) generator/mod_arith_64bit.h:34 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1295)
        (expr_list:REG_EQUAL (compare:CC (reg:DI 751 [ D.3802 ])
                (const_int 2147483646 [0x7ffffffe]))
            (nil))))
(jump_insn 1721 1720 1722 112 (set (pc)
        (if_then_else (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 1756)
            (pc))) generator/mod_arith_64bit.h:34 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 1756)
;;  succ:       113 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              117 [100.0%]  (DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 113, loop depth 0, count 0, freq 0
;;  prev block 112, next block 114, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       112 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u1495(29){ }u1496(31){ }u1497(64){ }u1498(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
(note 1722 1721 1723 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 1723 1722 1724 113 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -8 [0xfffffffffffffff8])) [4 new_state.z5+0 S8 A64])
        (reg:DI 751 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 751 [ D.3802 ])
        (nil)))
(insn 1724 1723 1725 113 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 new_state.z4+0 S8 A64])
        (reg:DI 714 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 714 [ D.3802 ])
        (nil)))
(insn 1725 1724 1726 113 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -24 [0xffffffffffffffe8])) [4 new_state.z3+0 S8 A64])
        (reg:DI 826 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 826 [ D.3802 ])
        (nil)))
(insn 1726 1725 1727 113 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [4 new_state.z2+0 S8 A64])
        (reg:DI 695 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 695 [ D.3802 ])
        (nil)))
(insn 1727 1726 1840 113 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])
        (reg:DI 750 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 750 [ D.3802 ])
        (nil)))
;;  succ:       115 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 114, loop depth 0, count 0, freq 1
;;  prev block 113, next block 115, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       120 [0.0%]  (LOOP_EXIT)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u1509(29){ }u1510(31){ }u1511(64){ }u1512(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; live  gen 	
;; live  kill	
(code_label 1840 1727 1731 114 82 "" [1 uses])
(note 1731 1840 1732 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 1732 1731 1733 114 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -8 [0xfffffffffffffff8])) [4 new_state.z5+0 S8 A64])
        (reg:DI 714 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 714 [ D.3802 ])
        (nil)))
(insn 1733 1732 1734 114 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 new_state.z4+0 S8 A64])
        (reg:DI 826 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 826 [ D.3802 ])
        (nil)))
(insn 1734 1733 1735 114 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -24 [0xffffffffffffffe8])) [4 new_state.z3+0 S8 A64])
        (reg:DI 695 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 695 [ D.3802 ])
        (nil)))
(insn 1735 1734 1736 114 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [4 new_state.z2+0 S8 A64])
        (reg:DI 750 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 750 [ D.3802 ])
        (nil)))
(insn 1736 1735 1737 114 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])
        (reg:DI 469 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 469 [ D.3802 ])
        (nil)))
;;  succ:       115 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 115, loop depth 0, count 0, freq 1
;;  prev block 114, next block 116, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       179 [100.0%]  (FALLTHRU)
;;              110 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              114 [100.0%]  (FALLTHRU)
;;              177 [100.0%]  (FALLTHRU)
;;              113 [100.0%]  (FALLTHRU)
;;              175 [100.0%] 
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u1523(29){ }u1524(31){ }u1525(64){ }u1526(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1296 1297 1298 1299 1300 1301
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1296 1297 1298 1299 1300 1301
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 1737 1736 1738 115 78 "" [1 uses])
(note 1738 1737 1739 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn 1739 1738 1740 115 (set (reg/f:DI 1297)
        (high:DI (symbol_ref:DI ("__PRETTY_FUNCTION__.3503.lto_priv.8") [flags 0xc2]  <var_decl 0x7f3c5e2547e0 __PRETTY_FUNCTION__>))) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (nil))
(insn 1740 1739 1741 115 (set (reg/f:DI 1296)
        (lo_sum:DI (reg/f:DI 1297)
            (symbol_ref:DI ("__PRETTY_FUNCTION__.3503.lto_priv.8") [flags 0xc2]  <var_decl 0x7f3c5e2547e0 __PRETTY_FUNCTION__>))) generator/mod_arith_64bit.h:34 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1297)
        (expr_list:REG_EQUAL (symbol_ref:DI ("__PRETTY_FUNCTION__.3503.lto_priv.8") [flags 0xc2]  <var_decl 0x7f3c5e2547e0 __PRETTY_FUNCTION__>)
            (nil))))
(insn 1741 1740 1742 115 (set (reg/f:DI 1299)
        (high:DI (symbol_ref/f:DI ("*.LC35") [flags 0x82]  <var_decl 0x7f3c5d840d80 *.LC35>))) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (nil))
(insn 1742 1741 1743 115 (set (reg/f:DI 1298)
        (lo_sum:DI (reg/f:DI 1299)
            (symbol_ref/f:DI ("*.LC35") [flags 0x82]  <var_decl 0x7f3c5d840d80 *.LC35>))) generator/mod_arith_64bit.h:34 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1299)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC35") [flags 0x82]  <var_decl 0x7f3c5d840d80 *.LC35>)
            (nil))))
(insn 1743 1742 1744 115 (set (reg/f:DI 1301)
        (high:DI (symbol_ref/f:DI ("*.LC36") [flags 0x82]  <var_decl 0x7f3c5d840e10 *.LC36>))) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (nil))
(insn 1744 1743 1745 115 (set (reg/f:DI 1300)
        (lo_sum:DI (reg/f:DI 1301)
            (symbol_ref/f:DI ("*.LC36") [flags 0x82]  <var_decl 0x7f3c5d840e10 *.LC36>))) generator/mod_arith_64bit.h:34 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1301)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC36") [flags 0x82]  <var_decl 0x7f3c5d840e10 *.LC36>)
            (nil))))
(insn 1745 1744 1746 115 (set (reg:DI 3 x3)
        (reg/f:DI 1296)) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1296)
        (expr_list:REG_EQUAL (symbol_ref:DI ("__PRETTY_FUNCTION__.3503.lto_priv.8") [flags 0xc2]  <var_decl 0x7f3c5e2547e0 __PRETTY_FUNCTION__>)
            (nil))))
(insn 1746 1745 1747 115 (set (reg:SI 2 x2)
        (const_int 34 [0x22])) generator/mod_arith_64bit.h:34 47 {*movsi_aarch64}
     (nil))
(insn 1747 1746 1748 115 (set (reg:DI 1 x1)
        (reg/f:DI 1298)) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1298)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC35") [flags 0x82]  <var_decl 0x7f3c5d840d80 *.LC35>)
            (nil))))
(insn 1748 1747 1749 115 (set (reg:DI 0 x0)
        (reg/f:DI 1300)) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1300)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC36") [flags 0x82]  <var_decl 0x7f3c5d840e10 *.LC36>)
            (nil))))
(call_insn 1749 1748 1751 115 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/mod_arith_64bit.h:34 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 116, loop depth 0, count 0, freq 204, maybe hot
;;  prev block 115, next block 117, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       110 [100.0%] 
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u1538(29){ }u1539(31){ }u1540(64){ }u1541(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 290
;; lr  def 	 442 443 695 714 747 826 1303 1306 1313 1892 1895 1896 1897 1898 1899 1900
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 468 576 750 751 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 442 443 695 714 747 826 1303 1306 1313 1892 1895 1896 1897 1898 1899 1900
;; live  kill	
(code_label 1751 1749 1752 116 77 "" [1 uses])
(note 1752 1751 1753 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 1753 1752 1754 116 (set (reg:DI 714 [ D.3802 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 new_state.z4+0 S8 A64])) 48 {*movdi_aarch64}
     (nil))
(insn 1754 1753 1755 116 (set (reg:DI 826 [ D.3802 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -24 [0xffffffffffffffe8])) [4 new_state.z3+0 S8 A64])) 48 {*movdi_aarch64}
     (nil))
(insn 1755 1754 196 116 (set (reg:DI 695 [ D.3802 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [4 new_state.z2+0 S8 A64])) 48 {*movdi_aarch64}
     (nil))
(insn 196 1755 197 116 (set (reg/v:DI 442 [ nverts ])
        (reg/v:DI 290 [ nverts ])) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (nil))
(insn 197 196 4073 116 (set (reg/v:DI 443 [ base_tgt ])
        (const_int 0 [0])) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (nil))
(debug_insn 4073 197 198 116 (var_location:DI D#52 (const_int 0 [0])) -1
     (nil))
(insn 198 4073 1776 116 (set (reg/v:DI 747 [ base_src ])
        (const_int 0 [0])) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (nil))
(insn 1776 198 1779 116 (set (reg:DI 1303)
        (const_int 104480 [0x19820])) generator/mod_arith_64bit.h:36 48 {*movdi_aarch64}
     (nil))
(insn 1779 1776 1799 116 (set (reg:DI 1306)
        (const_int 8589934597 [0x200000005])) generator/mod_arith_64bit.h:36 48 {*movdi_aarch64}
     (nil))
(insn 1799 1779 1841 116 (set (reg:DI 1313)
        (const_int 7294 [0x1c7e])) generator/graph_generator.c:46 48 {*movdi_aarch64}
     (nil))
(insn 1841 1799 1885 116 (set (reg:DI 1892)
        (const_int 2147483646 [0x7ffffffe])) generator/mod_arith_64bit.h:34 48 {*movdi_aarch64}
     (nil))
(insn 1885 1841 1889 116 (set (reg:SI 1895)
        (const_int -776530087 [0xffffffffd1b71759])) generator/graph_generator.c:57 47 {*movsi_aarch64}
     (nil))
(insn 1889 1885 276 116 (set (reg:SI 1896)
        (const_int 10000 [0x2710])) generator/graph_generator.c:57 47 {*movsi_aarch64}
     (nil))
(insn 276 1889 277 116 (set (reg:DI 1897 [ D.3798 ])
        (const_int 1 [0x1])) generator/graph_generator.c:58 48 {*movdi_aarch64}
     (nil))
(insn 277 276 1903 116 (set (reg:DI 1898 [ D.3798 ])
        (const_int 0 [0])) generator/graph_generator.c:58 48 {*movdi_aarch64}
     (nil))
(insn 1903 277 273 116 (set (reg:SI 1899)
        (const_int 5699 [0x1643])) generator/graph_generator.c:63 47 {*movsi_aarch64}
     (nil))
(insn 273 1903 1756 116 (set (reg:DI 1900 [ D.3798 ])
        (const_int 1 [0x1])) generator/graph_generator.c:63 48 {*movdi_aarch64}
     (nil))
;;  succ:       117 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 117, loop depth 0, count 0, freq 347, maybe hot
;;  prev block 116, next block 119, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       116 [100.0%]  (FALLTHRU)
;;              112 [100.0%]  (DFS_BACK)
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u1546(29){ }u1547(31){ }u1548(64){ }u1549(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 468 751 1303 1306 1313
;; lr  def 	 66 [cc] 469 1302 1304 1305 1307 1308 1309 1311 1312
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 468 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 469 1302 1304 1305 1307 1308 1309 1311 1312
;; live  kill	
(code_label 1756 273 1757 117 79 "" [1 uses])
(note 1757 1756 1758 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1758 1757 1759 117 (var_location:DI base_tgt (reg/v:DI 443 [ base_tgt ])) -1
     (nil))
(debug_insn 1759 1758 1760 117 (var_location:DI base_src (debug_expr:DI D#52)) -1
     (nil))
(debug_insn 1760 1759 1761 117 (var_location:SI level (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 1761 1760 1762 117 (var_location:DI nverts (reg/v:DI 442 [ nverts ])) -1
     (nil))
(debug_insn 1762 1761 1763 117 (var_location:SI D#9 (debug_expr:SI D#53)) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1763 1762 1764 117 (var_location:DI st (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1764 1763 1765 117 (var_location:SI level (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 1765 1764 1766 117 (var_location:SI nlevels (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 1766 1765 1767 117 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) -1
     (nil))
(debug_insn 1767 1766 1768 117 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) -1
     (nil))
(debug_insn 1768 1767 1769 117 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 1769 1768 1770 117 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 1770 1769 1771 117 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1771 1770 1772 117 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1772 1771 1773 117 (var_location:DI a (reg:DI 751 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1773 1772 1774 117 (var_location:DI sum (reg:DI 468 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1774 1773 1775 117 (var_location:DI a (reg:DI 751 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1775 1774 1777 117 (var_location:DI b (const_int 104480 [0x19820])) -1
     (nil))
(insn 1777 1775 1778 117 (set (reg:DI 1302 [ D.3802 ])
        (mult:DI (reg:DI 751 [ D.3802 ])
            (reg:DI 1303))) generator/mod_arith_64bit.h:36 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1303)
        (expr_list:REG_DEAD (reg:DI 751 [ D.3802 ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 751 [ D.3802 ])
                    (const_int 104480 [0x19820]))
                (nil)))))
(insn 1778 1777 1780 117 (set (reg:DI 1304 [ D.3802 ])
        (plus:DI (reg:DI 1302 [ D.3802 ])
            (reg:DI 468 [ D.3802 ]))) generator/mod_arith_64bit.h:36 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1302 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 468 [ D.3802 ])
            (nil))))
(insn 1780 1778 1781 117 (set (reg:DI 1305)
        (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1304 [ D.3802 ]))
                    (zero_extend:TI (reg:DI 1306)))
                (const_int 64 [0x40])))) generator/mod_arith_64bit.h:36 383 {umuldi3_highpart}
     (expr_list:REG_DEAD (reg:DI 1306)
        (expr_list:REG_EQUAL (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1304 [ D.3802 ]))
                        (const_int 8589934597 [0x200000005]))
                    (const_int 64 [0x40])))
            (nil))))
(insn 1781 1780 1782 117 (set (reg:DI 1307)
        (minus:DI (reg:DI 1304 [ D.3802 ])
            (reg:DI 1305))) generator/mod_arith_64bit.h:36 264 {subdi3}
     (nil))
(insn 1782 1781 1783 117 (set (reg:DI 1308)
        (lshiftrt:DI (reg:DI 1307)
            (const_int 1 [0x1]))) generator/mod_arith_64bit.h:36 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1307)
        (nil)))
(insn 1783 1782 1784 117 (set (reg:DI 1309)
        (plus:DI (reg:DI 1305)
            (reg:DI 1308))) generator/mod_arith_64bit.h:36 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1308)
        (expr_list:REG_DEAD (reg:DI 1305)
            (nil))))
(insn 1784 1783 1786 117 (set (reg:DI 469 [ D.3802 ])
        (lshiftrt:DI (reg:DI 1309)
            (const_int 30 [0x1e]))) generator/mod_arith_64bit.h:36 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1309)
        (expr_list:REG_EQUAL (udiv:DI (reg:DI 1304 [ D.3802 ])
                (const_int 2147483647 [0x7fffffff]))
            (nil))))
(insn 1786 1784 1788 117 (set (reg:DI 1311)
        (ashift:DI (reg:DI 469 [ D.3802 ])
            (const_int 31 [0x1f]))) generator/mod_arith_64bit.h:36 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1788 1786 1789 117 (set (reg:DI 1312)
        (minus:DI (reg:DI 1311)
            (reg:DI 469 [ D.3802 ]))) generator/mod_arith_64bit.h:36 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1311)
        (expr_list:REG_DEAD (reg:DI 469 [ D.3802 ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 469 [ D.3802 ])
                    (const_int 2147483647 [0x7fffffff]))
                (nil)))))
(insn 1789 1788 1790 117 (set (reg:DI 469 [ D.3802 ])
        (minus:DI (reg:DI 1304 [ D.3802 ])
            (reg:DI 1312))) generator/mod_arith_64bit.h:36 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1312)
        (expr_list:REG_DEAD (reg:DI 1304 [ D.3802 ])
            (nil))))
(debug_insn 1790 1789 1791 117 (var_location:DI sum (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 1791 1790 1792 117 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 1792 1791 1793 117 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 1793 1792 1794 117 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1794 1793 1795 117 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1795 1794 1796 117 (var_location:DI new_elt (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1796 1795 1797 117 (var_location:DI state (clobber (const_int 0 [0]))) generator/splittable_mrg.c:268 -1
     (nil))
(debug_insn 1797 1796 1798 117 (var_location:DI state (clobber (const_int 0 [0]))) generator/graph_generator.c:45 -1
     (nil))
(debug_insn 1798 1797 1800 117 (var_location:SI val (subreg:SI (reg:DI 469 [ D.3802 ]) 0)) generator/graph_generator.c:45 -1
     (nil))
(insn 1800 1798 1801 117 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 469 [ D.3802 ])
            (reg:DI 1313))) generator/graph_generator.c:46 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1313)
        (expr_list:REG_EQUAL (compare:CC (reg:DI 469 [ D.3802 ])
                (const_int 7294 [0x1c7e]))
            (nil))))
(jump_insn 1801 1800 3983 117 (set (pc)
        (if_then_else (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1877)
            (pc))) generator/graph_generator.c:46 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1877)
;;  succ:       120 [50.0%]  (FALLTHRU)
;;              123 [50.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 119, loop depth 0, count 0, freq 1732, maybe hot
;;  prev block 117, next block 120, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       121 [91.0%] 
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u1588(29){ }u1589(31){ }u1590(64){ }u1591(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 476 695 750
;; lr  def 	 469 695 750 826
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 469 695 750 826
;; live  kill	
(code_label 3983 1801 3982 119 196 "" [1 uses])
(note 3982 3983 199 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(insn 199 3982 200 119 (set (reg:DI 826 [ D.3802 ])
        (reg:DI 695 [ D.3802 ])) generator/graph_generator.c:49 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 695 [ D.3802 ])
        (nil)))
(insn 200 199 201 119 (set (reg:DI 695 [ D.3802 ])
        (reg:DI 750 [ D.3802 ])) generator/graph_generator.c:49 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 750 [ D.3802 ])
        (nil)))
(insn 201 200 202 119 (set (reg:DI 750 [ D.3802 ])
        (reg:DI 469 [ D.3802 ])) generator/graph_generator.c:49 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 469 [ D.3802 ])
        (nil)))
(insn 202 201 1869 119 (set (reg:DI 469 [ D.3802 ])
        (reg:DI 476 [ D.3802 ])) generator/graph_generator.c:49 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 476 [ D.3802 ])
        (nil)))
;;  succ:       120 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 120, loop depth 0, count 0, freq 1906, maybe hot
;;  prev block 119, next block 121, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       119 [100.0%]  (FALLTHRU,DFS_BACK)
;;              117 [50.0%]  (FALLTHRU)
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u1596(29){ }u1597(31){ }u1598(64){ }u1599(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 714 1306 1892 1903
;; lr  def 	 66 [cc] 473 1314 1316 1318 1319 1320 1322 1323
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 473 1314 1316 1318 1319 1320 1322 1323
;; live  kill	
(code_label 1869 202 1803 120 83 "" [0 uses])
(note 1803 1869 1804 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1804 1803 1805 120 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) -1
     (nil))
(debug_insn 1805 1804 1806 120 (var_location:DI state (plus:DI (reg/f:DI 64 sfp)
        (const_int -40 [0xffffffffffffffd8]))) -1
     (nil))
(debug_insn 1806 1805 1807 120 (var_location:DI D#33 (mem/j/c:DI (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8])) [0 new_state.z1+0 S8 A64])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1807 1806 1808 120 (var_location:DI a (debug_expr:DI D#33)) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1808 1807 1809 120 (var_location:DI a (debug_expr:DI D#33)) -1
     (nil))
(debug_insn 1809 1808 1811 120 (var_location:DI b (const_int 107374182 [0x6666666])) -1
     (nil))
(insn 1811 1809 1813 120 (set (reg:DI 1314 [ D.3802 ])
        (mult:DI (reg:DI 469 [ D.3802 ])
            (reg:DI 1903))) generator/mod_arith_64bit.h:29 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1315)
        (expr_list:REG_EQUAL (mult:DI (reg:DI 469 [ D.3802 ])
                (const_int 107374182 [0x6666666]))
            (nil))))
(insn 1813 1811 1814 120 (set (reg:DI 1316)
        (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1314 [ D.3802 ]))
                    (zero_extend:TI (reg:DI 1306)))
                (const_int 64 [0x40])))) generator/mod_arith_64bit.h:29 383 {umuldi3_highpart}
     (expr_list:REG_EQUAL (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1314 [ D.3802 ]))
                    (const_int 8589934597 [0x200000005]))
                (const_int 64 [0x40])))
        (nil)))
(insn 1814 1813 1815 120 (set (reg:DI 1318)
        (minus:DI (reg:DI 1314 [ D.3802 ])
            (reg:DI 1316))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (nil))
(insn 1815 1814 1816 120 (set (reg:DI 1319)
        (lshiftrt:DI (reg:DI 1318)
            (const_int 1 [0x1]))) generator/mod_arith_64bit.h:29 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1318)
        (nil)))
(insn 1816 1815 1817 120 (set (reg:DI 1320)
        (plus:DI (reg:DI 1316)
            (reg:DI 1319))) generator/mod_arith_64bit.h:29 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1319)
        (expr_list:REG_DEAD (reg:DI 1316)
            (nil))))
(insn 1817 1816 1819 120 (set (reg:DI 473 [ D.3802 ])
        (lshiftrt:DI (reg:DI 1320)
            (const_int 30 [0x1e]))) generator/mod_arith_64bit.h:29 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1320)
        (expr_list:REG_EQUAL (udiv:DI (reg:DI 1314 [ D.3802 ])
                (const_int 2147483647 [0x7fffffff]))
            (nil))))
(insn 1819 1817 1821 120 (set (reg:DI 1322)
        (ashift:DI (reg:DI 473 [ D.3802 ])
            (const_int 31 [0x1f]))) generator/mod_arith_64bit.h:29 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1821 1819 1822 120 (set (reg:DI 1323)
        (minus:DI (reg:DI 1322)
            (reg:DI 473 [ D.3802 ]))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1322)
        (expr_list:REG_DEAD (reg:DI 473 [ D.3802 ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 473 [ D.3802 ])
                    (const_int 2147483647 [0x7fffffff]))
                (nil)))))
(insn 1822 1821 1826 120 (set (reg:DI 473 [ D.3802 ])
        (minus:DI (reg:DI 1314 [ D.3802 ])
            (reg:DI 1323))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1323)
        (expr_list:REG_DEAD (reg:DI 1314 [ D.3802 ])
            (nil))))
(debug_insn 1826 1822 1832 120 (var_location:DI D#32 (mem/j/c:DI (plus:DI (reg/f:DI 64 sfp)
            (const_int -8 [0xfffffffffffffff8])) [0 new_state.z5+0 S8 A64])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1832 1826 1833 120 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 1833 1832 1834 120 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 1834 1833 1835 120 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1835 1834 1836 120 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1836 1835 1837 120 (var_location:DI a (debug_expr:DI D#32)) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1837 1836 1838 120 (var_location:DI sum (reg:DI 473 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1838 1837 1839 120 (var_location:DI a (debug_expr:DI D#32)) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1839 1838 1842 120 (var_location:DI b (const_int 104480 [0x19820])) -1
     (nil))
(insn 1842 1839 1843 120 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 714 [ D.3802 ])
            (reg:DI 1892))) generator/mod_arith_64bit.h:34 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1324)
        (expr_list:REG_EQUAL (compare:CC (reg:DI 714 [ D.3802 ])
                (const_int 2147483646 [0x7ffffffe]))
            (nil))))
(jump_insn 1843 1842 1844 120 (set (pc)
        (if_then_else (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1840)
            (pc))) generator/mod_arith_64bit.h:34 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 1840)
;;  succ:       114 [0.0%]  (LOOP_EXIT)
;;              121 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 121, loop depth 0, count 0, freq 1903, maybe hot
;;  prev block 120, next block 122, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       120 [100.0%]  (FALLTHRU)
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u1628(29){ }u1629(31){ }u1630(64){ }u1631(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 473 714 826 1303 1306 1313
;; lr  def 	 66 [cc] 476 714 1325 1327 1328 1330 1331 1332 1334 1335
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 473 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 476 714 1325 1327 1328 1330 1331 1332 1334 1335
;; live  kill	
(note 1844 1843 1846 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn 1846 1844 1847 121 (set (reg:DI 1325 [ D.3802 ])
        (mult:DI (reg:DI 714 [ D.3802 ])
            (reg:DI 1303))) generator/mod_arith_64bit.h:36 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1326)
        (expr_list:REG_DEAD (reg:DI 714 [ D.3802 ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 714 [ D.3802 ])
                    (const_int 104480 [0x19820]))
                (nil)))))
(insn 1847 1846 1849 121 (set (reg:DI 1327 [ D.3802 ])
        (plus:DI (reg:DI 1325 [ D.3802 ])
            (reg:DI 473 [ D.3802 ]))) generator/mod_arith_64bit.h:36 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1325 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 473 [ D.3802 ])
            (nil))))
(insn 1849 1847 1850 121 (set (reg:DI 1328)
        (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1327 [ D.3802 ]))
                    (zero_extend:TI (reg:DI 1306)))
                (const_int 64 [0x40])))) generator/mod_arith_64bit.h:36 383 {umuldi3_highpart}
     (expr_list:REG_DEAD (reg:DI 1317)
        (expr_list:REG_EQUAL (truncate:DI (lshiftrt:TI (mult:TI (zero_extend:TI (reg:DI 1327 [ D.3802 ]))
                        (const_int 8589934597 [0x200000005]))
                    (const_int 64 [0x40])))
            (nil))))
(insn 1850 1849 1851 121 (set (reg:DI 1330)
        (minus:DI (reg:DI 1327 [ D.3802 ])
            (reg:DI 1328))) generator/mod_arith_64bit.h:36 264 {subdi3}
     (nil))
(insn 1851 1850 1852 121 (set (reg:DI 1331)
        (lshiftrt:DI (reg:DI 1330)
            (const_int 1 [0x1]))) generator/mod_arith_64bit.h:36 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1330)
        (nil)))
(insn 1852 1851 1853 121 (set (reg:DI 1332)
        (plus:DI (reg:DI 1328)
            (reg:DI 1331))) generator/mod_arith_64bit.h:36 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1331)
        (expr_list:REG_DEAD (reg:DI 1328)
            (nil))))
(insn 1853 1852 1855 121 (set (reg:DI 476 [ D.3802 ])
        (lshiftrt:DI (reg:DI 1332)
            (const_int 30 [0x1e]))) generator/mod_arith_64bit.h:36 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1332)
        (expr_list:REG_EQUAL (udiv:DI (reg:DI 1327 [ D.3802 ])
                (const_int 2147483647 [0x7fffffff]))
            (nil))))
(insn 1855 1853 1857 121 (set (reg:DI 1334)
        (ashift:DI (reg:DI 476 [ D.3802 ])
            (const_int 31 [0x1f]))) generator/mod_arith_64bit.h:36 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 1857 1855 1858 121 (set (reg:DI 1335)
        (minus:DI (reg:DI 1334)
            (reg:DI 476 [ D.3802 ]))) generator/mod_arith_64bit.h:36 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1334)
        (expr_list:REG_DEAD (reg:DI 476 [ D.3802 ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 476 [ D.3802 ])
                    (const_int 2147483647 [0x7fffffff]))
                (nil)))))
(insn 1858 1857 1859 121 (set (reg:DI 476 [ D.3802 ])
        (minus:DI (reg:DI 1327 [ D.3802 ])
            (reg:DI 1335))) generator/mod_arith_64bit.h:36 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1335)
        (expr_list:REG_DEAD (reg:DI 1327 [ D.3802 ])
            (nil))))
(debug_insn 1859 1858 1860 121 (var_location:DI sum (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 1860 1859 1861 121 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 1861 1860 1862 121 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 1862 1861 1863 121 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1863 1862 1864 121 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1864 1863 1865 121 (var_location:DI new_elt (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 1865 1864 1866 121 (var_location:DI state (clobber (const_int 0 [0]))) generator/splittable_mrg.c:268 -1
     (nil))
(debug_insn 1866 1865 1867 121 (var_location:DI state (clobber (const_int 0 [0]))) generator/graph_generator.c:48 -1
     (nil))
(debug_insn 1867 1866 1868 121 (var_location:SI val (subreg:SI (reg:DI 476 [ D.3802 ]) 0)) generator/graph_generator.c:48 -1
     (nil))
(insn 1868 1867 1871 121 (set (reg:DI 714 [ D.3802 ])
        (reg:DI 826 [ D.3802 ])) 48 {*movdi_aarch64}
     (nil))
(insn 1871 1868 1872 121 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 476 [ D.3802 ])
            (reg:DI 1313))) generator/graph_generator.c:49 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1336)
        (expr_list:REG_EQUAL (compare:CC (reg:DI 476 [ D.3802 ])
                (const_int 7294 [0x1c7e]))
            (nil))))
(jump_insn 1872 1871 1873 121 (set (pc)
        (if_then_else (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3983)
            (pc))) generator/graph_generator.c:49 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 3983)
;;  succ:       119 [91.0%] 
;;              122 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 122, loop depth 0, count 0, freq 171, maybe hot
;;  prev block 121, next block 123, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       121 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u1660(29){ }u1661(31){ }u1662(64){ }u1663(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 476 695 750 826
;; lr  def 	 463 695 714 750 751 826
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 476 576 695 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 463 695 714 750 751 826
;; live  kill	
(note 1873 1872 1874 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 1874 1873 208 122 (set (reg/v:SI 463 [ val ])
        (subreg:SI (reg:DI 476 [ D.3802 ]) 0)) generator/graph_generator.c:48 47 {*movsi_aarch64}
     (nil))
(insn 208 1874 209 122 (set (reg:DI 714 [ D.3802 ])
        (reg:DI 695 [ D.3802 ])) generator/graph_generator.c:48 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 695 [ D.3802 ])
        (nil)))
(insn 209 208 210 122 (set (reg:DI 695 [ D.3802 ])
        (reg:DI 469 [ D.3802 ])) generator/graph_generator.c:48 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 469 [ D.3802 ])
        (nil)))
(insn 210 209 211 122 (set (reg:DI 751 [ D.3802 ])
        (reg:DI 826 [ D.3802 ])) generator/graph_generator.c:48 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 826 [ D.3802 ])
        (nil)))
(insn 211 210 212 122 (set (reg:DI 826 [ D.3802 ])
        (reg:DI 750 [ D.3802 ])) generator/graph_generator.c:48 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 750 [ D.3802 ])
        (nil)))
(insn 212 211 1877 122 (set (reg:DI 750 [ D.3802 ])
        (reg:DI 476 [ D.3802 ])) generator/mod_arith_64bit.h:36 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 476 [ D.3802 ])
        (nil)))
;;  succ:       124 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 123, loop depth 0, count 0, freq 174, maybe hot
;;  prev block 122, next block 124, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       117 [50.0%] 
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u1670(29){ }u1671(31){ }u1672(64){ }u1673(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 469 695 714 750 826
;; lr  def 	 463 695 714 750 751 826
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 469 576 695 714 747 750 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 463 695 714 750 751 826
;; live  kill	
(code_label 1877 212 1878 123 81 "" [1 uses])
(note 1878 1877 1879 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 1879 1878 203 123 (set (reg/v:SI 463 [ val ])
        (subreg:SI (reg:DI 469 [ D.3802 ]) 0)) generator/graph_generator.c:45 47 {*movsi_aarch64}
     (nil))
(insn 203 1879 204 123 (set (reg:DI 751 [ D.3802 ])
        (reg:DI 714 [ D.3802 ])) generator/graph_generator.c:45 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 714 [ D.3802 ])
        (nil)))
(insn 204 203 205 123 (set (reg:DI 714 [ D.3802 ])
        (reg:DI 826 [ D.3802 ])) generator/graph_generator.c:45 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 826 [ D.3802 ])
        (nil)))
(insn 205 204 206 123 (set (reg:DI 826 [ D.3802 ])
        (reg:DI 695 [ D.3802 ])) generator/graph_generator.c:45 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 695 [ D.3802 ])
        (nil)))
(insn 206 205 207 123 (set (reg:DI 695 [ D.3802 ])
        (reg:DI 750 [ D.3802 ])) generator/graph_generator.c:45 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 750 [ D.3802 ])
        (nil)))
(insn 207 206 1880 123 (set (reg:DI 750 [ D.3802 ])
        (reg:DI 469 [ D.3802 ])) generator/graph_generator.c:45 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 469 [ D.3802 ])
        (nil)))
;;  succ:       124 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 124, loop depth 0, count 0, freq 345, maybe hot
;;  prev block 123, next block 125, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       123 [100.0%]  (FALLTHRU)
;;              122 [100.0%]  (FALLTHRU)
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u1680(29){ }u1681(31){ }u1682(64){ }u1683(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 463 1895 1896
;; lr  def 	 66 [cc] 464 1337 1339 1340
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 463 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 464 1337 1339 1340
;; live  kill	
(code_label 1880 207 1881 124 84 "" [0 uses])
(note 1881 1880 1882 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1882 1881 1883 124 (var_location:SI val (reg/v:SI 463 [ val ])) -1
     (nil))
(debug_insn 1883 1882 1884 124 (var_location:SI spk_noise_factor (const_int 0 [0])) generator/graph_generator.c:52 -1
     (nil))
(debug_insn 1884 1883 1886 124 (var_location:SI adjusted_bc_numerator (const_int 1900 [0x76c])) generator/graph_generator.c:56 -1
     (nil))
(insn 1886 1884 1887 124 (set (reg:DI 1337)
        (mult:DI (zero_extend:DI (reg/v:SI 463 [ val ]))
            (zero_extend:DI (reg:SI 1895)))) generator/graph_generator.c:57 375 {umulsidi3}
     (expr_list:REG_DEAD (reg:SI 1338)
        (expr_list:REG_EQUAL (mult:DI (zero_extend:DI (reg/v:SI 463 [ val ]))
                (const_int 3518437209 [0xd1b71759]))
            (nil))))
(insn 1887 1886 1888 124 (set (reg:DI 1339)
        (lshiftrt:DI (reg:DI 1337)
            (const_int 32 [0x20]))) generator/graph_generator.c:57 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1337)
        (nil)))
(insn 1888 1887 1890 124 (set (reg/v:SI 464 [ val ])
        (lshiftrt:SI (subreg:SI (reg:DI 1339) 0)
            (const_int 13 [0xd]))) generator/graph_generator.c:57 636 {*aarch64_lshr_sisd_or_int_si3}
     (expr_list:REG_DEAD (reg:DI 1339)
        (expr_list:REG_EQUAL (udiv:SI (reg/v:SI 463 [ val ])
                (const_int 10000 [0x2710]))
            (nil))))
(insn 1890 1888 1891 124 (set (reg:SI 1340)
        (mult:SI (reg/v:SI 464 [ val ])
            (reg:SI 1896))) generator/graph_generator.c:57 362 {mulsi3}
     (expr_list:REG_DEAD (reg:SI 1341)
        (expr_list:REG_DEAD (reg/v:SI 464 [ val ])
            (expr_list:REG_EQUAL (mult:SI (reg/v:SI 464 [ val ])
                    (const_int 10000 [0x2710]))
                (nil)))))
(insn 1891 1890 1892 124 (set (reg/v:SI 464 [ val ])
        (minus:SI (reg/v:SI 463 [ val ])
            (reg:SI 1340))) generator/graph_generator.c:57 262 {subsi3}
     (expr_list:REG_DEAD (reg:SI 1340)
        (expr_list:REG_DEAD (reg/v:SI 463 [ val ])
            (nil))))
(debug_insn 1892 1891 1893 124 (var_location:SI val (reg/v:SI 464 [ val ])) generator/graph_generator.c:57 -1
     (nil))
(insn 1893 1892 1894 124 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 464 [ val ])
            (const_int 1899 [0x76b]))) generator/graph_generator.c:58 390 {*cmpsi}
     (nil))
(jump_insn 1894 1893 1895 124 (set (pc)
        (if_then_else (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3985)
            (pc))) generator/graph_generator.c:58 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3900 (nil)))
 -> 3985)
;;  succ:       305 [39.0%] 
;;              125 [61.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 125, loop depth 0, count 0, freq 210, maybe hot
;;  prev block 124, next block 126, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       124 [61.0%]  (FALLTHRU)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u1697(29){ }u1698(31){ }u1699(64){ }u1700(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 464
;; lr  def 	 66 [cc] 1342
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 1342
;; live  kill	
(note 1895 1894 1896 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1896 1895 1897 125 (var_location:SI val (plus:SI (reg/v:SI 464 [ val ])
        (const_int -1900 [0xfffffffffffff894]))) generator/graph_generator.c:59 -1
     (nil))
(insn 1897 1896 1898 125 (set (reg:SI 1342 [ val ])
        (plus:SI (reg/v:SI 464 [ val ])
            (const_int -1900 [0xfffffffffffff894]))) generator/graph_generator.c:60 94 {*addsi3_aarch64}
     (nil))
(insn 1898 1897 1899 125 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1342 [ val ])
            (const_int 1899 [0x76b]))) generator/graph_generator.c:60 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1342 [ val ])
        (nil)))
(jump_insn 1899 1898 1900 125 (set (pc)
        (if_then_else (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1909)
            (pc))) generator/graph_generator.c:60 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 6700 (nil)))
 -> 1909)
;;  succ:       128 [67.0%] 
;;              126 [33.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 126, loop depth 0, count 0, freq 69, maybe hot
;;  prev block 125, next block 127, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       125 [33.0%]  (FALLTHRU)
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u1705(29){ }u1706(31){ }u1707(64){ }u1708(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 464 1899
;; lr  def 	 66 [cc] 1343
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 464 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 1343
;; live  kill	
(note 1900 1899 1901 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1901 1900 1902 126 (var_location:SI val (plus:SI (reg/v:SI 464 [ val ])
        (const_int -3800 [0xfffffffffffff128]))) generator/graph_generator.c:61 -1
     (nil))
(insn 1902 1901 1904 126 (set (reg:SI 1343 [ val ])
        (plus:SI (reg/v:SI 464 [ val ])
            (const_int -3800 [0xfffffffffffff128]))) generator/graph_generator.c:63 94 {*addsi3_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 464 [ val ])
        (nil)))
(insn 1904 1902 1905 126 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1343 [ val ])
            (reg:SI 1899))) generator/graph_generator.c:63 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1344)
        (expr_list:REG_DEAD (reg:SI 1343 [ val ])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 1343 [ val ])
                    (const_int 5699 [0x1643]))
                (nil)))))
(jump_insn 1905 1904 1906 126 (set (pc)
        (if_then_else (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3989)
            (pc))) generator/graph_generator.c:63 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 6700 (nil)))
 -> 3989)
;;  succ:       127 [33.0%]  (FALLTHRU)
;;              306 [67.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 127, loop depth 0, count 0, freq 23
;;  prev block 126, next block 128, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       126 [33.0%]  (FALLTHRU)
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u1714(29){ }u1715(31){ }u1716(64){ }u1717(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1898
;; lr  def 	 828 829
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 828 829
;; live  kill	
(note 1906 1905 4397 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 4397 1906 4398 127 (set (reg:DI 829 [ D.3798 ])
        (const_int 0 [0])) generator/graph_generator.c:63 48 {*movdi_aarch64}
     (nil))
(insn 4398 4397 1909 127 (set (reg:DI 828 [ D.3798 ])
        (const_int 0 [0])) generator/graph_generator.c:63 48 {*movdi_aarch64}
     (nil))
;;  succ:       307 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 128, loop depth 0, count 0, freq 140, maybe hot
;;  prev block 127, next block 129, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       125 [67.0%] 
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u1718(29){ }u1719(31){ }u1720(64){ }u1721(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 1909 4398 1910 128 86 "" [1 uses])
(note 1910 1909 1911 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1911 1910 1912 128 (var_location:DI st (clobber (const_int 0 [0]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1912 1911 1913 128 (var_location:SI val (clobber (const_int 0 [0]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1913 1912 1914 128 (var_location:SI square (clobber (const_int 0 [0]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 1914 1913 1915 128 (var_location:SI src_offset (const_int 1 [0x1])) generator/graph_generator.c:138 -1
     (nil))
(debug_insn 1915 1914 1916 128 (var_location:SI tgt_offset (const_int 0 [0])) generator/graph_generator.c:139 -1
     (nil))
(insn 1916 1915 1917 128 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 443 [ base_tgt ])
            (reg/v:DI 747 [ base_src ]))) generator/graph_generator.c:140 391 {*cmpdi}
     (nil))
(jump_insn 1917 1916 1918 128 (set (pc)
        (if_then_else (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1939)
            (pc))) generator/graph_generator.c:140 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 1939)
;;  succ:       129 (FALLTHRU,LOOP_EXIT)
;;              131 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 129, loop depth 0, count 0, freq 0
;;  prev block 128, next block 130, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       128 (FALLTHRU,LOOP_EXIT)
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u1725(29){ }u1726(31){ }u1727(64){ }u1728(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
(note 1918 1917 1919 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn 1919 1918 1920 129 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -8 [0xfffffffffffffff8])) [4 new_state.z5+0 S8 A64])
        (reg:DI 751 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 751 [ D.3802 ])
        (nil)))
(insn 1920 1919 1921 129 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 new_state.z4+0 S8 A64])
        (reg:DI 714 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 714 [ D.3802 ])
        (nil)))
(insn 1921 1920 1922 129 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -24 [0xffffffffffffffe8])) [4 new_state.z3+0 S8 A64])
        (reg:DI 826 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 826 [ D.3802 ])
        (nil)))
(insn 1922 1921 1923 129 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [4 new_state.z2+0 S8 A64])
        (reg:DI 695 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 695 [ D.3802 ])
        (nil)))
(insn 1923 1922 3838 129 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])
        (reg:DI 750 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 750 [ D.3802 ])
        (nil)))
;;  succ:       130 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 130, loop depth 0, count 0, freq 0
;; Invalid sum of incoming frequencies 156, should be 0
;;  prev block 129, next block 131, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       308 [100.0%]  (FALLTHRU)
;;              129 [100.0%]  (FALLTHRU)
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u1739(29){ }u1740(31){ }u1741(64){ }u1742(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1345 1346 1348 1349 1350 1351 1352
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1345 1346 1348 1349 1350 1351 1352
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3838 1923 1924 130 185 "" [0 uses])
(note 1924 3838 1925 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn 1925 1924 1926 130 (set (reg/f:DI 1346)
        (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) generator/graph_generator.c:140 48 {*movdi_aarch64}
     (nil))
(insn 1926 1925 1928 130 (set (reg/f:DI 1345)
        (lo_sum:DI (reg/f:DI 1346)
            (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) generator/graph_generator.c:140 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1346)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 1928 1926 1929 130 (set (reg/f:DI 1348)
        (plus:DI (reg/f:DI 1345)
            (const_int 16 [0x10]))) generator/graph_generator.c:140 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1345)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 16 [0x10])))
            (nil))))
(insn 1929 1928 1930 130 (set (reg/f:DI 1350)
        (high:DI (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>))) generator/graph_generator.c:140 48 {*movdi_aarch64}
     (nil))
(insn 1930 1929 1931 130 (set (reg/f:DI 1349)
        (lo_sum:DI (reg/f:DI 1350)
            (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>))) generator/graph_generator.c:140 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1350)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>)
            (nil))))
(insn 1931 1930 1932 130 (set (reg/f:DI 1352)
        (high:DI (symbol_ref/f:DI ("*.LC38") [flags 0x82]  <var_decl 0x7f3c5d840f30 *.LC38>))) generator/graph_generator.c:140 48 {*movdi_aarch64}
     (nil))
(insn 1932 1931 1933 130 (set (reg/f:DI 1351)
        (lo_sum:DI (reg/f:DI 1352)
            (symbol_ref/f:DI ("*.LC38") [flags 0x82]  <var_decl 0x7f3c5d840f30 *.LC38>))) generator/graph_generator.c:140 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1352)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC38") [flags 0x82]  <var_decl 0x7f3c5d840f30 *.LC38>)
            (nil))))
(insn 1933 1932 1934 130 (set (reg:DI 3 x3)
        (reg/f:DI 1348)) generator/graph_generator.c:140 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1348)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 16 [0x10])))
            (nil))))
(insn 1934 1933 1935 130 (set (reg:SI 2 x2)
        (const_int 140 [0x8c])) generator/graph_generator.c:140 47 {*movsi_aarch64}
     (nil))
(insn 1935 1934 1936 130 (set (reg:DI 1 x1)
        (reg/f:DI 1349)) generator/graph_generator.c:140 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1349)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>)
            (nil))))
(insn 1936 1935 1937 130 (set (reg:DI 0 x0)
        (reg/f:DI 1351)) generator/graph_generator.c:140 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1351)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC38") [flags 0x82]  <var_decl 0x7f3c5d840f30 *.LC38>)
            (nil))))
(call_insn 1937 1936 1939 130 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/graph_generator.c:140 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 131, loop depth 0, count 0, freq 48, maybe hot
;;  prev block 130, next block 132, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       128 [100.0%] 
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u1755(29){ }u1756(31){ }u1757(64){ }u1758(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 1939 1937 1940 131 87 "" [1 uses])
(note 1940 1939 1941 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn 1941 1940 1942 131 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 443 [ base_tgt ])
            (reg/v:DI 747 [ base_src ]))) generator/graph_generator.c:143 391 {*cmpdi}
     (nil))
(jump_insn 1942 1941 1943 131 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 1947)
            (pc))) generator/graph_generator.c:143 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 1947)
;;  succ:       132 [100.0%]  (FALLTHRU)
;;              133
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 132, loop depth 0, count 0, freq 48, maybe hot
;;  prev block 131, next block 133, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       131 [100.0%]  (FALLTHRU)
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u1762(29){ }u1763(31){ }u1764(64){ }u1765(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 1897 1898
;; lr  def 	 442 829 831
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 442 829 831
;; live  kill	
(note 1943 1942 1944 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn 1944 1943 4392 132 (set (reg/v:DI 442 [ nverts ])
        (ashiftrt:DI (reg/v:DI 442 [ nverts ])
            (const_int 1 [0x1]))) 639 {*aarch64_ashr_sisd_or_int_di3}
     (nil))
(insn 4392 1944 4393 132 (set (reg:DI 829 [ D.3798 ])
        (const_int 1 [0x1])) generator/graph_generator.c:143 48 {*movdi_aarch64}
     (nil))
(insn 4393 4392 1947 132 (set (reg:DI 831 [ D.3798 ])
        (const_int 0 [0])) generator/graph_generator.c:143 48 {*movdi_aarch64}
     (nil))
;;  succ:       322 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 133, loop depth 0, count 0, freq 0
;;  prev block 132, next block 134, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       131
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u1768(29){ }u1769(31){ }u1770(64){ }u1771(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 1898
;; lr  def 	 442 829 831
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 442 829 831
;; live  kill	
(code_label 1947 4393 1948 133 88 "" [1 uses])
(note 1948 1947 1949 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(insn 1949 1948 282 133 (set (reg/v:DI 442 [ nverts ])
        (ashiftrt:DI (reg/v:DI 442 [ nverts ])
            (const_int 1 [0x1]))) 639 {*aarch64_ashr_sisd_or_int_di3}
     (nil))
(insn 282 1949 4391 133 (set (reg:DI 831 [ D.3798 ])
        (reg/v:DI 442 [ nverts ])) generator/graph_generator.c:143 48 {*movdi_aarch64}
     (nil))
(insn 4391 282 1952 133 (set (reg:DI 829 [ D.3798 ])
        (const_int 0 [0])) generator/graph_generator.c:143 48 {*movdi_aarch64}
     (nil))
;;  succ:       322 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 134, loop depth 0, count 0, freq 16
;;  prev block 133, next block 135, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       322 [4.5%]  (FALLTHRU,LOOP_EXIT)
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u1774(29){ }u1775(31){ }u1776(64){ }u1777(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 695 714 747 750 751 826 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 695 714 747 750 751 826 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	
;; live  kill	
(note 1952 4391 1953 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(insn 1953 1952 1954 134 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -8 [0xfffffffffffffff8])) [4 new_state.z5+0 S8 A64])
        (reg:DI 751 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 751 [ D.3802 ])
        (nil)))
(insn 1954 1953 1955 134 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 new_state.z4+0 S8 A64])
        (reg:DI 714 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 714 [ D.3802 ])
        (nil)))
(insn 1955 1954 1956 134 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -24 [0xffffffffffffffe8])) [4 new_state.z3+0 S8 A64])
        (reg:DI 826 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 826 [ D.3802 ])
        (nil)))
(insn 1956 1955 1957 134 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [4 new_state.z2+0 S8 A64])
        (reg:DI 695 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 695 [ D.3802 ])
        (nil)))
(insn 1957 1956 1958 134 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])
        (reg:DI 750 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 750 [ D.3802 ])
        (nil)))
;;  succ:       135 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 135, loop depth 0, count 0, freq 16
;;  prev block 134, next block 136, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       134 [100.0%]  (FALLTHRU)
;;              102 [100.0%]  (FALLTHRU)
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u1788(29){ }u1789(31){ }u1790(64){ }u1791(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 432 434 747 1905
;; lr  def 	 66 [cc] 519 520 523 525 527 528 530 532 533 535 537 539 540 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 576 747 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 519 520 523 525 527 528 530 532 533 535 537 539 540 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363
;; live  kill	
(code_label 1958 1957 1959 135 72 "" [0 uses])
(note 1959 1958 1960 135 [bb 135] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1960 1959 1961 135 (var_location:DI v0 (debug_expr:DI D#52)) -1
     (nil))
(debug_insn 1961 1960 1962 135 (var_location:SI lgN (debug_expr:SI D#53)) -1
     (nil))
(debug_insn 1962 1961 1963 135 (var_location:DI val0 (debug_expr:DI D#54)) -1
     (nil))
(debug_insn 1963 1962 1965 135 (var_location:DI val1 (debug_expr:DI D#55)) -1
     (nil))
(debug_insn 1965 1963 1966 135 (var_location:DI v (reg/v:DI 747 [ base_src ])) generator/graph_generator.c:121 -1
     (nil))
(insn 1966 1965 1967 135 (set (reg:DI 519 [ D.3802 ])
        (plus:DI (reg/v:DI 432 [ val0 ])
            (reg/v:DI 434 [ val1 ]))) generator/graph_generator.c:122 95 {*adddi3_aarch64}
     (nil))
(insn 1967 1966 1968 135 (set (reg/v:DI 520 [ v ])
        (plus:DI (reg/v:DI 747 [ base_src ])
            (reg:DI 519 [ D.3802 ]))) generator/graph_generator.c:122 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/v:DI 747 [ base_src ])
        (nil)))
(debug_insn 1968 1967 4415 135 (var_location:DI v (reg/v:DI 520 [ v ])) generator/graph_generator.c:122 -1
     (nil))
(debug_insn 4415 1968 1971 135 (var_location:DI D#59 (reg:DI 1905 [ D.3802 ])) -1
     (nil))
(debug_insn 1971 4415 1972 135 (var_location:DI v (mult:DI (reg/v:DI 520 [ v ])
        (debug_expr:DI D#59))) generator/graph_generator.c:123 -1
     (nil))
(debug_insn 1972 1971 1973 135 (var_location:DI x (mult:DI (reg/v:DI 520 [ v ])
        (debug_expr:DI D#59))) generator/graph_generator.c:123 -1
     (nil))
(insn 1973 1972 1974 135 (set (reg:DI 1354 [ v ])
        (mult:DI (reg/v:DI 520 [ v ])
            (reg:DI 1905 [ D.3802 ]))) generator/graph_generator.c:82 363 {muldi3}
     (expr_list:REG_DEAD (reg/v:DI 520 [ v ])
        (nil)))
(insn 1974 1973 1975 135 (set (reg/v:DI 523 [ x ])
        (bswap:DI (reg:DI 1354 [ v ]))) generator/graph_generator.c:82 711 {bswapdi2}
     (expr_list:REG_DEAD (reg:DI 1354 [ v ])
        (nil)))
(debug_insn 1975 1974 1976 135 (var_location:DI x (reg/v:DI 523 [ x ])) generator/graph_generator.c:82 -1
     (nil))
(insn 1976 1975 1977 135 (set (reg:DI 1355 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 523 [ x ])
            (const_int 4 [0x4]))) generator/graph_generator.c:88 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 1977 1976 1978 135 (set (reg:DI 525 [ D.3802 ])
        (and:DI (reg:DI 1355 [ D.3802 ])
            (const_int 1085102592571150095 [0xf0f0f0f0f0f0f0f]))) generator/graph_generator.c:88 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1355 [ D.3802 ])
        (nil)))
(insn 1978 1977 1979 135 (set (reg:DI 1356 [ D.3802 ])
        (and:DI (reg/v:DI 523 [ x ])
            (const_int 1085102592571150095 [0xf0f0f0f0f0f0f0f]))) generator/graph_generator.c:88 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 523 [ x ])
        (nil)))
(insn 1979 1978 1980 135 (set (reg:DI 527 [ D.3802 ])
        (ashift:DI (reg:DI 1356 [ D.3802 ])
            (const_int 4 [0x4]))) generator/graph_generator.c:88 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1356 [ D.3802 ])
        (nil)))
(insn 1980 1979 1981 135 (set (reg/v:DI 528 [ x ])
        (ior:DI (reg:DI 525 [ D.3802 ])
            (reg:DI 527 [ D.3802 ]))) generator/graph_generator.c:88 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 527 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 525 [ D.3802 ])
            (nil))))
(debug_insn 1981 1980 1982 135 (var_location:DI x (reg/v:DI 528 [ x ])) generator/graph_generator.c:88 -1
     (nil))
(insn 1982 1981 1983 135 (set (reg:DI 1357 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 528 [ x ])
            (const_int 2 [0x2]))) generator/graph_generator.c:89 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 1983 1982 1984 135 (set (reg:DI 530 [ D.3802 ])
        (and:DI (reg:DI 1357 [ D.3802 ])
            (const_int 3689348814741910323 [0x3333333333333333]))) generator/graph_generator.c:89 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1357 [ D.3802 ])
        (nil)))
(insn 1984 1983 1985 135 (set (reg:DI 1358 [ D.3802 ])
        (and:DI (reg/v:DI 528 [ x ])
            (const_int 3689348814741910323 [0x3333333333333333]))) generator/graph_generator.c:89 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 528 [ x ])
        (nil)))
(insn 1985 1984 1986 135 (set (reg:DI 532 [ D.3802 ])
        (ashift:DI (reg:DI 1358 [ D.3802 ])
            (const_int 2 [0x2]))) generator/graph_generator.c:89 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1358 [ D.3802 ])
        (nil)))
(insn 1986 1985 1987 135 (set (reg/v:DI 533 [ x ])
        (ior:DI (reg:DI 530 [ D.3802 ])
            (reg:DI 532 [ D.3802 ]))) generator/graph_generator.c:89 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 532 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 530 [ D.3802 ])
            (nil))))
(debug_insn 1987 1986 1988 135 (var_location:DI x (reg/v:DI 533 [ x ])) generator/graph_generator.c:89 -1
     (nil))
(insn 1988 1987 1989 135 (set (reg:DI 1359 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 533 [ x ])
            (const_int 1 [0x1]))) generator/graph_generator.c:90 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 1989 1988 1990 135 (set (reg:DI 535 [ D.3802 ])
        (and:DI (reg:DI 1359 [ D.3802 ])
            (const_int 6148914691236517205 [0x5555555555555555]))) generator/graph_generator.c:90 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1359 [ D.3802 ])
        (nil)))
(insn 1990 1989 1991 135 (set (reg:DI 1360 [ D.3802 ])
        (and:DI (reg/v:DI 533 [ x ])
            (const_int 6148914691236517205 [0x5555555555555555]))) generator/graph_generator.c:90 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 533 [ x ])
        (nil)))
(insn 1991 1990 1993 135 (set (reg:DI 537 [ D.3802 ])
        (ashift:DI (reg:DI 1360 [ D.3802 ])
            (const_int 1 [0x1]))) generator/graph_generator.c:90 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1360 [ D.3802 ])
        (nil)))
(debug_insn 1993 1991 1994 135 (var_location:DI x (clobber (const_int 0 [0]))) generator/graph_generator.c:124 -1
     (nil))
(insn 1994 1993 1995 135 (set (reg:SI 1361)
        (const_int 64 [0x40])) generator/graph_generator.c:124 47 {*movsi_aarch64}
     (nil))
(insn 1995 1994 1996 135 (set (reg:SI 539 [ D.3797 ])
        (minus:SI (reg:SI 1361)
            (reg:SI 261 [ D.3797 ]))) generator/graph_generator.c:124 262 {subsi3}
     (expr_list:REG_DEAD (reg:SI 1361)
        (expr_list:REG_EQUAL (minus:SI (const_int 64 [0x40])
                (reg:SI 261 [ D.3797 ]))
            (nil))))
(insn 1996 1995 1997 135 (set (reg:DI 1362 [ x ])
        (ior:DI (reg:DI 535 [ D.3802 ])
            (reg:DI 537 [ D.3802 ]))) generator/graph_generator.c:124 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 537 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 535 [ D.3802 ])
            (nil))))
(insn 1997 1996 1998 135 (set (reg/v:DI 540 [ v ])
        (lshiftrt:DI (reg:DI 1362 [ x ])
            (subreg:QI (reg:SI 539 [ D.3797 ]) 0))) generator/graph_generator.c:124 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1362 [ x ])
        (nil)))
(debug_insn 1998 1997 1999 135 (var_location:DI v (reg/v:DI 540 [ v ])) generator/graph_generator.c:124 -1
     (nil))
(insn 1999 1998 2000 135 (set (reg:DI 1363 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 540 [ v ])
            (subreg:QI (reg:SI 261 [ D.3797 ]) 0))) generator/graph_generator.c:125 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2000 1999 2001 135 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1363 [ D.3802 ])
            (const_int 0 [0]))) generator/graph_generator.c:125 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1363 [ D.3802 ])
        (nil)))
(jump_insn 2001 2000 2099 135 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2009)
            (pc))) generator/graph_generator.c:125 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2009)
;;  succ:       136 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              137 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 136, loop depth 0, count 0, freq 0
;;  prev block 135, next block 137, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       135 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              139 [0.0%]  (LOOP_EXIT)
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u1838(29){ }u1839(31){ }u1840(64){ }u1841(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2099 2001 2002 136 92 "" [1 uses])
(note 2002 2099 2003 136 [bb 136] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2003 2002 2004 136 (var_location:DI D#12 (debug_expr:DI D#52)) -1
     (nil))
(debug_insn 2004 2003 2005 136 (var_location:SI D#13 (debug_expr:SI D#53)) -1
     (nil))
(debug_insn 2005 2004 2006 136 (var_location:DI D#14 (debug_expr:DI D#54)) -1
     (nil))
(debug_insn 2006 2005 2007 136 (var_location:DI D#15 (debug_expr:DI D#55)) -1
     (nil))
(call_insn/c/i 2007 2006 2009 136 (parallel [
            (call (mem:DI (symbol_ref:DI ("scramble.part.1.lto_priv.19") [flags 0x43]  <function_decl 0x7f3c5e252000 scramble.part.1>) [0 scramble.part.1 S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("scramble.part.1.lto_priv.19") [flags 0x43]  <function_decl 0x7f3c5e252000 scramble.part.1>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 137, loop depth 0, count 0, freq 16
;;  prev block 136, next block 138, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       135 [100.0%] 
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u1843(29){ }u1844(31){ }u1845(64){ }u1846(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 539 540 1907
;; lr  def 	 66 [cc] 544 546 548 549 551 553 554 556 558 560 1365 1366 1367 1368 1369 1370 1371 1372 1373
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 540 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 544 546 548 549 551 553 554 556 558 560 1365 1366 1367 1368 1369 1370 1371 1372 1373
;; live  kill	
(code_label 2009 2007 2010 137 90 "" [1 uses])
(note 2010 2009 4414 137 [bb 137] NOTE_INSN_BASIC_BLOCK)
(debug_insn 4414 2010 2013 137 (var_location:DI D#58 (reg:DI 1907 [ D.3802 ])) -1
     (nil))
(debug_insn 2013 4414 2014 137 (var_location:DI v (mult:DI (reg/v:DI 540 [ v ])
        (debug_expr:DI D#58))) generator/graph_generator.c:126 -1
     (nil))
(debug_insn 2014 2013 2015 137 (var_location:DI x (mult:DI (reg/v:DI 540 [ v ])
        (debug_expr:DI D#58))) generator/graph_generator.c:126 -1
     (nil))
(insn 2015 2014 2016 137 (set (reg:DI 1365 [ v ])
        (mult:DI (reg/v:DI 540 [ v ])
            (reg:DI 1907 [ D.3802 ]))) generator/graph_generator.c:82 363 {muldi3}
     (expr_list:REG_DEAD (reg/v:DI 540 [ v ])
        (nil)))
(insn 2016 2015 2017 137 (set (reg/v:DI 544 [ x ])
        (bswap:DI (reg:DI 1365 [ v ]))) generator/graph_generator.c:82 711 {bswapdi2}
     (expr_list:REG_DEAD (reg:DI 1365 [ v ])
        (nil)))
(debug_insn 2017 2016 2018 137 (var_location:DI x (reg/v:DI 544 [ x ])) generator/graph_generator.c:82 -1
     (nil))
(insn 2018 2017 2019 137 (set (reg:DI 1366 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 544 [ x ])
            (const_int 4 [0x4]))) generator/graph_generator.c:88 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2019 2018 2020 137 (set (reg:DI 546 [ D.3802 ])
        (and:DI (reg:DI 1366 [ D.3802 ])
            (const_int 1085102592571150095 [0xf0f0f0f0f0f0f0f]))) generator/graph_generator.c:88 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1366 [ D.3802 ])
        (nil)))
(insn 2020 2019 2021 137 (set (reg:DI 1367 [ D.3802 ])
        (and:DI (reg/v:DI 544 [ x ])
            (const_int 1085102592571150095 [0xf0f0f0f0f0f0f0f]))) generator/graph_generator.c:88 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 544 [ x ])
        (nil)))
(insn 2021 2020 2022 137 (set (reg:DI 548 [ D.3802 ])
        (ashift:DI (reg:DI 1367 [ D.3802 ])
            (const_int 4 [0x4]))) generator/graph_generator.c:88 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1367 [ D.3802 ])
        (nil)))
(insn 2022 2021 2023 137 (set (reg/v:DI 549 [ x ])
        (ior:DI (reg:DI 546 [ D.3802 ])
            (reg:DI 548 [ D.3802 ]))) generator/graph_generator.c:88 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 548 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 546 [ D.3802 ])
            (nil))))
(debug_insn 2023 2022 2024 137 (var_location:DI x (reg/v:DI 549 [ x ])) generator/graph_generator.c:88 -1
     (nil))
(insn 2024 2023 2025 137 (set (reg:DI 1368 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 549 [ x ])
            (const_int 2 [0x2]))) generator/graph_generator.c:89 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2025 2024 2026 137 (set (reg:DI 551 [ D.3802 ])
        (and:DI (reg:DI 1368 [ D.3802 ])
            (const_int 3689348814741910323 [0x3333333333333333]))) generator/graph_generator.c:89 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1368 [ D.3802 ])
        (nil)))
(insn 2026 2025 2027 137 (set (reg:DI 1369 [ D.3802 ])
        (and:DI (reg/v:DI 549 [ x ])
            (const_int 3689348814741910323 [0x3333333333333333]))) generator/graph_generator.c:89 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 549 [ x ])
        (nil)))
(insn 2027 2026 2028 137 (set (reg:DI 553 [ D.3802 ])
        (ashift:DI (reg:DI 1369 [ D.3802 ])
            (const_int 2 [0x2]))) generator/graph_generator.c:89 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1369 [ D.3802 ])
        (nil)))
(insn 2028 2027 2029 137 (set (reg/v:DI 554 [ x ])
        (ior:DI (reg:DI 551 [ D.3802 ])
            (reg:DI 553 [ D.3802 ]))) generator/graph_generator.c:89 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 553 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 551 [ D.3802 ])
            (nil))))
(debug_insn 2029 2028 2030 137 (var_location:DI x (reg/v:DI 554 [ x ])) generator/graph_generator.c:89 -1
     (nil))
(insn 2030 2029 2031 137 (set (reg:DI 1370 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 554 [ x ])
            (const_int 1 [0x1]))) generator/graph_generator.c:90 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2031 2030 2032 137 (set (reg:DI 556 [ D.3802 ])
        (and:DI (reg:DI 1370 [ D.3802 ])
            (const_int 6148914691236517205 [0x5555555555555555]))) generator/graph_generator.c:90 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1370 [ D.3802 ])
        (nil)))
(insn 2032 2031 2033 137 (set (reg:DI 1371 [ D.3802 ])
        (and:DI (reg/v:DI 554 [ x ])
            (const_int 6148914691236517205 [0x5555555555555555]))) generator/graph_generator.c:90 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 554 [ x ])
        (nil)))
(insn 2033 2032 2035 137 (set (reg:DI 558 [ D.3802 ])
        (ashift:DI (reg:DI 1371 [ D.3802 ])
            (const_int 1 [0x1]))) generator/graph_generator.c:90 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1371 [ D.3802 ])
        (nil)))
(debug_insn 2035 2033 2036 137 (var_location:DI x (clobber (const_int 0 [0]))) generator/graph_generator.c:127 -1
     (nil))
(insn 2036 2035 2037 137 (set (reg:DI 1372 [ x ])
        (ior:DI (reg:DI 556 [ D.3802 ])
            (reg:DI 558 [ D.3802 ]))) generator/graph_generator.c:127 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 558 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 556 [ D.3802 ])
            (nil))))
(insn 2037 2036 2038 137 (set (reg/v:DI 560 [ v ])
        (lshiftrt:DI (reg:DI 1372 [ x ])
            (subreg:QI (reg:SI 539 [ D.3797 ]) 0))) generator/graph_generator.c:127 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1372 [ x ])
        (nil)))
(debug_insn 2038 2037 2039 137 (var_location:DI v (reg/v:DI 560 [ v ])) generator/graph_generator.c:127 -1
     (nil))
(insn 2039 2038 2040 137 (set (reg:DI 1373 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 560 [ v ])
            (subreg:QI (reg:SI 261 [ D.3797 ]) 0))) generator/graph_generator.c:128 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2040 2039 2041 137 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1373 [ D.3802 ])
            (const_int 0 [0]))) generator/graph_generator.c:128 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1373 [ D.3802 ])
        (nil)))
(jump_insn 2041 2040 2130 137 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2055)
            (pc))) generator/graph_generator.c:128 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2055)
;;  succ:       138 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              139 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 138, loop depth 0, count 0, freq 0
;;  prev block 137, next block 139, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       137 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              140 [0.0%]  (LOOP_EXIT)
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u1884(29){ }u1885(31){ }u1886(64){ }u1887(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1374 1375 1376 1377 1378 1379
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1374 1375 1376 1377 1378 1379
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2130 2041 2042 138 93 "" [1 uses])
(note 2042 2130 2043 138 [bb 138] NOTE_INSN_BASIC_BLOCK)
(insn 2043 2042 2044 138 (set (reg/f:DI 1375)
        (high:DI (symbol_ref:DI ("__PRETTY_FUNCTION__.3549.lto_priv.17") [flags 0xc2]  <var_decl 0x7f3c5e254990 __PRETTY_FUNCTION__>))) generator/graph_generator.c:128 48 {*movdi_aarch64}
     (nil))
(insn 2044 2043 2045 138 (set (reg/f:DI 1374)
        (lo_sum:DI (reg/f:DI 1375)
            (symbol_ref:DI ("__PRETTY_FUNCTION__.3549.lto_priv.17") [flags 0xc2]  <var_decl 0x7f3c5e254990 __PRETTY_FUNCTION__>))) generator/graph_generator.c:128 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1375)
        (expr_list:REG_EQUAL (symbol_ref:DI ("__PRETTY_FUNCTION__.3549.lto_priv.17") [flags 0xc2]  <var_decl 0x7f3c5e254990 __PRETTY_FUNCTION__>)
            (nil))))
(insn 2045 2044 2046 138 (set (reg/f:DI 1377)
        (high:DI (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>))) generator/graph_generator.c:128 48 {*movdi_aarch64}
     (nil))
(insn 2046 2045 2047 138 (set (reg/f:DI 1376)
        (lo_sum:DI (reg/f:DI 1377)
            (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>))) generator/graph_generator.c:128 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1377)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>)
            (nil))))
(insn 2047 2046 2048 138 (set (reg/f:DI 1379)
        (high:DI (symbol_ref/f:DI ("*.LC39") [flags 0x82]  <var_decl 0x7f3c5d82ef30 *.LC39>))) generator/graph_generator.c:128 48 {*movdi_aarch64}
     (nil))
(insn 2048 2047 2049 138 (set (reg/f:DI 1378)
        (lo_sum:DI (reg/f:DI 1379)
            (symbol_ref/f:DI ("*.LC39") [flags 0x82]  <var_decl 0x7f3c5d82ef30 *.LC39>))) generator/graph_generator.c:128 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1379)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC39") [flags 0x82]  <var_decl 0x7f3c5d82ef30 *.LC39>)
            (nil))))
(insn 2049 2048 2050 138 (set (reg:DI 3 x3)
        (reg/f:DI 1374)) generator/graph_generator.c:128 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1374)
        (expr_list:REG_EQUAL (symbol_ref:DI ("__PRETTY_FUNCTION__.3549.lto_priv.17") [flags 0xc2]  <var_decl 0x7f3c5e254990 __PRETTY_FUNCTION__>)
            (nil))))
(insn 2050 2049 2051 138 (set (reg:SI 2 x2)
        (const_int 128 [0x80])) generator/graph_generator.c:128 47 {*movsi_aarch64}
     (nil))
(insn 2051 2050 2052 138 (set (reg:DI 1 x1)
        (reg/f:DI 1376)) generator/graph_generator.c:128 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1376)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC37") [flags 0x82]  <var_decl 0x7f3c5d840ea0 *.LC37>)
            (nil))))
(insn 2052 2051 2053 138 (set (reg:DI 0 x0)
        (reg/f:DI 1378)) generator/graph_generator.c:128 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1378)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC39") [flags 0x82]  <var_decl 0x7f3c5d82ef30 *.LC39>)
            (nil))))
(call_insn 2053 2052 2055 138 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/graph_generator.c:128 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 139, loop depth 0, count 0, freq 16
;;  prev block 138, next block 140, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       137 [100.0%] 
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u1899(29){ }u1900(31){ }u1901(64){ }u1902(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 443 519 539 1905
;; lr  def 	 66 [cc] 478 480 482 484 485 487 489 490 492 494 496 1380 1381 1382 1383 1384 1385 1386 1387 1388
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 443 447 519 539 560 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 478 480 482 484 485 487 489 490 492 494 496 1380 1381 1382 1383 1384 1385 1386 1387 1388
;; live  kill	
(code_label 2055 2053 2056 139 91 "" [1 uses])
(note 2056 2055 2058 139 [bb 139] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2058 2056 2059 139 (var_location:DI v0 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2059 2058 2060 139 (var_location:SI lgN (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2060 2059 2061 139 (var_location:DI val0 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2061 2060 2062 139 (var_location:DI val1 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2062 2061 2063 139 (var_location:DI x (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2063 2062 2064 139 (var_location:DI x (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2064 2063 2065 139 (var_location:DI v (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2065 2064 2066 139 (var_location:DI v0 (reg/v:DI 443 [ base_tgt ])) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2066 2065 2067 139 (var_location:SI lgN (debug_expr:SI D#53)) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2067 2066 2068 139 (var_location:DI val0 (debug_expr:DI D#54)) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2068 2067 2070 139 (var_location:DI val1 (debug_expr:DI D#55)) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2070 2068 2071 139 (var_location:DI v (reg/v:DI 443 [ base_tgt ])) generator/graph_generator.c:121 -1
     (nil))
(insn 2071 2070 2073 139 (set (reg/v:DI 478 [ v ])
        (plus:DI (reg/v:DI 443 [ base_tgt ])
            (reg:DI 519 [ D.3802 ]))) generator/graph_generator.c:122 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 519 [ D.3802 ])
        (expr_list:REG_DEAD (reg/v:DI 443 [ base_tgt ])
            (nil))))
(debug_insn 2073 2071 2074 139 (var_location:DI v (mult:DI (reg/v:DI 478 [ v ])
        (debug_expr:DI D#59))) generator/graph_generator.c:123 -1
     (nil))
(debug_insn 2074 2073 2075 139 (var_location:DI x (mult:DI (reg/v:DI 478 [ v ])
        (debug_expr:DI D#59))) generator/graph_generator.c:123 -1
     (nil))
(insn 2075 2074 2076 139 (set (reg:DI 1380 [ v ])
        (mult:DI (reg/v:DI 478 [ v ])
            (reg:DI 1905 [ D.3802 ]))) generator/graph_generator.c:82 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 521 [ D.3802 ])
        (expr_list:REG_DEAD (reg/v:DI 478 [ v ])
            (nil))))
(insn 2076 2075 2077 139 (set (reg/v:DI 480 [ x ])
        (bswap:DI (reg:DI 1380 [ v ]))) generator/graph_generator.c:82 711 {bswapdi2}
     (expr_list:REG_DEAD (reg:DI 1380 [ v ])
        (nil)))
(debug_insn 2077 2076 2078 139 (var_location:DI x (reg/v:DI 480 [ x ])) generator/graph_generator.c:82 -1
     (nil))
(insn 2078 2077 2079 139 (set (reg:DI 1381 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 480 [ x ])
            (const_int 4 [0x4]))) generator/graph_generator.c:88 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2079 2078 2080 139 (set (reg:DI 482 [ D.3802 ])
        (and:DI (reg:DI 1381 [ D.3802 ])
            (const_int 1085102592571150095 [0xf0f0f0f0f0f0f0f]))) generator/graph_generator.c:88 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1381 [ D.3802 ])
        (nil)))
(insn 2080 2079 2081 139 (set (reg:DI 1382 [ D.3802 ])
        (and:DI (reg/v:DI 480 [ x ])
            (const_int 1085102592571150095 [0xf0f0f0f0f0f0f0f]))) generator/graph_generator.c:88 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 480 [ x ])
        (nil)))
(insn 2081 2080 2082 139 (set (reg:DI 484 [ D.3802 ])
        (ashift:DI (reg:DI 1382 [ D.3802 ])
            (const_int 4 [0x4]))) generator/graph_generator.c:88 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1382 [ D.3802 ])
        (nil)))
(insn 2082 2081 2083 139 (set (reg/v:DI 485 [ x ])
        (ior:DI (reg:DI 482 [ D.3802 ])
            (reg:DI 484 [ D.3802 ]))) generator/graph_generator.c:88 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 484 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 482 [ D.3802 ])
            (nil))))
(debug_insn 2083 2082 2084 139 (var_location:DI x (reg/v:DI 485 [ x ])) generator/graph_generator.c:88 -1
     (nil))
(insn 2084 2083 2085 139 (set (reg:DI 1383 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 485 [ x ])
            (const_int 2 [0x2]))) generator/graph_generator.c:89 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2085 2084 2086 139 (set (reg:DI 487 [ D.3802 ])
        (and:DI (reg:DI 1383 [ D.3802 ])
            (const_int 3689348814741910323 [0x3333333333333333]))) generator/graph_generator.c:89 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1383 [ D.3802 ])
        (nil)))
(insn 2086 2085 2087 139 (set (reg:DI 1384 [ D.3802 ])
        (and:DI (reg/v:DI 485 [ x ])
            (const_int 3689348814741910323 [0x3333333333333333]))) generator/graph_generator.c:89 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 485 [ x ])
        (nil)))
(insn 2087 2086 2088 139 (set (reg:DI 489 [ D.3802 ])
        (ashift:DI (reg:DI 1384 [ D.3802 ])
            (const_int 2 [0x2]))) generator/graph_generator.c:89 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1384 [ D.3802 ])
        (nil)))
(insn 2088 2087 2089 139 (set (reg/v:DI 490 [ x ])
        (ior:DI (reg:DI 487 [ D.3802 ])
            (reg:DI 489 [ D.3802 ]))) generator/graph_generator.c:89 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 489 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 487 [ D.3802 ])
            (nil))))
(debug_insn 2089 2088 2090 139 (var_location:DI x (reg/v:DI 490 [ x ])) generator/graph_generator.c:89 -1
     (nil))
(insn 2090 2089 2091 139 (set (reg:DI 1385 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 490 [ x ])
            (const_int 1 [0x1]))) generator/graph_generator.c:90 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2091 2090 2092 139 (set (reg:DI 492 [ D.3802 ])
        (and:DI (reg:DI 1385 [ D.3802 ])
            (const_int 6148914691236517205 [0x5555555555555555]))) generator/graph_generator.c:90 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1385 [ D.3802 ])
        (nil)))
(insn 2092 2091 2093 139 (set (reg:DI 1386 [ D.3802 ])
        (and:DI (reg/v:DI 490 [ x ])
            (const_int 6148914691236517205 [0x5555555555555555]))) generator/graph_generator.c:90 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 490 [ x ])
        (nil)))
(insn 2093 2092 2095 139 (set (reg:DI 494 [ D.3802 ])
        (ashift:DI (reg:DI 1386 [ D.3802 ])
            (const_int 1 [0x1]))) generator/graph_generator.c:90 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1386 [ D.3802 ])
        (nil)))
(debug_insn 2095 2093 2096 139 (var_location:DI x (clobber (const_int 0 [0]))) generator/graph_generator.c:124 -1
     (nil))
(insn 2096 2095 2097 139 (set (reg:DI 1387 [ x ])
        (ior:DI (reg:DI 492 [ D.3802 ])
            (reg:DI 494 [ D.3802 ]))) generator/graph_generator.c:124 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 494 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 492 [ D.3802 ])
            (nil))))
(insn 2097 2096 2098 139 (set (reg/v:DI 496 [ v ])
        (lshiftrt:DI (reg:DI 1387 [ x ])
            (subreg:QI (reg:SI 539 [ D.3797 ]) 0))) generator/graph_generator.c:124 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1387 [ x ])
        (nil)))
(debug_insn 2098 2097 2100 139 (var_location:DI v (reg/v:DI 496 [ v ])) generator/graph_generator.c:124 -1
     (nil))
(insn 2100 2098 2101 139 (set (reg:DI 1388 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 496 [ v ])
            (subreg:QI (reg:SI 261 [ D.3797 ]) 0))) generator/graph_generator.c:125 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2101 2100 2102 139 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1388 [ D.3802 ])
            (const_int 0 [0]))) generator/graph_generator.c:125 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1388 [ D.3802 ])
        (nil)))
(jump_insn 2102 2101 2103 139 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2099)
            (pc))) generator/graph_generator.c:125 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 2099)
;;  succ:       136 [0.0%]  (LOOP_EXIT)
;;              140 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 140, loop depth 0, count 0, freq 16
;;  prev block 139, next block 141, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       139 [100.0%]  (FALLTHRU)
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u1944(29){ }u1945(31){ }u1946(64){ }u1947(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 261 496 539 1907
;; lr  def 	 66 [cc] 499 501 503 504 506 508 509 511 513 515 1389 1390 1391 1392 1393 1394 1395 1396 1397
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 496 539 560 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc] 499 501 503 504 506 508 509 511 513 515 1389 1390 1391 1392 1393 1394 1395 1396 1397
;; live  kill	
(note 2103 2102 2104 140 [bb 140] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2104 2103 2105 140 (var_location:DI v (mult:DI (reg/v:DI 496 [ v ])
        (debug_expr:DI D#58))) generator/graph_generator.c:126 -1
     (nil))
(debug_insn 2105 2104 2106 140 (var_location:DI x (mult:DI (reg/v:DI 496 [ v ])
        (debug_expr:DI D#58))) generator/graph_generator.c:126 -1
     (nil))
(insn 2106 2105 2107 140 (set (reg:DI 1389 [ v ])
        (mult:DI (reg/v:DI 496 [ v ])
            (reg:DI 1907 [ D.3802 ]))) generator/graph_generator.c:82 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 542 [ D.3802 ])
        (expr_list:REG_DEAD (reg/v:DI 496 [ v ])
            (nil))))
(insn 2107 2106 2108 140 (set (reg/v:DI 499 [ x ])
        (bswap:DI (reg:DI 1389 [ v ]))) generator/graph_generator.c:82 711 {bswapdi2}
     (expr_list:REG_DEAD (reg:DI 1389 [ v ])
        (nil)))
(debug_insn 2108 2107 2109 140 (var_location:DI x (reg/v:DI 499 [ x ])) generator/graph_generator.c:82 -1
     (nil))
(insn 2109 2108 2110 140 (set (reg:DI 1390 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 499 [ x ])
            (const_int 4 [0x4]))) generator/graph_generator.c:88 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2110 2109 2111 140 (set (reg:DI 501 [ D.3802 ])
        (and:DI (reg:DI 1390 [ D.3802 ])
            (const_int 1085102592571150095 [0xf0f0f0f0f0f0f0f]))) generator/graph_generator.c:88 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1390 [ D.3802 ])
        (nil)))
(insn 2111 2110 2112 140 (set (reg:DI 1391 [ D.3802 ])
        (and:DI (reg/v:DI 499 [ x ])
            (const_int 1085102592571150095 [0xf0f0f0f0f0f0f0f]))) generator/graph_generator.c:88 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 499 [ x ])
        (nil)))
(insn 2112 2111 2113 140 (set (reg:DI 503 [ D.3802 ])
        (ashift:DI (reg:DI 1391 [ D.3802 ])
            (const_int 4 [0x4]))) generator/graph_generator.c:88 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1391 [ D.3802 ])
        (nil)))
(insn 2113 2112 2114 140 (set (reg/v:DI 504 [ x ])
        (ior:DI (reg:DI 501 [ D.3802 ])
            (reg:DI 503 [ D.3802 ]))) generator/graph_generator.c:88 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 503 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 501 [ D.3802 ])
            (nil))))
(debug_insn 2114 2113 2115 140 (var_location:DI x (reg/v:DI 504 [ x ])) generator/graph_generator.c:88 -1
     (nil))
(insn 2115 2114 2116 140 (set (reg:DI 1392 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 504 [ x ])
            (const_int 2 [0x2]))) generator/graph_generator.c:89 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2116 2115 2117 140 (set (reg:DI 506 [ D.3802 ])
        (and:DI (reg:DI 1392 [ D.3802 ])
            (const_int 3689348814741910323 [0x3333333333333333]))) generator/graph_generator.c:89 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1392 [ D.3802 ])
        (nil)))
(insn 2117 2116 2118 140 (set (reg:DI 1393 [ D.3802 ])
        (and:DI (reg/v:DI 504 [ x ])
            (const_int 3689348814741910323 [0x3333333333333333]))) generator/graph_generator.c:89 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 504 [ x ])
        (nil)))
(insn 2118 2117 2119 140 (set (reg:DI 508 [ D.3802 ])
        (ashift:DI (reg:DI 1393 [ D.3802 ])
            (const_int 2 [0x2]))) generator/graph_generator.c:89 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1393 [ D.3802 ])
        (nil)))
(insn 2119 2118 2120 140 (set (reg/v:DI 509 [ x ])
        (ior:DI (reg:DI 506 [ D.3802 ])
            (reg:DI 508 [ D.3802 ]))) generator/graph_generator.c:89 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 508 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 506 [ D.3802 ])
            (nil))))
(debug_insn 2120 2119 2121 140 (var_location:DI x (reg/v:DI 509 [ x ])) generator/graph_generator.c:89 -1
     (nil))
(insn 2121 2120 2122 140 (set (reg:DI 1394 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 509 [ x ])
            (const_int 1 [0x1]))) generator/graph_generator.c:90 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2122 2121 2123 140 (set (reg:DI 511 [ D.3802 ])
        (and:DI (reg:DI 1394 [ D.3802 ])
            (const_int 6148914691236517205 [0x5555555555555555]))) generator/graph_generator.c:90 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1394 [ D.3802 ])
        (nil)))
(insn 2123 2122 2124 140 (set (reg:DI 1395 [ D.3802 ])
        (and:DI (reg/v:DI 509 [ x ])
            (const_int 6148914691236517205 [0x5555555555555555]))) generator/graph_generator.c:90 468 {anddi3}
     (expr_list:REG_DEAD (reg/v:DI 509 [ x ])
        (nil)))
(insn 2124 2123 2126 140 (set (reg:DI 513 [ D.3802 ])
        (ashift:DI (reg:DI 1395 [ D.3802 ])
            (const_int 1 [0x1]))) generator/graph_generator.c:90 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1395 [ D.3802 ])
        (nil)))
(debug_insn 2126 2124 2127 140 (var_location:DI x (clobber (const_int 0 [0]))) generator/graph_generator.c:127 -1
     (nil))
(insn 2127 2126 2128 140 (set (reg:DI 1396 [ x ])
        (ior:DI (reg:DI 511 [ D.3802 ])
            (reg:DI 513 [ D.3802 ]))) generator/graph_generator.c:127 469 {iordi3}
     (expr_list:REG_DEAD (reg:DI 513 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 511 [ D.3802 ])
            (nil))))
(insn 2128 2127 2129 140 (set (reg/v:DI 515 [ v ])
        (lshiftrt:DI (reg:DI 1396 [ x ])
            (subreg:QI (reg:SI 539 [ D.3797 ]) 0))) generator/graph_generator.c:127 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1396 [ x ])
        (expr_list:REG_DEAD (reg:SI 539 [ D.3797 ])
            (nil))))
(debug_insn 2129 2128 2131 140 (var_location:DI v (reg/v:DI 515 [ v ])) generator/graph_generator.c:127 -1
     (nil))
(insn 2131 2129 2132 140 (set (reg:DI 1397 [ D.3802 ])
        (lshiftrt:DI (reg/v:DI 515 [ v ])
            (subreg:QI (reg:SI 261 [ D.3797 ]) 0))) generator/graph_generator.c:128 637 {*aarch64_lshr_sisd_or_int_di3}
     (nil))
(insn 2132 2131 2133 140 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1397 [ D.3802 ])
            (const_int 0 [0]))) generator/graph_generator.c:128 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1397 [ D.3802 ])
        (nil)))
(jump_insn 2133 2132 2134 140 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2130)
            (pc))) generator/graph_generator.c:128 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 2130)
;;  succ:       138 [0.0%]  (LOOP_EXIT)
;;              141 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 141, loop depth 0, count 0, freq 16
;;  prev block 140, next block 142, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       140 [100.0%]  (FALLTHRU)
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u1983(29){ }u1984(31){ }u1985(64){ }u1986(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 435 515 560 576
;; lr  def 	 435 576
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 515 560 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 435 576
;; live  kill	
(note 2134 2133 2135 141 [bb 141] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2135 2134 2136 141 (var_location:DI v0 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2136 2135 2137 141 (var_location:SI lgN (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2137 2136 2138 141 (var_location:DI val0 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2138 2137 2139 141 (var_location:DI val1 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2139 2138 2140 141 (var_location:DI x (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2140 2139 2141 141 (var_location:DI x (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2141 2140 2142 141 (var_location:DI v (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2142 2141 2143 141 (var_location:DI p (debug_expr:DI D#36)) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2143 2142 2144 141 (var_location:DI v0 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2144 2143 2146 141 (var_location:DI v1 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(insn 2146 2144 2147 141 (set (mem:DI (reg:DI 576 [ ivtmp.134 ]) [4 MEM[base: _513, offset: 0B]+0 S8 A64])
        (reg/v:DI 560 [ v ])) generator/graph_generator.h:65 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v:DI 560 [ v ])
        (nil)))
(insn 2147 2146 2148 141 (set (mem:DI (plus:DI (reg:DI 576 [ ivtmp.134 ])
                (const_int 8 [0x8])) [4 MEM[base: _513, offset: 8B]+0 S8 A64])
        (reg/v:DI 515 [ v ])) generator/graph_generator.h:66 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v:DI 515 [ v ])
        (nil)))
(debug_insn 2148 2147 2149 141 (var_location:DI p (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2149 2148 2150 141 (var_location:DI v0 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2150 2149 2151 141 (var_location:DI v1 (clobber (const_int 0 [0]))) generator/graph_generator.c:154 -1
     (nil))
(debug_insn 2151 2150 2152 141 (var_location:DI nverts (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2152 2151 2153 141 (var_location:SI lgN (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2153 2152 2154 141 (var_location:DI st (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2154 2153 2155 141 (var_location:DI result (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2155 2154 2156 141 (var_location:DI val0 (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2156 2155 2157 141 (var_location:DI val1 (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2157 2156 2158 141 (var_location:DI base_src (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2158 2157 2159 141 (var_location:DI base_tgt (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2159 2158 2160 141 (var_location:SI square (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(debug_insn 2160 2159 2161 141 (var_location:SI tgt_offset (clobber (const_int 0 [0]))) generator/graph_generator.c:196 -1
     (nil))
(insn 2161 2160 2162 141 (set (reg/v:DI 435 [ start_edge ])
        (plus:DI (reg/v:DI 435 [ start_edge ])
            (const_int 1 [0x1]))) generator/graph_generator.c:193 95 {*adddi3_aarch64}
     (nil))
(debug_insn 2162 2161 2163 141 (var_location:DI ei (reg/v:DI 435 [ start_edge ])) generator/graph_generator.c:193 -1
     (nil))
(insn 2163 2162 2164 141 (set (reg:DI 576 [ ivtmp.134 ])
        (plus:DI (reg:DI 576 [ ivtmp.134 ])
            (const_int 16 [0x10]))) 95 {*adddi3_aarch64}
     (nil))
;;  succ:       142 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 142, loop depth 0, count 0, freq 21
;;  prev block 141, next block 143, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       98 [100.0%]  (FALLTHRU)
;;              141 [100.0%]  (FALLTHRU,DFS_BACK)
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u1995(29){ }u1996(31){ }u1997(64){ }u1998(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 435
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 2164 2163 2165 142 69 "" [0 uses])
(note 2165 2164 2166 142 [bb 142] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2166 2165 2168 142 (var_location:DI ei (reg/v:DI 435 [ start_edge ])) -1
     (nil))
(insn 2168 2166 2169 142 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 245 [ desired_nedge ])
            (reg/v:DI 435 [ start_edge ]))) generator/graph_generator.c:193 391 {*cmpdi}
     (nil))
(jump_insn 2169 2168 2170 142 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2167)
            (pc))) generator/graph_generator.c:193 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 2167)
;;  succ:       99 [91.0%] 
;;              143 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1710 1853 1854 1859 1862 1863 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 447 576 1853 1854 1859 1862 1863 1903 1905 1907

;; basic block 143, loop depth 0, count 0, freq 2
;;  prev block 142, next block 144, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       142 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u2003(29){ }u2004(31){ }u2005(64){ }u2006(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 263 1398
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 32 [v0] 263 1398
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2170 2169 2171 143 [bb 143] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2171 2170 2172 143 (var_location:DI D#18 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 2172 2171 2173 143 (var_location:DI state$z1 (debug_expr:DI D#18)) -1
     (nil))
(debug_insn 2173 2172 2174 143 (var_location:DI D#19 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 2174 2173 2175 143 (var_location:DI state$z2 (debug_expr:DI D#19)) -1
     (nil))
(debug_insn 2175 2174 2176 143 (var_location:DI D#20 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 2176 2175 2177 143 (var_location:DI state$z3 (debug_expr:DI D#20)) -1
     (nil))
(debug_insn 2177 2176 2178 143 (var_location:DI D#21 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 2178 2177 2179 143 (var_location:DI state$z4 (debug_expr:DI D#21)) -1
     (nil))
(debug_insn 2179 2178 2180 143 (var_location:DI D#22 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 2180 2179 2181 143 (var_location:DI state$z5 (debug_expr:DI D#22)) -1
     (nil))
(debug_insn 2181 2180 2182 143 (var_location:DI seed (clobber (const_int 0 [0]))) generator/make_graph.c:58 -1
     (nil))
(debug_insn 2182 2181 2183 143 (var_location:SI logN (clobber (const_int 0 [0]))) generator/make_graph.c:58 -1
     (nil))
(debug_insn 2183 2182 2184 143 (var_location:DI end_edge (clobber (const_int 0 [0]))) generator/make_graph.c:58 -1
     (nil))
(debug_insn 2184 2183 2185 143 (var_location:DI edges (clobber (const_int 0 [0]))) generator/make_graph.c:58 -1
     (nil))
(debug_insn 2185 2184 2186 143 (var_location:DI nverts (clobber (const_int 0 [0]))) generator/make_graph.c:58 -1
     (nil))
(debug_insn 2186 2185 2187 143 (var_location:DI val0 (clobber (const_int 0 [0]))) generator/make_graph.c:58 -1
     (nil))
(debug_insn 2187 2186 2188 143 (var_location:DI val1 (clobber (const_int 0 [0]))) generator/make_graph.c:58 -1
     (nil))
(debug_insn 2188 2187 2189 143 (var_location:DI start_edge (clobber (const_int 0 [0]))) generator/make_graph.c:58 -1
     (nil))
(debug_insn 2189 2188 2190 143 (var_location:SI log_numverts (clobber (const_int 0 [0]))) graph500.c:89 -1
     (nil))
(debug_insn 2190 2189 2191 143 (var_location:DI M (clobber (const_int 0 [0]))) graph500.c:89 -1
     (nil))
(debug_insn 2191 2190 2192 143 (var_location:DI userseed1 (clobber (const_int 0 [0]))) graph500.c:89 -1
     (nil))
(debug_insn 2192 2191 2193 143 (var_location:DI userseed2 (clobber (const_int 0 [0]))) graph500.c:89 -1
     (nil))
(debug_insn 2193 2192 2194 143 (var_location:DI edges (clobber (const_int 0 [0]))) graph500.c:89 -1
     (nil))
(debug_insn 2194 2193 2195 143 (var_location:DI nedges_ptr_in (clobber (const_int 0 [0]))) graph500.c:89 -1
     (nil))
(debug_insn 2195 2194 2196 143 (var_location:DI result_ptr_in (clobber (const_int 0 [0]))) graph500.c:89 -1
     (nil))
(call_insn 2196 2195 2197 143 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("toc") [flags 0x43]  <function_decl 0x7f3c5e239700 toc>) [0 toc S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:89 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("toc") [flags 0x43]  <function_decl 0x7f3c5e239700 toc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 2197 2196 2199 143 (set (reg:DF 263 [ D.3804 ])
        (reg:DF 32 v0)) graph500.c:89 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 2199 2197 2200 143 (set (reg/f:DI 1398)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:89 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 2200 2199 2201 143 (set (mem/c:DF (plus:DI (reg/f:DI 1398)
                (const_int 96 [0x60])) [1 generation_time+0 S8 A64])
        (reg:DF 263 [ D.3804 ])) graph500.c:89 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1398)
        (expr_list:REG_DEAD (reg:DF 263 [ D.3804 ])
            (nil))))
;;  succ:       144 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

;; basic block 144, loop depth 0, count 0, freq 7
;;  prev block 143, next block 146, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       97 [100.0%]  (FALLTHRU)
;;              143 [100.0%]  (FALLTHRU)
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u2012(29){ }u2013(31){ }u2014(64){ }u2015(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1402
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 1402
;; live  kill	
(code_label 2201 2200 2202 144 68 "" [0 uses])
(note 2202 2201 2205 144 [bb 144] NOTE_INSN_BASIC_BLOCK)
(insn 2205 2202 2206 144 (set (reg:SI 1402 [ VERBOSE ])
        (mem/c:SI (lo_sum:DI (reg/f:DI 1853)
                (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])) graph500.c:91 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])
        (nil)))
(insn 2206 2205 2207 144 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1402 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:91 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1402 [ VERBOSE ])
        (nil)))
(jump_insn 2207 2206 2211 144 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2211)
            (pc))) graph500.c:91 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 2211)
;;  succ:       146 [29.0%] 
;;              155 [71.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

;; basic block 146, loop depth 0, count 0, freq 2
;;  prev block 144, next block 147, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       144 [29.0%] 
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u2020(29){ }u2021(31){ }u2022(64){ }u2023(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1403 1404 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1403 1404 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2211 2207 2212 146 95 "" [1 uses])
(note 2212 2211 2213 146 [bb 146] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2213 2212 2214 146 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:91 -1
     (nil))
(debug_insn 2214 2213 2215 146 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>)) graph500.c:91 -1
     (nil))
(insn 2215 2214 2216 146 (set (reg/f:DI 1404)
        (high:DI (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2216 2215 2217 146 (set (reg/f:DI 1403)
        (lo_sum:DI (reg/f:DI 1404)
            (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1404)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>)
            (nil))))
(insn 2217 2216 2219 146 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:91 48 {*movdi_aarch64}
     (nil))
(insn 2219 2217 2220 146 (set (reg:DI 2 x2)
        (reg/f:DI 1403)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1403)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC40") [flags 0x82]  <var_decl 0x7f3c5d881000 *.LC40>)
            (nil))))
(insn 2220 2219 2221 146 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2221 2220 2222 146 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 2222 2221 2225 146 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
;;  succ:       152 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

;; basic block 147, loop depth 0, count 0, freq 22
;;  prev block 146, next block 148, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       92 [69.8%] 
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u2032(29){ }u2033(31){ }u2034(64){ }u2035(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246 1143 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 283
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 246 1143 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 66 [cc] 283
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2225 2222 2226 147 65 "" [1 uses])
(note 2226 2225 2227 147 [bb 147] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2227 2226 2228 147 (var_location:DI __path (reg/f:DI 246 [ D.3800 ])) graph500.c:95 -1
     (nil))
(debug_insn 2228 2227 2229 147 (var_location:SI __oflag (const_int 0 [0])) graph500.c:95 -1
     (nil))
(insn 2229 2228 2230 147 (set (reg:SI 1 x1)
        (const_int 0 [0])) /usr/aarch64-linux-gnu/include/bits/fcntl2.h:53 47 {*movsi_aarch64}
     (nil))
(insn 2230 2229 2231 147 (set (reg:DI 0 x0)
        (reg/f:DI 246 [ D.3800 ])) /usr/aarch64-linux-gnu/include/bits/fcntl2.h:53 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 246 [ D.3800 ])
        (nil)))
(call_insn 2231 2230 2232 147 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("*open64") [flags 0x41]  <function_decl 0x7f3c5e24c300 __open_alias>) [0 __open_alias S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/fcntl2.h:53 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 x1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("*open64") [flags 0x41]  <function_decl 0x7f3c5e24c300 __open_alias>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (nil))))))
(insn 2232 2231 2233 147 (set (reg:SI 283 [ D.3797 ])
        (reg:SI 0 x0)) /usr/aarch64-linux-gnu/include/bits/fcntl2.h:53 47 {*movsi_aarch64}
     (nil))
(debug_insn 2233 2232 2234 147 (var_location:DI __path (clobber (const_int 0 [0]))) graph500.c:95 -1
     (nil))
(debug_insn 2234 2233 2235 147 (var_location:SI __oflag (clobber (const_int 0 [0]))) graph500.c:95 -1
     (nil))
(debug_insn 2235 2234 2236 147 (var_location:SI fd (clobber (const_int 0 [0]))) graph500.c:95 -1
     (nil))
(insn 2236 2235 2237 147 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 283 [ D.3797 ])
            (const_int 0 [0]))) graph500.c:95 390 {*cmpsi}
     (nil))
(jump_insn 2237 2236 2238 147 (set (pc)
        (if_then_else (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2245)
            (pc))) graph500.c:95 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9119 (nil)))
 -> 2245)
;;  succ:       148 [8.8%]  (FALLTHRU)
;;              149 [91.2%] 
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1710 1853 1854 1862
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1853 1854 1862

;; basic block 148, loop depth 0, count 0, freq 2
;;  prev block 147, next block 149, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       147 [8.8%]  (FALLTHRU)
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u2044(29){ }u2045(31){ }u2046(64){ }u2047(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1407 1408
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 240 1407 1408
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2238 2237 2239 148 [bb 148] NOTE_INSN_BASIC_BLOCK)
(insn 2239 2238 2240 148 (set (reg/f:DI 1408)
        (high:DI (symbol_ref/f:DI ("*.LC41") [flags 0x82]  <var_decl 0x7f3c5d881090 *.LC41>))) graph500.c:96 48 {*movdi_aarch64}
     (nil))
(insn 2240 2239 2241 148 (set (reg/f:DI 1407)
        (lo_sum:DI (reg/f:DI 1408)
            (symbol_ref/f:DI ("*.LC41") [flags 0x82]  <var_decl 0x7f3c5d881090 *.LC41>))) graph500.c:96 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1408)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC41") [flags 0x82]  <var_decl 0x7f3c5d881090 *.LC41>)
            (nil))))
(insn 2241 2240 2242 148 (set (reg:DI 0 x0)
        (reg/f:DI 1407)) graph500.c:96 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1407)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC41") [flags 0x82]  <var_decl 0x7f3c5d881090 *.LC41>)
            (nil))))
(call_insn 2242 2241 265 148 (parallel [
            (call (mem:DI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>) [0 perror S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:96 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 265 2242 2245 148 (set (reg:SI 240 [ D.3797 ])
        (const_int 1 [0x1])) graph500.c:97 47 {*movsi_aarch64}
     (nil))
;;  succ:       323 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

;; basic block 149, loop depth 0, count 0, freq 20
;;  prev block 148, next block 150, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       147 [91.2%] 
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u2052(29){ }u2053(31){ }u2054(64){ }u2055(65){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1710 1853 1854 1862
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1143
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 269 285 1411
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1143 1853 1854 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 269 285 1411
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2245 265 2246 149 98 "" [1 uses])
(note 2246 2245 2249 149 [bb 149] NOTE_INSN_BASIC_BLOCK)
(insn 2249 2246 2250 149 (set (reg:DI 1411 [ nedge ])
        (mem/c:DI (plus:DI (reg/f:DI 1143)
                (const_int 80 [0x50])) [4 nedge+0 S8 A64])) graph500.c:99 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                    (const_int 80 [0x50]))) [4 nedge+0 S8 A64])
        (nil)))
(insn 2250 2249 2251 149 (set (reg:DI 269 [ D.3802 ])
        (ashift:DI (reg:DI 1411 [ nedge ])
            (const_int 4 [0x4]))) graph500.c:99 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1411 [ nedge ])
        (nil)))
(debug_insn 2251 2250 2252 149 (var_location:DI sz (reg:DI 269 [ D.3802 ])) graph500.c:99 -1
     (nil))
(debug_insn 2252 2251 2253 149 (var_location:SI __fd (reg:SI 283 [ D.3797 ])) graph500.c:100 -1
     (nil))
(debug_insn 2253 2252 2254 149 (var_location:DI __buf (mem/f/c:DI (symbol_ref:DI ("IJ") [flags 0x82]  <var_decl 0x7f3c5e2541b0 IJ>) [2 IJ+0 S8 A64])) graph500.c:100 -1
     (nil))
(debug_insn 2254 2253 2257 149 (var_location:DI __nbytes (reg:DI 269 [ D.3802 ])) graph500.c:100 -1
     (nil))
(insn 2257 2254 2258 149 (set (reg:DI 2 x2)
        (reg:DI 269 [ D.3802 ])) /usr/aarch64-linux-gnu/include/bits/unistd.h:44 48 {*movdi_aarch64}
     (nil))
(insn 2258 2257 2260 149 (set (reg:DI 1 x1)
        (mem/f/c:DI (plus:DI (reg/f:DI 1143)
                (const_int 88 [0x58])) [2 IJ+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/unistd.h:44 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1143)
        (expr_list:REG_EQUAL (mem/f/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                        (const_int 88 [0x58]))) [2 IJ+0 S8 A64])
            (nil))))
(call_insn 2260 2258 2261 149 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x7f3c5e24c100 __read_alias>) [0 __read_alias S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/unistd.h:44 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("*read") [flags 0x41]  <function_decl 0x7f3c5e24c100 __read_alias>)
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(insn 2261 2260 2262 149 (set (reg:DI 285 [ D.3798 ])
        (reg:DI 0 x0)) /usr/aarch64-linux-gnu/include/bits/unistd.h:44 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(debug_insn 2262 2261 2263 149 (var_location:SI __fd (clobber (const_int 0 [0]))) graph500.c:100 -1
     (nil))
(debug_insn 2263 2262 2264 149 (var_location:DI __buf (clobber (const_int 0 [0]))) graph500.c:100 -1
     (nil))
(debug_insn 2264 2263 2265 149 (var_location:DI __nbytes (clobber (const_int 0 [0]))) graph500.c:100 -1
     (nil))
(insn 2265 2264 2266 149 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 269 [ D.3802 ])
            (reg:DI 285 [ D.3798 ]))) graph500.c:100 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 285 [ D.3798 ])
        (expr_list:REG_DEAD (reg:DI 269 [ D.3802 ])
            (nil))))
(jump_insn 2266 2265 2267 149 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2274)
            (pc))) graph500.c:100 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3782 (nil)))
 -> 2274)
;;  succ:       150 [62.2%]  (FALLTHRU)
;;              151 [37.8%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1710 1853 1854 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1853 1854 1862

;; basic block 150, loop depth 0, count 0, freq 13
;;  prev block 149, next block 151, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       149 [62.2%]  (FALLTHRU)
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u2076(29){ }u2077(31){ }u2078(64){ }u2079(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1414 1415
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 240 1414 1415
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2267 2266 2268 150 [bb 150] NOTE_INSN_BASIC_BLOCK)
(insn 2268 2267 2269 150 (set (reg/f:DI 1415)
        (high:DI (symbol_ref/f:DI ("*.LC42") [flags 0x82]  <var_decl 0x7f3c5d881120 *.LC42>))) graph500.c:101 48 {*movdi_aarch64}
     (nil))
(insn 2269 2268 2270 150 (set (reg/f:DI 1414)
        (lo_sum:DI (reg/f:DI 1415)
            (symbol_ref/f:DI ("*.LC42") [flags 0x82]  <var_decl 0x7f3c5d881120 *.LC42>))) graph500.c:101 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1415)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC42") [flags 0x82]  <var_decl 0x7f3c5d881120 *.LC42>)
            (nil))))
(insn 2270 2269 2271 150 (set (reg:DI 0 x0)
        (reg/f:DI 1414)) graph500.c:101 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1414)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC42") [flags 0x82]  <var_decl 0x7f3c5d881120 *.LC42>)
            (nil))))
(call_insn 2271 2270 266 150 (parallel [
            (call (mem:DI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>) [0 perror S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:101 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 266 2271 2274 150 (set (reg:SI 240 [ D.3797 ])
        (const_int 1 [0x1])) graph500.c:102 47 {*movsi_aarch64}
     (nil))
;;  succ:       323 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

;; basic block 151, loop depth 0, count 0, freq 8
;;  prev block 150, next block 152, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       149 [37.8%] 
;; bb 151 artificial_defs: { }
;; bb 151 artificial_uses: { u2084(29){ }u2085(31){ }u2086(64){ }u2087(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1710 1853 1854 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1859
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 283 1853 1854 1862
;; live  gen 	 0 [x0] 1859
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2274 266 2275 151 100 "" [1 uses])
(note 2275 2274 2276 151 [bb 151] NOTE_INSN_BASIC_BLOCK)
(insn 2276 2275 2277 151 (set (reg:SI 0 x0)
        (reg:SI 283 [ D.3797 ])) graph500.c:104 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 283 [ D.3797 ])
        (nil)))
(call_insn 2277 2276 4200 151 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("close") [flags 0x41]  <function_decl 0x7f3c5e239900 close>) [0 close S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:104 42 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("close") [flags 0x41]  <function_decl 0x7f3c5e239900 close>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
(insn 4200 2277 2278 151 (set (reg/f:DI 1859)
        (high:DI (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))) -1
     (nil))
;;  succ:       152 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

;; basic block 152, loop depth 0, count 0, freq 9
;;  prev block 151, next block 154, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       151 [100.0%]  (FALLTHRU)
;;              146 [100.0%]  (FALLTHRU)
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u2091(29){ }u2092(31){ }u2093(64){ }u2094(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 1418
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 1418
;; live  kill	
(code_label 2278 4200 2279 152 97 "" [0 uses])
(note 2279 2278 2283 152 [bb 152] NOTE_INSN_BASIC_BLOCK)
(insn 2283 2279 2284 152 (set (reg:SI 1418 [ VERBOSE ])
        (mem/c:SI (lo_sum:DI (reg/f:DI 1853)
                (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])) graph500.c:124 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])
        (nil)))
(insn 2284 2283 2285 152 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1418 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:124 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1418 [ VERBOSE ])
        (nil)))
(jump_insn 2285 2284 2286 152 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 2297)
            (pc))) graph500.c:124 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5504 (nil)))
 -> 2297)
;;  succ:       154 [45.0%]  (FALLTHRU)
;;              155 [55.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

;; basic block 154, loop depth 0, count 0, freq 4
;;  prev block 152, next block 155, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       152 [45.0%]  (FALLTHRU)
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u2099(29){ }u2100(31){ }u2101(64){ }u2102(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1419 1420 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1419 1420 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2286 2285 2287 154 [bb 154] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2287 2286 2288 154 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:124 -1
     (nil))
(debug_insn 2288 2287 2289 154 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>)) graph500.c:124 -1
     (nil))
(insn 2289 2288 2290 154 (set (reg/f:DI 1420)
        (high:DI (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2290 2289 2291 154 (set (reg/f:DI 1419)
        (lo_sum:DI (reg/f:DI 1420)
            (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1420)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>)
            (nil))))
(insn 2291 2290 2293 154 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:124 48 {*movdi_aarch64}
     (nil))
(insn 2293 2291 2294 154 (set (reg:DI 2 x2)
        (reg/f:DI 1419)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1419)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC43") [flags 0x82]  <var_decl 0x7f3c5d8811b0 *.LC43>)
            (nil))))
(insn 2294 2293 2295 154 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2295 2294 2296 154 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 2296 2295 2297 154 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
;;  succ:       155 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

;; basic block 155, loop depth 0, count 0, freq 14
;;  prev block 154, next block 157, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       154 [100.0%]  (FALLTHRU)
;;              144 [71.0%]  (FALLTHRU)
;;              152 [55.0%] 
;; bb 155 artificial_defs: { }
;; bb 155 artificial_uses: { u2111(29){ }u2112(31){ }u2113(64){ }u2114(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1859
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 566 567 1423 1425 1433
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 32 [v0] 66 [cc] 566 567 1423 1425 1433
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2297 2296 2298 155 96 "" [1 uses])
(note 2298 2297 2300 155 [bb 155] NOTE_INSN_BASIC_BLOCK)
(insn 2300 2298 2301 155 (set (reg/f:DI 1423)
        (lo_sum:DI (reg/f:DI 1859)
            (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))) timer.c:43 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
        (nil)))
(insn 2301 2300 2302 155 (set (reg:DI 1 x1)
        (reg/f:DI 1423)) timer.c:43 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1423)
        (expr_list:REG_EQUAL (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
            (nil))))
(insn 2302 2301 2303 155 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) timer.c:43 47 {*movsi_aarch64}
     (nil))
(call_insn 2303 2302 2305 155 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>) [0 clock_gettime S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) timer.c:43 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_UNUSED (reg:SI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 2305 2303 2308 155 (set (reg/f:DI 1425)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:125 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 2308 2305 2309 155 (set (reg:DI 1 x1)
        (mem/c:DI (plus:DI (reg/f:DI 1425)
                (const_int 80 [0x50])) [4 nedge+0 S8 A64])) graph500.c:125 48 {*movdi_aarch64}
     (nil))
(insn 2309 2308 2310 155 (set (reg:DI 0 x0)
        (mem/f/c:DI (plus:DI (reg/f:DI 1425)
                (const_int 88 [0x58])) [2 IJ+0 S8 A64])) graph500.c:125 48 {*movdi_aarch64}
     (nil))
(call_insn 2310 2309 2311 155 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("create_graph_from_edgelist") [flags 0x43]  <function_decl 0x7f3c5e24ca00 create_graph_from_edgelist>) [0 create_graph_from_edgelist S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:125 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("create_graph_from_edgelist") [flags 0x43]  <function_decl 0x7f3c5e24ca00 create_graph_from_edgelist>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 2311 2310 2312 155 (set (reg/v:SI 566 [ err ])
        (reg:SI 0 x0)) graph500.c:125 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (nil)))
(debug_insn 2312 2311 2313 155 (var_location:SI err (reg/v:SI 566 [ err ])) graph500.c:125 -1
     (nil))
(call_insn 2313 2312 2314 155 (parallel [
            (set (reg:DF 32 v0)
                (call (mem:DI (symbol_ref:DI ("toc") [flags 0x43]  <function_decl 0x7f3c5e239700 toc>) [0 toc S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:125 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("toc") [flags 0x43]  <function_decl 0x7f3c5e239700 toc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(insn 2314 2313 2317 155 (set (reg:DF 567 [ D.3804 ])
        (reg:DF 32 v0)) graph500.c:125 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg:DF 32 v0)
        (nil)))
(insn 2317 2314 2320 155 (set (mem/c:DF (plus:DI (reg/f:DI 1425)
                (const_int 104 [0x68])) [1 construction_time+0 S8 A64])
        (reg:DF 567 [ D.3804 ])) graph500.c:125 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1425)
        (expr_list:REG_DEAD (reg:DF 567 [ D.3804 ])
            (nil))))
(insn 2320 2317 2321 155 (set (reg:SI 1433 [ VERBOSE ])
        (mem/c:SI (lo_sum:DI (reg/f:DI 1853)
                (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])) [3 VERBOSE+0 S4 A32])) graph500.c:126 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (mem/c:SI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]) [3 VERBOSE+0 S4 A32])
        (nil)))
(insn 2321 2320 2322 155 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1433 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:126 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1433 [ VERBOSE ])
        (nil)))
(jump_insn 2322 2321 2323 155 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 2334)
            (pc))) graph500.c:126 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 2334)
;;  succ:       157 [29.0%]  (FALLTHRU)
;;              158 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862

;; basic block 157, loop depth 0, count 0, freq 4
;;  prev block 155, next block 158, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       155 [29.0%]  (FALLTHRU)
;; bb 157 artificial_defs: { }
;; bb 157 artificial_uses: { u2141(29){ }u2142(31){ }u2143(64){ }u2144(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1434 1435 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1434 1435 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2323 2322 2324 157 [bb 157] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2324 2323 2325 157 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:126 -1
     (nil))
(debug_insn 2325 2324 2326 157 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>)) graph500.c:126 -1
     (nil))
(insn 2326 2325 2327 157 (set (reg/f:DI 1435)
        (high:DI (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2327 2326 2328 157 (set (reg/f:DI 1434)
        (lo_sum:DI (reg/f:DI 1435)
            (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1435)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>)
            (nil))))
(insn 2328 2327 2330 157 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:126 48 {*movdi_aarch64}
     (nil))
(insn 2330 2328 2331 157 (set (reg:DI 2 x2)
        (reg/f:DI 1434)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1434)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC44") [flags 0x82]  <var_decl 0x7f3c5d881240 *.LC44>)
            (nil))))
(insn 2331 2330 2332 157 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2332 2331 2333 157 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 2333 2332 2334 157 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
;;  succ:       158 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862

;; basic block 158, loop depth 0, count 0, freq 14
;;  prev block 157, next block 159, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       155 [71.0%] 
;;              157 [100.0%]  (FALLTHRU)
;; bb 158 artificial_defs: { }
;; bb 158 artificial_uses: { u2153(29){ }u2154(31){ }u2155(64){ }u2156(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 566 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 2334 2333 2335 158 102 "" [1 uses])
(note 2335 2334 2336 158 [bb 158] NOTE_INSN_BASIC_BLOCK)
(insn 2336 2335 2337 158 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 566 [ err ])
            (const_int 0 [0]))) graph500.c:127 390 {*cmpsi}
     (expr_list:REG_DEAD (reg/v:SI 566 [ err ])
        (nil)))
(jump_insn 2337 2336 2338 158 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2354)
            (pc))) graph500.c:127 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2354)
;;  succ:       159 [0.0%]  (FALLTHRU)
;;              160 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862

;; basic block 159, loop depth 0, count 0, freq 0
;;  prev block 158, next block 160, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       158 [0.0%]  (FALLTHRU)
;; bb 159 artificial_defs: { }
;; bb 159 artificial_uses: { u2159(29){ }u2160(31){ }u2161(64){ }u2162(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1438 1439 1441
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1438 1439 1441
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2338 2337 2339 159 [bb 159] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2339 2338 2340 159 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:128 -1
     (nil))
(debug_insn 2340 2339 2341 159 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>)) graph500.c:128 -1
     (nil))
(insn 2341 2340 2342 159 (set (reg/f:DI 1439)
        (high:DI (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2342 2341 2343 159 (set (reg/f:DI 1438)
        (lo_sum:DI (reg/f:DI 1439)
            (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1439)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>)
            (nil))))
(insn 2343 2342 2345 159 (set (reg/f:DI 1441)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:128 48 {*movdi_aarch64}
     (nil))
(insn 2345 2343 2346 159 (set (reg:DI 2 x2)
        (reg/f:DI 1438)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1438)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC45") [flags 0x82]  <var_decl 0x7f3c5d8812d0 *.LC45>)
            (nil))))
(insn 2346 2345 2347 159 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2347 2346 2348 159 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1441)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1441)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 2348 2347 2349 159 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 2349 2348 2350 159 (var_location:DI __stream (clobber (const_int 0 [0]))) graph500.c:128 -1
     (nil))
(debug_insn 2350 2349 2351 159 (var_location:DI __fmt (clobber (const_int 0 [0]))) graph500.c:128 -1
     (nil))
(insn 2351 2350 2352 159 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) graph500.c:129 47 {*movsi_aarch64}
     (nil))
(call_insn 2352 2351 2354 159 (parallel [
            (call (mem:DI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>) [0 __builtin_exit S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:129 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 160, loop depth 0, count 0, freq 14
;;  prev block 159, next block 161, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       158 [100.0%] 
;; bb 160 artificial_defs: { }
;; bb 160 artificial_uses: { u2173(29){ }u2174(31){ }u2175(64){ }u2176(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 66 [cc] 571 1442
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859 1862
;; live  gen 	 66 [cc] 571 1442
;; live  kill	
(code_label 2354 2352 2355 160 103 "" [1 uses])
(note 2355 2354 2357 160 [bb 160] NOTE_INSN_BASIC_BLOCK)
(insn 2357 2355 2358 160 (set (reg/f:DI 1442)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:137 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 2358 2357 2359 160 (set (reg/f:DI 571 [ D.3800 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 1442)
                (const_int 16 [0x10])) [2 rootname+0 S8 A64])) graph500.c:137 48 {*movdi_aarch64}
     (nil))
(insn 2359 2358 2360 160 (set (reg:CC 66 cc)
        (compare:CC (reg/f:DI 571 [ D.3800 ])
            (const_int 0 [0]))) graph500.c:137 391 {*cmpdi}
     (nil))
(jump_insn 2360 2359 2361 160 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2788)
            (pc))) graph500.c:137 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 8500 (nil)))
 -> 2788)
;;  succ:       161 [15.0%]  (FALLTHRU)
;;              199 [85.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1853 1854 1859 1862

;; basic block 161, loop depth 0, count 0, freq 2
;;  prev block 160, next block 162, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       160 [15.0%]  (FALLTHRU)
;; bb 161 artificial_defs: { }
;; bb 161 artificial_uses: { u2181(29){ }u2182(31){ }u2183(64){ }u2184(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 291 572 575 1446
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1853 1854 1859 1862
;; live  gen 	 0 [x0] 291 572 575 1446
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2361 2360 2364 161 [bb 161] NOTE_INSN_BASIC_BLOCK)
(insn 2364 2361 2366 161 (set (reg:DI 572 [ D.3798 ])
        (mem/c:DI (plus:DI (reg/f:DI 1442)
                (const_int 24 [0x18])) [4 nvtx_scale+0 S8 A64])) graph500.c:138 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1442)
        (expr_list:REG_EQUAL (mem/c:DI (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [4 nvtx_scale+0 S8 A64])
            (nil))))
(debug_insn 2366 2364 2367 161 (var_location:DI sz (ashift:DI (reg:DI 572 [ D.3798 ])
        (const_int 2 [0x2]))) graph500.c:138 -1
     (nil))
(insn 2367 2366 2368 161 (set (reg:DI 1446 [ D.3802 ])
        (ashift:DI (reg:DI 572 [ D.3798 ])
            (const_int 2 [0x2]))) xalloc.c:104 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 2368 2367 2369 161 (set (reg:DI 0 x0)
        (reg:DI 1446 [ D.3802 ])) xalloc.c:104 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1446 [ D.3802 ])
        (nil)))
(call_insn 2369 2368 2370 161 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("xmalloc") [flags 0x43]  <function_decl 0x7f3c5e239600 xmalloc>) [0 xmalloc S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) xalloc.c:104 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("xmalloc") [flags 0x43]  <function_decl 0x7f3c5e239600 xmalloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 2370 2369 2371 161 (set (reg/f:DI 291 [ D.3806 ])
        (reg:DI 0 x0)) xalloc.c:104 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(debug_insn 2371 2370 2372 161 (var_location:DI sz (clobber (const_int 0 [0]))) graph500.c:138 -1
     (nil))
(debug_insn 2372 2371 2373 161 (var_location:DI has_adj (clobber (const_int 0 [0]))) graph500.c:138 -1
     (nil))
(debug_insn 2373 2372 216 161 (var_location:DI k (const_int 0 [0])) graph500.c:141 -1
     (nil))
(insn 216 2373 2383 161 (set (reg/v:DI 575 [ k ])
        (const_int 0 [0])) graph500.c:141 48 {*movdi_aarch64}
     (nil))
;;  succ:       163 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862

;; basic block 162, loop depth 0, count 0, freq 22
;;  prev block 161, next block 163, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       163 [91.0%] 
;; bb 162 artificial_defs: { }
;; bb 162 artificial_uses: { u2195(29){ }u2196(31){ }u2197(64){ }u2198(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 575
;; lr  def 	 575
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862
;; live  gen 	 575
;; live  kill	
(code_label 2383 216 2376 162 106 "" [1 uses])
(note 2376 2383 2377 162 [bb 162] NOTE_INSN_BASIC_BLOCK)
(insn 2377 2376 2378 162 (set (mem:SI (plus:DI (mult:DI (reg/v:DI 575 [ k ])
                    (const_int 4 [0x4]))
                (reg/f:DI 291 [ D.3806 ])) [3 MEM[base: _112, index: _512, step: 4, offset: 0B]+0 S4 A32])
        (const_int 0 [0])) graph500.c:142 47 {*movsi_aarch64}
     (nil))
(insn 2378 2377 2379 162 (set (reg/v:DI 575 [ k ])
        (plus:DI (reg/v:DI 575 [ k ])
            (const_int 1 [0x1]))) graph500.c:141 95 {*adddi3_aarch64}
     (nil))
(debug_insn 2379 2378 2380 162 (var_location:DI k (reg/v:DI 575 [ k ])) graph500.c:141 -1
     (nil))
;;  succ:       163 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862

;; basic block 163, loop depth 0, count 0, freq 24
;;  prev block 162, next block 164, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       161 [100.0%]  (FALLTHRU)
;;              162 [100.0%]  (FALLTHRU,DFS_BACK)
;; bb 163 artificial_defs: { }
;; bb 163 artificial_uses: { u2203(29){ }u2204(31){ }u2205(64){ }u2206(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 575
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 2380 2379 2381 163 105 "" [0 uses])
(note 2381 2380 2382 163 [bb 163] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2382 2381 2384 163 (var_location:DI k (reg/v:DI 575 [ k ])) -1
     (nil))
(insn 2384 2382 2385 163 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 572 [ D.3798 ])
            (reg/v:DI 575 [ k ]))) graph500.c:141 391 {*cmpdi}
     (nil))
(jump_insn 2385 2384 2386 163 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2383)
            (pc))) graph500.c:141 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 2383)
;;  succ:       162 [91.0%] 
;;              164 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 575 1853 1854 1859 1862

;; basic block 164, loop depth 0, count 0, freq 2
;;  prev block 163, next block 165, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       163 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 164 artificial_defs: { }
;; bb 164 artificial_uses: { u2211(29){ }u2212(31){ }u2213(64){ }u2214(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 578 590 592 1447 1888
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1853 1854 1859 1862
;; live  gen 	 578 590 592 1447 1888
;; live  kill	
(note 2386 2385 2388 164 [bb 164] NOTE_INSN_BASIC_BLOCK)
(insn 2388 2386 2389 164 (set (reg/f:DI 1447)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:144 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 2389 2388 2392 164 (set (reg:DI 590 [ D.3798 ])
        (mem/c:DI (plus:DI (reg/f:DI 1447)
                (const_int 80 [0x50])) [4 nedge+0 S8 A64])) graph500.c:144 48 {*movdi_aarch64}
     (nil))
(insn 2392 2389 217 164 (set (reg:DI 592 [ ivtmp.110 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 1447)
                (const_int 88 [0x58])) [2 IJ+0 S8 A64])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1447)
        (nil)))
(insn 217 2392 2409 164 (set (reg/v:DI 578 [ k ])
        (const_int 0 [0])) graph500.c:145 48 {*movdi_aarch64}
     (nil))
(insn 2409 217 2421 164 (set (reg:SI 1888)
        (const_int 1 [0x1])) graph500.c:148 47 {*movsi_aarch64}
     (nil))
;;  succ:       168 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888

;; basic block 165, loop depth 0, count 0, freq 22
;;  prev block 164, next block 166, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       168 [91.0%] 
;; bb 165 artificial_defs: { }
;; bb 165 artificial_uses: { u2220(29){ }u2221(31){ }u2222(64){ }u2223(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 592
;; lr  def 	 66 [cc] 582 583
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888
;; live  gen 	 66 [cc] 582 583
;; live  kill	
(code_label 2421 2409 2395 165 109 "" [1 uses])
(note 2395 2421 2396 165 [bb 165] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2396 2395 2398 165 (var_location:DI D#43 (reg:DI 592 [ ivtmp.110 ])) -1
     (nil))
(insn 2398 2396 2399 165 (set (reg:DI 582 [ D.3798 ])
        (mem:DI (reg:DI 592 [ ivtmp.110 ]) [4 MEM[base: _1250, offset: 0B]+0 S8 A64])) 48 {*movdi_aarch64}
     (nil))
(debug_insn 2399 2398 2400 165 (var_location:DI D#16 (debug_expr:DI D#43)) graph500.c:145 -1
     (nil))
(debug_insn 2400 2399 2401 165 (var_location:DI p (debug_expr:DI D#16)) -1
     (nil))
(debug_insn 2401 2400 2402 165 (var_location:DI i (clobber (const_int 0 [0]))) graph500.c:145 -1
     (nil))
(insn 2402 2401 2403 165 (set (reg:DI 583 [ D.3798 ])
        (mem:DI (plus:DI (reg:DI 592 [ ivtmp.110 ])
                (const_int 8 [0x8])) [4 MEM[base: _1250, offset: 8B]+0 S8 A64])) 48 {*movdi_aarch64}
     (nil))
(debug_insn 2403 2402 2404 165 (var_location:DI D#17 (debug_expr:DI D#43)) graph500.c:146 -1
     (nil))
(debug_insn 2404 2403 2405 165 (var_location:DI p (debug_expr:DI D#17)) -1
     (nil))
(debug_insn 2405 2404 2406 165 (var_location:DI j (clobber (const_int 0 [0]))) graph500.c:146 -1
     (nil))
(insn 2406 2405 2407 165 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 582 [ D.3798 ])
            (reg:DI 583 [ D.3798 ]))) graph500.c:147 391 {*cmpdi}
     (nil))
(jump_insn 2407 2406 2408 165 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2413)
            (pc))) graph500.c:147 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 2413)
;;  succ:       166 [72.0%]  (FALLTHRU)
;;              167 [28.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1853 1854 1859 1862 1888

;; basic block 166, loop depth 0, count 0, freq 16
;;  prev block 165, next block 167, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       165 [72.0%]  (FALLTHRU)
;; bb 166 artificial_defs: { }
;; bb 166 artificial_uses: { u2231(29){ }u2232(31){ }u2233(64){ }u2234(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 582 583 1888
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 582 583 590 592 1853 1854 1859 1862 1888
;; live  gen 	
;; live  kill	
(note 2408 2407 2410 166 [bb 166] NOTE_INSN_BASIC_BLOCK)
(insn 2410 2408 2412 166 (set (mem:SI (plus:DI (mult:DI (reg:DI 583 [ D.3798 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 291 [ D.3806 ])) [3 *_522+0 S4 A32])
        (reg:SI 1888)) graph500.c:148 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:DI 583 [ D.3798 ])
        (nil)))
(insn 2412 2410 2413 166 (set (mem:SI (plus:DI (mult:DI (reg:DI 582 [ D.3798 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 291 [ D.3806 ])) [3 *_519+0 S4 A32])
        (reg:SI 1888)) graph500.c:148 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 1451)
        (expr_list:REG_DEAD (reg:DI 582 [ D.3798 ])
            (nil))))
;;  succ:       167 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888

;; basic block 167, loop depth 0, count 0, freq 22
;;  prev block 166, next block 168, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       165 [28.0%] 
;;              166 [100.0%]  (FALLTHRU)
;; bb 167 artificial_defs: { }
;; bb 167 artificial_uses: { u2242(29){ }u2243(31){ }u2244(64){ }u2245(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 578 592
;; lr  def 	 578 592
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888
;; live  gen 	 578 592
;; live  kill	
(code_label 2413 2412 2414 167 108 "" [1 uses])
(note 2414 2413 2415 167 [bb 167] NOTE_INSN_BASIC_BLOCK)
(insn 2415 2414 2416 167 (set (reg/v:DI 578 [ k ])
        (plus:DI (reg/v:DI 578 [ k ])
            (const_int 1 [0x1]))) graph500.c:144 95 {*adddi3_aarch64}
     (nil))
(debug_insn 2416 2415 2417 167 (var_location:DI k (reg/v:DI 578 [ k ])) graph500.c:144 -1
     (nil))
(insn 2417 2416 2418 167 (set (reg:DI 592 [ ivtmp.110 ])
        (plus:DI (reg:DI 592 [ ivtmp.110 ])
            (const_int 16 [0x10]))) 95 {*adddi3_aarch64}
     (nil))
;;  succ:       168 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888

;; basic block 168, loop depth 0, count 0, freq 24
;;  prev block 167, next block 169, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       164 [100.0%]  (FALLTHRU)
;;              167 [100.0%]  (FALLTHRU,DFS_BACK)
;; bb 168 artificial_defs: { }
;; bb 168 artificial_uses: { u2249(29){ }u2250(31){ }u2251(64){ }u2252(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 578 590
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 2418 2417 2419 168 107 "" [0 uses])
(note 2419 2418 2420 168 [bb 168] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2420 2419 2422 168 (var_location:DI k (reg/v:DI 578 [ k ])) -1
     (nil))
(insn 2422 2420 2423 168 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 578 [ k ])
            (reg:DI 590 [ D.3798 ]))) graph500.c:144 391 {*cmpdi}
     (nil))
(jump_insn 2423 2422 2424 168 (set (pc)
        (if_then_else (lt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2421)
            (pc))) graph500.c:144 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 2421)
;;  succ:       165 [91.0%] 
;;              169 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1710 1853 1854 1859 1862 1888
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 578 590 592 1853 1854 1859 1862 1888

;; basic block 169, loop depth 0, count 0, freq 2
;;  prev block 168, next block 170, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       168 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 169 artificial_defs: { }
;; bb 169 artificial_uses: { u2257(29){ }u2258(31){ }u2259(64){ }u2260(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1862
;; lr  def 	 287 596 600 775 785 788 789 790 791 1453 1455 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 572 1853 1854 1859 1862
;; live  gen 	 287 596 600 775 785 788 789 790 791 1453 1455 1879 1880 1881 1882 1883 1884 1885 1886 1887
;; live  kill	
(note 2424 2423 2426 169 [bb 169] NOTE_INSN_BASIC_BLOCK)
(insn 2426 2424 2427 169 (set (reg/f:DI 1453)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) graph500.c:155 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 2427 2426 2429 169 (set (reg:SI 600 [ D.3797 ])
        (mem/c:SI (plus:DI (reg/f:DI 1453)
                (const_int 48 [0x30])) [3 NBFS+0 S4 A32])) graph500.c:155 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1453)
        (nil)))
(insn 2429 2427 2430 169 (set (reg/f:DI 1455)
        (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))) 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
        (nil)))
(insn 2430 2429 2433 169 (set (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
        (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
                (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])) 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/c:DI (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>) [4 prng_state_store.z1+0 S8 A64])
        (nil)))
(insn 2433 2430 2436 169 (set (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (mem/c:DI (plus:DI (reg/f:DI 1455)
                (const_int 32 [0x20])) [4 prng_state_store.z5+0 S8 A64])) 48 {*movdi_aarch64}
     (nil))
(insn 2436 2433 2439 169 (set (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (mem/c:DI (plus:DI (reg/f:DI 1455)
                (const_int 24 [0x18])) [4 prng_state_store.z4+0 S8 A64])) 48 {*movdi_aarch64}
     (nil))
(insn 2439 2436 2442 169 (set (reg:DI 287 [ prng_state_store_z5_lsm.11 ])
        (mem/c:DI (plus:DI (reg/f:DI 1455)
                (const_int 16 [0x10])) [4 prng_state_store.z3+0 S8 A64])) 48 {*movdi_aarch64}
     (nil))
(insn 2442 2439 219 169 (set (reg:DI 785 [ prng_state_store_z4_lsm.13 ])
        (mem/c:DI (plus:DI (reg/f:DI 1455)
                (const_int 8 [0x8])) [4 prng_state_store.z2+0 S8 A64])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1455)
        (nil)))
(insn 219 2442 220 169 (set (reg:DI 788 [ ivtmp.101 ])
        (const_int 0 [0])) graph500.c:155 48 {*movdi_aarch64}
     (nil))
(insn 220 219 221 169 (set (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
        (const_int 0 [0])) graph500.c:155 47 {*movsi_aarch64}
     (nil))
(insn 221 220 2452 169 (set (reg/v:SI 596 [ m ])
        (const_int 0 [0])) graph500.c:155 47 {*movsi_aarch64}
     (nil))
(insn 2452 221 2480 169 (set (reg:DI 1879)
        (const_int 2147483646 [0x7ffffffe])) generator/mod_arith_64bit.h:27 48 {*movdi_aarch64}
     (nil))
(insn 2480 2452 2482 169 (set (reg:DI 1880)
        (const_int 107374182 [0x6666666])) generator/mod_arith_64bit.h:29 48 {*movdi_aarch64}
     (nil))
(insn 2482 2480 2523 169 (set (reg:DI 1881)
        (const_int 2147483647 [0x7fffffff])) generator/mod_arith_64bit.h:29 48 {*movdi_aarch64}
     (nil))
(insn 2523 2482 2605 169 (set (reg:DI 1882)
        (const_int 104480 [0x19820])) generator/mod_arith_64bit.h:36 48 {*movdi_aarch64}
     (nil))
(insn 2605 2523 2608 169 (set (reg:DF 1883)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC46") [flags 0x2]) [1  S8 A64])) graph500.c:157 54 {*movdf_aarch64}
     (nil))
(insn 2608 2605 2624 169 (set (reg:DF 1884)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC47") [flags 0x2]) [1  S8 A64])) graph500.c:157 54 {*movdf_aarch64}
     (nil))
(insn 2624 2608 2626 169 (set (reg/f:DI 1885)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:158 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 2626 2624 2632 169 (set (reg/f:DI 1886)
        (plus:DI (reg/f:DI 1885)
            (const_int 112 [0x70]))) graph500.c:158 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1545)
        (nil)))
(insn 2632 2626 2641 169 (set (reg:SI 1887 [ prng_state_store_z1_lsm.10 ])
        (const_int 1 [0x1])) 47 {*movsi_aarch64}
     (nil))
;;  succ:       185 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 170, loop depth 0, count 0, freq 22
;;  prev block 169, next block 171, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       186 [95.5%] 
;; bb 170 artificial_defs: { }
;; bb 170 artificial_uses: { u2277(29){ }u2278(31){ }u2279(64){ }u2280(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 775 1879
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 2641 2632 2445 170 118 "" [1 uses])
(note 2445 2641 2446 170 [bb 170] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2446 2445 2447 170 (var_location:DI state (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) graph500.c:156 -1
     (nil))
(debug_insn 2447 2446 2448 170 (var_location:DI state (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) -1
     (nil))
(debug_insn 2448 2447 2449 170 (var_location:DI state (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) -1
     (nil))
(debug_insn 2449 2448 2450 170 (var_location:DI a (reg:DI 775 [ prng_state_store_z3_lsm.15 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2450 2449 2451 170 (var_location:DI a (reg:DI 775 [ prng_state_store_z3_lsm.15 ])) -1
     (nil))
(debug_insn 2451 2450 2453 170 (var_location:DI b (const_int 107374182 [0x6666666])) -1
     (nil))
(insn 2453 2451 2454 170 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (reg:DI 1879))) generator/mod_arith_64bit.h:27 391 {*cmpdi}
     (expr_list:REG_EQUAL (compare:CC (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (const_int 2147483646 [0x7ffffffe]))
        (nil)))
(jump_insn 2454 2453 2455 170 (set (pc)
        (if_then_else (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2478)
            (pc))) generator/mod_arith_64bit.h:27 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2478)
;;  succ:       171 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              174 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 171, loop depth 0, count 0, freq 0
;;  prev block 170, next block 173, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       170 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 171 artificial_defs: { }
;; bb 171 artificial_uses: { u2286(29){ }u2287(31){ }u2288(64){ }u2289(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; live  gen 	 66 [cc]
;; live  kill	
(note 2455 2454 2456 171 [bb 171] NOTE_INSN_BASIC_BLOCK)
(insn 2456 2455 2457 171 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
            (const_int 0 [0]))) 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
        (nil)))
(jump_insn 2457 2456 2458 171 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 1671)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 1671)
;;  succ:       111 [100.0%] 
;;              173 (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862

;; basic block 173, loop depth 0, count 0, freq 0
;;  prev block 171, next block 174, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       171 (FALLTHRU)
;; bb 173 artificial_defs: { }
;; bb 173 artificial_uses: { u2292(29){ }u2293(31){ }u2294(64){ }u2295(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1466
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  gen 	 1466
;; live  kill	
(note 2458 2457 2460 173 [bb 173] NOTE_INSN_BASIC_BLOCK)
(insn 2460 2458 2461 173 (set (reg/f:DI 1466)
        (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))) 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
        (nil)))
(insn 2461 2460 2464 173 (set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
                (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
        (reg:DI 775 [ prng_state_store_z3_lsm.15 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1862)
        (expr_list:REG_DEAD (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (nil))))
(insn 2464 2461 2467 173 (set (mem/c:DI (plus:DI (reg/f:DI 1466)
                (const_int 32 [0x20])) [4 prng_state_store.z5+0 S8 A64])
        (reg:DI 790 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2467 2464 2470 173 (set (mem/c:DI (plus:DI (reg/f:DI 1466)
                (const_int 24 [0x18])) [4 prng_state_store.z4+0 S8 A64])
        (reg:DI 789 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (nil)))
(insn 2470 2467 2473 173 (set (mem/c:DI (plus:DI (reg/f:DI 1466)
                (const_int 16 [0x10])) [4 prng_state_store.z3+0 S8 A64])
        (reg:DI 287 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 287 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2473 2470 2478 173 (set (mem/c:DI (plus:DI (reg/f:DI 1466)
                (const_int 8 [0x8])) [4 prng_state_store.z2+0 S8 A64])
        (reg:DI 785 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1466)
        (expr_list:REG_DEAD (reg:DI 785 [ prng_state_store_z4_lsm.13 ])
            (nil))))
;;  succ:       111 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 174, loop depth 0, count 0, freq 22
;;  prev block 173, next block 175, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       170 [100.0%] 
;; bb 174 artificial_defs: { }
;; bb 174 artificial_uses: { u2315(29){ }u2316(31){ }u2317(64){ }u2318(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 775 790 1879 1880 1881
;; lr  def 	 66 [cc] 640 1476 1480 1482
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc] 640 1476 1480 1482
;; live  kill	
(code_label 2478 2473 2479 174 111 "" [1 uses])
(note 2479 2478 2481 174 [bb 174] NOTE_INSN_BASIC_BLOCK)
(insn 2481 2479 2483 174 (set (reg:DI 1476 [ D.3802 ])
        (mult:DI (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (reg:DI 1880))) generator/mod_arith_64bit.h:29 363 {muldi3}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (const_int 107374182 [0x6666666]))
        (nil)))
(insn 2483 2481 2485 174 (set (reg:DI 1480)
        (udiv:DI (reg:DI 1476 [ D.3802 ])
            (reg:DI 1881))) generator/mod_arith_64bit.h:29 387 {udivdi3}
     (expr_list:REG_EQUAL (udiv:DI (reg:DI 1476 [ D.3802 ])
            (const_int 2147483647 [0x7fffffff]))
        (nil)))
(insn 2485 2483 2486 174 (set (reg:DI 1482)
        (mult:DI (reg:DI 1480)
            (reg:DI 1881))) generator/mod_arith_64bit.h:29 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1480)
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1480)
                (const_int 2147483647 [0x7fffffff]))
            (nil))))
(insn 2486 2485 2487 174 (set (reg:DI 640 [ D.3802 ])
        (minus:DI (reg:DI 1476 [ D.3802 ])
            (reg:DI 1482))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1482)
        (expr_list:REG_DEAD (reg:DI 1476 [ D.3802 ])
            (nil))))
(debug_insn 2487 2486 2488 174 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 2488 2487 2489 174 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 2489 2488 2490 174 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2490 2489 2491 174 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2491 2490 2492 174 (var_location:DI a (reg:DI 790 [ prng_state_store_z5_lsm.11 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2492 2491 2493 174 (var_location:DI sum (reg:DI 640 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2493 2492 2494 174 (var_location:DI a (reg:DI 790 [ prng_state_store_z5_lsm.11 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2494 2493 2496 174 (var_location:DI b (const_int 104480 [0x19820])) -1
     (nil))
(insn 2496 2494 2497 174 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
            (reg:DI 1879))) generator/mod_arith_64bit.h:34 391 {*cmpdi}
     (expr_list:REG_EQUAL (compare:CC (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
            (const_int 2147483646 [0x7ffffffe]))
        (nil)))
(jump_insn 2497 2496 2498 174 (set (pc)
        (if_then_else (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2521)
            (pc))) generator/mod_arith_64bit.h:34 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2521)
;;  succ:       175 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              178 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 175, loop depth 0, count 0, freq 0
;;  prev block 174, next block 177, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       174 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 175 artificial_defs: { }
;; bb 175 artificial_uses: { u2335(29){ }u2336(31){ }u2337(64){ }u2338(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 791 1862
;; live  gen 	 66 [cc]
;; live  kill	
(note 2498 2497 2499 175 [bb 175] NOTE_INSN_BASIC_BLOCK)
(insn 2499 2498 2500 175 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
            (const_int 0 [0]))) 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
        (nil)))
(jump_insn 2500 2499 2501 175 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 1737)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 1737)
;;  succ:       115 [100.0%] 
;;              177 (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862

;; basic block 177, loop depth 0, count 0, freq 0
;;  prev block 175, next block 178, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       175 (FALLTHRU)
;; bb 177 artificial_defs: { }
;; bb 177 artificial_uses: { u2341(29){ }u2342(31){ }u2343(64){ }u2344(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1485
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; live  gen 	 1485
;; live  kill	
(note 2501 2500 2503 177 [bb 177] NOTE_INSN_BASIC_BLOCK)
(insn 2503 2501 2504 177 (set (reg/f:DI 1485)
        (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))) 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
        (nil)))
(insn 2504 2503 2507 177 (set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
                (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
        (reg:DI 775 [ prng_state_store_z3_lsm.15 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1862)
        (expr_list:REG_DEAD (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (nil))))
(insn 2507 2504 2510 177 (set (mem/c:DI (plus:DI (reg/f:DI 1485)
                (const_int 32 [0x20])) [4 prng_state_store.z5+0 S8 A64])
        (reg:DI 790 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2510 2507 2513 177 (set (mem/c:DI (plus:DI (reg/f:DI 1485)
                (const_int 24 [0x18])) [4 prng_state_store.z4+0 S8 A64])
        (reg:DI 789 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (nil)))
(insn 2513 2510 2516 177 (set (mem/c:DI (plus:DI (reg/f:DI 1485)
                (const_int 16 [0x10])) [4 prng_state_store.z3+0 S8 A64])
        (reg:DI 287 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 287 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2516 2513 2521 177 (set (mem/c:DI (plus:DI (reg/f:DI 1485)
                (const_int 8 [0x8])) [4 prng_state_store.z2+0 S8 A64])
        (reg:DI 785 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1485)
        (expr_list:REG_DEAD (reg:DI 785 [ prng_state_store_z4_lsm.13 ])
            (nil))))
;;  succ:       115 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 178, loop depth 0, count 0, freq 22
;;  prev block 177, next block 179, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       174 [100.0%] 
;; bb 178 artificial_defs: { }
;; bb 178 artificial_uses: { u2364(29){ }u2365(31){ }u2366(64){ }u2367(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 640 789 790 1879 1880 1881 1882
;; lr  def 	 66 [cc] 638 643 1495 1497 1500 1502 1504 1508 1510
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 640 775 785 788 789 790 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc] 638 643 1495 1497 1500 1502 1504 1508 1510
;; live  kill	
(code_label 2521 2516 2522 178 113 "" [1 uses])
(note 2522 2521 2524 178 [bb 178] NOTE_INSN_BASIC_BLOCK)
(insn 2524 2522 2525 178 (set (reg:DI 1495 [ D.3802 ])
        (mult:DI (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
            (reg:DI 1882))) generator/mod_arith_64bit.h:36 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (expr_list:REG_EQUAL (mult:DI (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
                (const_int 104480 [0x19820]))
            (nil))))
(insn 2525 2524 2527 178 (set (reg:DI 1497 [ D.3802 ])
        (plus:DI (reg:DI 1495 [ D.3802 ])
            (reg:DI 640 [ D.3802 ]))) generator/mod_arith_64bit.h:36 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1495 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 640 [ D.3802 ])
            (nil))))
(insn 2527 2525 2529 178 (set (reg:DI 1500)
        (udiv:DI (reg:DI 1497 [ D.3802 ])
            (reg:DI 1881))) generator/mod_arith_64bit.h:36 387 {udivdi3}
     (expr_list:REG_EQUAL (udiv:DI (reg:DI 1497 [ D.3802 ])
            (const_int 2147483647 [0x7fffffff]))
        (nil)))
(insn 2529 2527 2530 178 (set (reg:DI 1502)
        (mult:DI (reg:DI 1500)
            (reg:DI 1881))) generator/mod_arith_64bit.h:36 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1500)
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1500)
                (const_int 2147483647 [0x7fffffff]))
            (nil))))
(insn 2530 2529 2531 178 (set (reg:DI 643 [ D.3802 ])
        (minus:DI (reg:DI 1497 [ D.3802 ])
            (reg:DI 1502))) generator/mod_arith_64bit.h:36 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1502)
        (expr_list:REG_DEAD (reg:DI 1497 [ D.3802 ])
            (nil))))
(debug_insn 2531 2530 2532 178 (var_location:DI sum (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 2532 2531 2533 178 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 2533 2532 2534 178 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 2534 2533 2535 178 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2535 2534 2536 178 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2536 2535 2537 178 (var_location:DI new_elt (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2537 2536 2538 178 (var_location:DI state (clobber (const_int 0 [0]))) generator/splittable_mrg.c:268 -1
     (nil))
(debug_insn 2538 2537 2539 178 (var_location:DI state (clobber (const_int 0 [0]))) generator/splittable_mrg.c:274 -1
     (nil))
(debug_insn 2539 2538 2540 178 (var_location:DI state (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) generator/splittable_mrg.c:274 -1
     (nil))
(debug_insn 2540 2539 2541 178 (var_location:DI state (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) generator/splittable_mrg.c:274 -1
     (nil))
(debug_insn 2541 2540 2542 178 (var_location:DI a (reg:DI 643 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2542 2541 2543 178 (var_location:DI a (reg:DI 643 [ D.3802 ])) -1
     (nil))
(debug_insn 2543 2542 2545 178 (var_location:DI b (const_int 107374182 [0x6666666])) -1
     (nil))
(insn 2545 2543 2547 178 (set (reg:DI 1504 [ D.3802 ])
        (mult:DI (reg:DI 643 [ D.3802 ])
            (reg:DI 1880))) generator/mod_arith_64bit.h:29 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1477)
        (expr_list:REG_EQUAL (mult:DI (reg:DI 643 [ D.3802 ])
                (const_int 107374182 [0x6666666]))
            (nil))))
(insn 2547 2545 2549 178 (set (reg:DI 1508)
        (udiv:DI (reg:DI 1504 [ D.3802 ])
            (reg:DI 1881))) generator/mod_arith_64bit.h:29 387 {udivdi3}
     (expr_list:REG_EQUAL (udiv:DI (reg:DI 1504 [ D.3802 ])
            (const_int 2147483647 [0x7fffffff]))
        (nil)))
(insn 2549 2547 2550 178 (set (reg:DI 1510)
        (mult:DI (reg:DI 1508)
            (reg:DI 1881))) generator/mod_arith_64bit.h:29 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1508)
        (expr_list:REG_EQUAL (mult:DI (reg:DI 1508)
                (const_int 2147483647 [0x7fffffff]))
            (nil))))
(insn 2550 2549 2551 178 (set (reg:DI 638 [ D.3802 ])
        (minus:DI (reg:DI 1504 [ D.3802 ])
            (reg:DI 1510))) generator/mod_arith_64bit.h:29 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1510)
        (expr_list:REG_DEAD (reg:DI 1504 [ D.3802 ])
            (nil))))
(debug_insn 2551 2550 2552 178 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 2552 2551 2553 178 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:78 -1
     (nil))
(debug_insn 2553 2552 2554 178 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2554 2553 2555 178 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2555 2554 2556 178 (var_location:DI a (reg:DI 789 [ prng_state_store_z4_lsm.13 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2556 2555 2557 178 (var_location:DI sum (reg:DI 638 [ D.3802 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2557 2556 2558 178 (var_location:DI a (reg:DI 789 [ prng_state_store_z4_lsm.13 ])) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2558 2557 2560 178 (var_location:DI b (const_int 104480 [0x19820])) -1
     (nil))
(insn 2560 2558 2561 178 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
            (reg:DI 1879))) generator/mod_arith_64bit.h:34 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1465)
        (expr_list:REG_EQUAL (compare:CC (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
                (const_int 2147483646 [0x7ffffffe]))
            (nil))))
(jump_insn 2561 2560 2562 178 (set (pc)
        (if_then_else (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2580)
            (pc))) generator/mod_arith_64bit.h:34 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2580)
;;  succ:       179 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              180 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 179, loop depth 0, count 0, freq 0
;;  prev block 178, next block 180, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       178 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 179 artificial_defs: { }
;; bb 179 artificial_uses: { u2400(29){ }u2401(31){ }u2402(64){ }u2403(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; lr  def 	 1513
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 775 785 789 1862
;; live  gen 	 1513
;; live  kill	
(note 2562 2561 2564 179 [bb 179] NOTE_INSN_BASIC_BLOCK)
(insn 2564 2562 2565 179 (set (reg/f:DI 1513)
        (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))) 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
        (nil)))
(insn 2565 2564 2568 179 (set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
                (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
        (reg:DI 643 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1862)
        (expr_list:REG_DEAD (reg:DI 643 [ D.3802 ])
            (nil))))
(insn 2568 2565 2571 179 (set (mem/c:DI (plus:DI (reg/f:DI 1513)
                (const_int 32 [0x20])) [4 prng_state_store.z5+0 S8 A64])
        (reg:DI 789 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (nil)))
(insn 2571 2568 2574 179 (set (mem/c:DI (plus:DI (reg/f:DI 1513)
                (const_int 24 [0x18])) [4 prng_state_store.z4+0 S8 A64])
        (reg:DI 287 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 287 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2574 2571 2577 179 (set (mem/c:DI (plus:DI (reg/f:DI 1513)
                (const_int 16 [0x10])) [4 prng_state_store.z3+0 S8 A64])
        (reg:DI 785 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 785 [ prng_state_store_z4_lsm.13 ])
        (nil)))
(insn 2577 2574 2580 179 (set (mem/c:DI (plus:DI (reg/f:DI 1513)
                (const_int 8 [0x8])) [4 prng_state_store.z2+0 S8 A64])
        (reg:DI 775 [ prng_state_store_z3_lsm.15 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1513)
        (expr_list:REG_DEAD (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (nil))))
;;  succ:       115 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 180, loop depth 0, count 0, freq 22
;;  prev block 179, next block 182, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       178 [100.0%] 
;; bb 180 artificial_defs: { }
;; bb 180 artificial_uses: { u2423(29){ }u2424(31){ }u2425(64){ }u2426(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 638 788 789 1881 1882
;; lr  def 	 66 [cc] 646 1523 1525 1528 1530 1532
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 638 643 775 785 788 789 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc] 646 1523 1525 1528 1530 1532
;; live  kill	
(code_label 2580 2577 2581 180 115 "" [1 uses])
(note 2581 2580 2583 180 [bb 180] NOTE_INSN_BASIC_BLOCK)
(insn 2583 2581 2584 180 (set (reg:DI 1523 [ D.3802 ])
        (mult:DI (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
            (reg:DI 1882))) generator/mod_arith_64bit.h:36 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1496)
        (expr_list:REG_DEAD (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
            (expr_list:REG_EQUAL (mult:DI (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
                    (const_int 104480 [0x19820]))
                (nil)))))
(insn 2584 2583 2586 180 (set (reg:DI 1525 [ D.3802 ])
        (plus:DI (reg:DI 1523 [ D.3802 ])
            (reg:DI 638 [ D.3802 ]))) generator/mod_arith_64bit.h:36 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1523 [ D.3802 ])
        (expr_list:REG_DEAD (reg:DI 638 [ D.3802 ])
            (nil))))
(insn 2586 2584 2588 180 (set (reg:DI 1528)
        (udiv:DI (reg:DI 1525 [ D.3802 ])
            (reg:DI 1881))) generator/mod_arith_64bit.h:36 387 {udivdi3}
     (expr_list:REG_EQUAL (udiv:DI (reg:DI 1525 [ D.3802 ])
            (const_int 2147483647 [0x7fffffff]))
        (nil)))
(insn 2588 2586 2589 180 (set (reg:DI 1530)
        (mult:DI (reg:DI 1528)
            (reg:DI 1881))) generator/mod_arith_64bit.h:36 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 1528)
        (expr_list:REG_DEAD (reg:DI 1481)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 1528)
                    (const_int 2147483647 [0x7fffffff]))
                (nil)))))
(insn 2589 2588 2590 180 (set (reg:DI 646 [ D.3802 ])
        (minus:DI (reg:DI 1525 [ D.3802 ])
            (reg:DI 1530))) generator/mod_arith_64bit.h:36 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1530)
        (expr_list:REG_DEAD (reg:DI 1525 [ D.3802 ])
            (nil))))
(debug_insn 2590 2589 2591 180 (var_location:DI sum (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 2591 2590 2592 180 (var_location:DI a (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 2592 2591 2593 180 (var_location:DI b (clobber (const_int 0 [0]))) generator/mod_arith_64bit.h:86 -1
     (nil))
(debug_insn 2593 2592 2594 180 (var_location:DI sum (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2594 2593 2595 180 (var_location:DI a (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2595 2594 2596 180 (var_location:DI new_elt (clobber (const_int 0 [0]))) generator/splittable_mrg.c:172 -1
     (nil))
(debug_insn 2596 2595 2597 180 (var_location:DI state (clobber (const_int 0 [0]))) generator/splittable_mrg.c:268 -1
     (nil))
(debug_insn 2597 2596 2598 180 (var_location:DI state (clobber (const_int 0 [0]))) generator/splittable_mrg.c:275 -1
     (nil))
(debug_insn 2598 2597 2599 180 (var_location:DI state (clobber (const_int 0 [0]))) graph500.c:156 -1
     (nil))
(debug_insn 2599 2598 2600 180 (var_location:DF R (clobber (const_int 0 [0]))) graph500.c:156 -1
     (nil))
(insn 2600 2599 2601 180 (set (reg:SI 1532 [ MEM[base: _112, index: ivtmp.101_1291, step: 4, offset: 0B] ])
        (mem:SI (plus:DI (mult:DI (reg:DI 788 [ ivtmp.101 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 291 [ D.3806 ])) [3 MEM[base: _112, index: ivtmp.101_1291, step: 4, offset: 0B]+0 S4 A32])) graph500.c:157 47 {*movsi_aarch64}
     (nil))
(insn 2601 2600 2602 180 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1532 [ MEM[base: _112, index: ivtmp.101_1291, step: 4, offset: 0B] ])
            (const_int 0 [0]))) graph500.c:157 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1532 [ MEM[base: _112, index: ivtmp.101_1291, step: 4, offset: 0B] ])
        (nil)))
(jump_insn 2602 2601 2603 180 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 2629)
            (pc))) graph500.c:157 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 2629)
;;  succ:       184 [50.0%] 
;;              182 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 182, loop depth 0, count 0, freq 11
;;  prev block 180, next block 183, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       180 [50.0%]  (FALLTHRU)
;; bb 182 artificial_defs: { }
;; bb 182 artificial_uses: { u2444(29){ }u2445(31){ }u2446(64){ }u2447(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 596 600 643 646 788 1883 1884
;; lr  def 	 66 [cc] 1533 1534 1536 1537 1539 1540 1541 1542 1543 1544
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc] 1533 1534 1536 1537 1539 1540 1541 1542 1543 1544
;; live  kill	
(note 2603 2602 2604 182 [bb 182] NOTE_INSN_BASIC_BLOCK)
(insn 2604 2603 2606 182 (set (reg:DF 1533 [ D.3804 ])
        (float:DF (reg:DI 643 [ D.3802 ]))) graph500.c:157 798 {floatdidf2}
     (nil))
(insn 2606 2604 2607 182 (set (reg:DF 1534 [ D.3804 ])
        (mult:DF (reg:DF 1533 [ D.3804 ])
            (reg:DF 1883))) graph500.c:157 809 {muldf3}
     (expr_list:REG_DEAD (reg:DF 1535)
        (expr_list:REG_DEAD (reg:DF 1533 [ D.3804 ])
            (nil))))
(insn 2607 2606 2609 182 (set (reg:DF 1536 [ D.3804 ])
        (float:DF (reg:DI 646 [ D.3802 ]))) graph500.c:157 798 {floatdidf2}
     (nil))
(insn 2609 2607 2610 182 (set (reg:DF 1537 [ D.3804 ])
        (mult:DF (reg:DF 1536 [ D.3804 ])
            (reg:DF 1884))) graph500.c:157 809 {muldf3}
     (expr_list:REG_DEAD (reg:DF 1538)
        (expr_list:REG_DEAD (reg:DF 1536 [ D.3804 ])
            (nil))))
(insn 2610 2609 2611 182 (set (reg:DF 1539 [ D.3804 ])
        (plus:DF (reg:DF 1534 [ D.3804 ])
            (reg:DF 1537 [ D.3804 ]))) graph500.c:157 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1537 [ D.3804 ])
        (expr_list:REG_DEAD (reg:DF 1534 [ D.3804 ])
            (nil))))
(insn 2611 2610 2612 182 (set (reg:DI 1540 [ D.3810 ])
        (minus:DI (reg:DI 572 [ D.3798 ])
            (reg:DI 788 [ ivtmp.101 ]))) graph500.c:157 264 {subdi3}
     (nil))
(insn 2612 2611 2613 182 (set (reg:DF 1541 [ D.3804 ])
        (float:DF (reg:DI 1540 [ D.3810 ]))) graph500.c:157 798 {floatdidf2}
     (expr_list:REG_DEAD (reg:DI 1540 [ D.3810 ])
        (nil)))
(insn 2613 2612 2614 182 (set (reg:DF 1542 [ D.3804 ])
        (mult:DF (reg:DF 1539 [ D.3804 ])
            (reg:DF 1541 [ D.3804 ]))) graph500.c:157 809 {muldf3}
     (expr_list:REG_DEAD (reg:DF 1541 [ D.3804 ])
        (expr_list:REG_DEAD (reg:DF 1539 [ D.3804 ])
            (nil))))
(insn 2614 2613 2615 182 (set (reg:SI 1543 [ D.3797 ])
        (minus:SI (reg:SI 600 [ D.3797 ])
            (reg/v:SI 596 [ m ]))) graph500.c:157 262 {subsi3}
     (nil))
(insn 2615 2614 2616 182 (set (reg:DF 1544 [ D.3804 ])
        (float:DF (reg:SI 1543 [ D.3797 ]))) graph500.c:157 802 {floatsidf2}
     (expr_list:REG_DEAD (reg:SI 1543 [ D.3797 ])
        (nil)))
(insn 2616 2615 2617 182 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg:DF 1542 [ D.3804 ])
            (reg:DF 1544 [ D.3804 ]))) graph500.c:157 395 {*cmpedf}
     (expr_list:REG_DEAD (reg:DF 1544 [ D.3804 ])
        (expr_list:REG_DEAD (reg:DF 1542 [ D.3804 ])
            (nil))))
(jump_insn 2617 2616 2618 182 (set (pc)
        (if_then_else (gt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref 2629)
            (pc))) graph500.c:157 7 {condjump}
     (expr_list:REG_DEAD (reg:CCFPE 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 2629)
;;  succ:       184 [50.0%] 
;;              183 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 183, loop depth 0, count 0, freq 5
;;  prev block 182, next block 184, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       182 [50.0%]  (FALLTHRU)
;; bb 183 artificial_defs: { }
;; bb 183 artificial_uses: { u2467(29){ }u2468(31){ }u2469(64){ }u2470(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 788 1886
;; lr  def 	 596 599 1549
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 596 599 1549
;; live  kill	
(note 2618 2617 2619 183 [bb 183] NOTE_INSN_BASIC_BLOCK)
(insn 2619 2618 2620 183 (set (reg/v:SI 599 [ m ])
        (plus:SI (reg/v:SI 596 [ m ])
            (const_int 1 [0x1]))) graph500.c:158 94 {*addsi3_aarch64}
     (nil))
(debug_insn 2620 2619 2621 183 (var_location:SI m (reg/v:SI 599 [ m ])) graph500.c:158 -1
     (nil))
(debug_insn 2621 2620 2622 183 (var_location:DI D#45 (plus:DI (reg:DI 788 [ ivtmp.101 ])
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 2622 2621 2627 183 (var_location:DI t (debug_expr:DI D#45)) graph500.c:158 -1
     (nil))
(insn 2627 2622 2628 183 (set (reg:DI 1549 [ m ])
        (sign_extend:DI (reg/v:SI 596 [ m ]))) graph500.c:158 80 {*extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 596 [ m ])
        (nil)))
(insn 2628 2627 218 183 (set (mem:DI (plus:DI (mult:DI (reg:DI 1549 [ m ])
                    (const_int 8 [0x8]))
                (reg/f:DI 1886)) [4 bfs_root S8 A64])
        (reg:DI 788 [ ivtmp.101 ])) graph500.c:158 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1549 [ m ])
        (expr_list:REG_DEAD (reg/f:DI 1548)
            (nil))))
(insn 218 2628 2629 183 (set (reg/v:SI 596 [ m ])
        (reg/v:SI 599 [ m ])) graph500.c:158 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 599 [ m ])
        (nil)))
;;  succ:       184 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 184, loop depth 0, count 0, freq 21
;;  prev block 183, next block 185, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       180 [50.0%] 
;;              183 [100.0%]  (FALLTHRU)
;;              182 [50.0%] 
;; bb 184 artificial_defs: { }
;; bb 184 artificial_uses: { u2481(29){ }u2482(31){ }u2483(64){ }u2484(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 643 646 775 785 788 1887
;; lr  def 	 287 775 785 788 789 790 791
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 643 646 775 785 788 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 287 775 785 788 789 790 791
;; live  kill	
(code_label 2629 218 2630 184 116 "" [2 uses])
(note 2630 2629 2631 184 [bb 184] NOTE_INSN_BASIC_BLOCK)
(insn 2631 2630 4376 184 (set (reg:DI 788 [ ivtmp.101 ])
        (plus:DI (reg:DI 788 [ ivtmp.101 ])
            (const_int 1 [0x1]))) 95 {*adddi3_aarch64}
     (nil))
(insn 4376 2631 222 184 (set (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
        (const_int 1 [0x1])) 47 {*movsi_aarch64}
     (nil))
(insn 222 4376 223 184 (set (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (reg:DI 785 [ prng_state_store_z4_lsm.13 ])) generator/mod_arith_64bit.h:36 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 785 [ prng_state_store_z4_lsm.13 ])
        (nil)))
(insn 223 222 224 184 (set (reg:DI 785 [ prng_state_store_z4_lsm.13 ])
        (reg:DI 643 [ D.3802 ])) generator/mod_arith_64bit.h:36 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 643 [ D.3802 ])
        (nil)))
(insn 224 223 225 184 (set (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (reg:DI 287 [ prng_state_store_z5_lsm.11 ])) generator/mod_arith_64bit.h:36 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 287 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 225 224 226 184 (set (reg:DI 287 [ prng_state_store_z5_lsm.11 ])
        (reg:DI 775 [ prng_state_store_z3_lsm.15 ])) generator/mod_arith_64bit.h:36 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
        (nil)))
(insn 226 225 2633 184 (set (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
        (reg:DI 646 [ D.3802 ])) generator/splittable_mrg.c:177 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 646 [ D.3802 ])
        (nil)))
;;  succ:       185 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 185, loop depth 0, count 0, freq 24
;;  prev block 184, next block 186, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       169 [100.0%]  (FALLTHRU)
;;              184 [100.0%]  (FALLTHRU,DFS_BACK)
;; bb 185 artificial_defs: { }
;; bb 185 artificial_uses: { u2491(29){ }u2492(31){ }u2493(64){ }u2494(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 600
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 2633 226 2634 185 110 "" [0 uses])
(note 2634 2633 2636 185 [bb 185] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2636 2634 2637 185 (var_location:DI t (reg:DI 788 [ ivtmp.101 ])) -1
     (nil))
(debug_insn 2637 2636 2638 185 (var_location:SI m (reg/v:SI 596 [ m ])) -1
     (nil))
(insn 2638 2637 2639 185 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 596 [ m ])
            (reg:SI 600 [ D.3797 ]))) graph500.c:155 390 {*cmpsi}
     (nil))
(jump_insn 2639 2638 2640 185 (set (pc)
        (if_then_else (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2704)
            (pc))) graph500.c:155 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 450 (nil)))
 -> 2704)
;;  succ:       186 [95.5%]  (FALLTHRU)
;;              193 [4.5%]  (LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 186, loop depth 0, count 0, freq 23
;;  prev block 185, next block 187, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       185 [95.5%]  (FALLTHRU)
;; bb 186 artificial_defs: { }
;; bb 186 artificial_uses: { u2501(29){ }u2502(31){ }u2503(64){ }u2504(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 572 788
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  gen 	 66 [cc]
;; live  kill	
(note 2640 2639 2642 186 [bb 186] NOTE_INSN_BASIC_BLOCK)
(insn 2642 2640 2643 186 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 572 [ D.3798 ])
            (reg:DI 788 [ ivtmp.101 ]))) graph500.c:155 391 {*cmpdi}
     (nil))
(jump_insn 2643 2642 2644 186 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2641)
            (pc))) graph500.c:155 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9550 (nil)))
 -> 2641)
;;  succ:       170 [95.5%] 
;;              187 [4.5%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1710 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 572 596 600 775 785 788 789 790 791 1853 1854 1859 1862 1879 1880 1881 1882 1883 1884 1886 1887

;; basic block 187, loop depth 0, count 0, freq 1
;;  prev block 186, next block 189, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       186 [4.5%]  (FALLTHRU,LOOP_EXIT)
;; bb 187 artificial_defs: { }
;; bb 187 artificial_uses: { u2508(29){ }u2509(31){ }u2510(64){ }u2511(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 791 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 791 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
(note 2644 2643 2645 187 [bb 187] NOTE_INSN_BASIC_BLOCK)
(insn 2645 2644 2646 187 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
            (const_int 0 [0]))) 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
        (nil)))
(jump_insn 2646 2645 2647 187 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 2663)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 2663)
;;  succ:       190 [100.0%] 
;;              189 (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1853 1854 1859 1862

;; basic block 189, loop depth 0, count 0, freq 0
;;  prev block 187, next block 190, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       187 (FALLTHRU)
;; bb 189 artificial_defs: { }
;; bb 189 artificial_uses: { u2514(29){ }u2515(31){ }u2516(64){ }u2517(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1550
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 596 600 775 785 789 790 1853 1854 1859 1862
;; live  gen 	 1550
;; live  kill	
(note 2647 2646 2649 189 [bb 189] NOTE_INSN_BASIC_BLOCK)
(insn 2649 2647 2650 189 (set (reg/f:DI 1550)
        (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))) 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
        (nil)))
(insn 2650 2649 2653 189 (set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
                (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
        (reg:DI 775 [ prng_state_store_z3_lsm.15 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1862)
        (expr_list:REG_DEAD (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (nil))))
(insn 2653 2650 2656 189 (set (mem/c:DI (plus:DI (reg/f:DI 1550)
                (const_int 32 [0x20])) [4 prng_state_store.z5+0 S8 A64])
        (reg:DI 790 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2656 2653 2659 189 (set (mem/c:DI (plus:DI (reg/f:DI 1550)
                (const_int 24 [0x18])) [4 prng_state_store.z4+0 S8 A64])
        (reg:DI 789 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (nil)))
(insn 2659 2656 2662 189 (set (mem/c:DI (plus:DI (reg/f:DI 1550)
                (const_int 16 [0x10])) [4 prng_state_store.z3+0 S8 A64])
        (reg:DI 287 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 287 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2662 2659 2663 189 (set (mem/c:DI (plus:DI (reg/f:DI 1550)
                (const_int 8 [0x8])) [4 prng_state_store.z2+0 S8 A64])
        (reg:DI 785 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1550)
        (expr_list:REG_DEAD (reg:DI 785 [ prng_state_store_z4_lsm.13 ])
            (nil))))
;;  succ:       190 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859

;; basic block 190, loop depth 0, count 0, freq 1
;;  prev block 189, next block 191, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       187 [100.0%] 
;;              189 [100.0%]  (FALLTHRU)
;; bb 190 artificial_defs: { }
;; bb 190 artificial_uses: { u2537(29){ }u2538(31){ }u2539(64){ }u2540(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 2663 2662 2664 190 119 "" [1 uses])
(note 2664 2663 2665 190 [bb 190] NOTE_INSN_BASIC_BLOCK)
(insn 2665 2664 2666 190 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 596 [ m ])
            (const_int 0 [0]))) graph500.c:161 390 {*cmpsi}
     (nil))
(jump_insn 2666 2665 2667 190 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2687)
            (pc))) graph500.c:161 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 2687)
;;  succ:       191 [100.0%]  (FALLTHRU)
;;              192 [0.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859

;; basic block 191, loop depth 0, count 0, freq 1
;;  prev block 190, next block 192, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       190 [100.0%]  (FALLTHRU)
;; bb 191 artificial_defs: { }
;; bb 191 artificial_uses: { u2543(29){ }u2544(31){ }u2545(64){ }u2546(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 596 600 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1560 1561 1564 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 596 600 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 1560 1561 1564 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2667 2666 2668 191 [bb 191] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2668 2667 2669 191 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:162 -1
     (nil))
(debug_insn 2669 2668 2670 191 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>)) graph500.c:162 -1
     (nil))
(insn 2670 2669 2671 191 (set (reg/f:DI 1561)
        (high:DI (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2671 2670 2672 191 (set (reg/f:DI 1560)
        (lo_sum:DI (reg/f:DI 1561)
            (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1561)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>)
            (nil))))
(insn 2672 2671 2674 191 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:162 48 {*movdi_aarch64}
     (nil))
(insn 2674 2672 2675 191 (set (reg:SI 4 x4)
        (reg/v:SI 596 [ m ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2675 2674 2676 191 (set (reg:SI 3 x3)
        (reg:SI 600 [ D.3797 ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 600 [ D.3797 ])
        (nil)))
(insn 2676 2675 2677 191 (set (reg:DI 2 x2)
        (reg/f:DI 1560)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1560)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC48") [flags 0x82]  <var_decl 0x7f3c5d881360 *.LC48>)
            (nil))))
(insn 2677 2676 2678 191 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2678 2677 2679 191 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 2679 2678 2680 191 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 4 x4)
        (expr_list:REG_DEAD (reg:SI 3 x3)
            (expr_list:REG_DEAD (reg:DI 2 x2)
                (expr_list:REG_DEAD (reg:SI 1 x1)
                    (expr_list:REG_UNUSED (reg:SI 0 x0)
                        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                            (nil)))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:SI (use (reg:SI 3 x3))
                            (expr_list:SI (use (reg:SI 4 x4))
                                (nil)))))))))
(debug_insn 2680 2679 2681 191 (var_location:DI __stream (clobber (const_int 0 [0]))) graph500.c:162 -1
     (nil))
(debug_insn 2681 2680 2683 191 (var_location:DI __fmt (clobber (const_int 0 [0]))) graph500.c:162 -1
     (nil))
(insn 2683 2681 2684 191 (set (reg/f:DI 1564)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) graph500.c:164 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 2684 2683 2687 191 (set (mem/c:SI (plus:DI (reg/f:DI 1564)
                (const_int 48 [0x30])) [3 NBFS+0 S4 A32])
        (reg/v:SI 596 [ m ])) graph500.c:164 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1564)
        (expr_list:REG_DEAD (reg/v:SI 596 [ m ])
            (nil))))
;;  succ:       196 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859

;; basic block 192, loop depth 0, count 0, freq 0
;;  prev block 191, next block 193, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       190 [0.0%] 
;; bb 192 artificial_defs: { }
;; bb 192 artificial_uses: { u2562(29){ }u2563(31){ }u2564(64){ }u2565(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1566 1567 1569
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 1566 1567 1569
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2687 2684 2688 192 120 "" [1 uses])
(note 2688 2687 2689 192 [bb 192] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2689 2688 2690 192 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:166 -1
     (nil))
(debug_insn 2690 2689 2691 192 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>)) graph500.c:166 -1
     (nil))
(insn 2691 2690 2692 192 (set (reg/f:DI 1567)
        (high:DI (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2692 2691 2693 192 (set (reg/f:DI 1566)
        (lo_sum:DI (reg/f:DI 1567)
            (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1567)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>)
            (nil))))
(insn 2693 2692 2695 192 (set (reg/f:DI 1569)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:166 48 {*movdi_aarch64}
     (nil))
(insn 2695 2693 2696 192 (set (reg:DI 2 x2)
        (reg/f:DI 1566)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1566)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC49") [flags 0x82]  <var_decl 0x7f3c5d8813f0 *.LC49>)
            (nil))))
(insn 2696 2695 2697 192 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2697 2696 2698 192 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1569)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1569)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 2698 2697 2699 192 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 2699 2698 2700 192 (var_location:DI __stream (clobber (const_int 0 [0]))) graph500.c:166 -1
     (nil))
(debug_insn 2700 2699 2701 192 (var_location:DI __fmt (clobber (const_int 0 [0]))) graph500.c:166 -1
     (nil))
(insn 2701 2700 2702 192 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) graph500.c:167 47 {*movsi_aarch64}
     (nil))
(call_insn 2702 2701 2704 192 (parallel [
            (call (mem:DI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>) [0 __builtin_exit S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:167 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 193, loop depth 0, count 0, freq 1
;;  prev block 192, next block 195, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       185 [4.5%]  (LOOP_EXIT)
;; bb 193 artificial_defs: { }
;; bb 193 artificial_uses: { u2576(29){ }u2577(31){ }u2578(64){ }u2579(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 791 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 791
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 791 1853 1854 1859 1862
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 2704 2702 2705 193 117 "" [1 uses])
(note 2705 2704 2706 193 [bb 193] NOTE_INSN_BASIC_BLOCK)
(insn 2706 2705 2707 193 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
            (const_int 0 [0]))) 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 791 [ prng_state_store_z1_lsm.10 ])
        (nil)))
(jump_insn 2707 2706 2708 193 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 2726)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 2726)
;;  succ:       196 [100.0%] 
;;              195 (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1710 1853 1854 1859 1862
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1853 1854 1859 1862

;; basic block 195, loop depth 0, count 0, freq 0
;;  prev block 193, next block 196, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       193 (FALLTHRU)
;; bb 195 artificial_defs: { }
;; bb 195 artificial_uses: { u2582(29){ }u2583(31){ }u2584(64){ }u2585(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1710 1853 1854 1859 1862
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 775 785 789 790 1862
;; lr  def 	 1570
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 287 291 775 785 789 790 1853 1854 1859 1862
;; live  gen 	 1570
;; live  kill	
(note 2708 2707 2710 195 [bb 195] NOTE_INSN_BASIC_BLOCK)
(insn 2710 2708 2711 195 (set (reg/f:DI 1570)
        (lo_sum:DI (reg/f:DI 1862)
            (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>))) 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)
        (nil)))
(insn 2711 2710 2714 195 (set (mem/c:DI (lo_sum:DI (reg/f:DI 1862)
                (symbol_ref:DI ("prng_state_store.lto_priv.18") [flags 0xc2]  <var_decl 0x7f3c5e254480 prng_state_store>)) [4 prng_state_store.z1+0 S8 A64])
        (reg:DI 775 [ prng_state_store_z3_lsm.15 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1862)
        (expr_list:REG_DEAD (reg:DI 775 [ prng_state_store_z3_lsm.15 ])
            (nil))))
(insn 2714 2711 2717 195 (set (mem/c:DI (plus:DI (reg/f:DI 1570)
                (const_int 32 [0x20])) [4 prng_state_store.z5+0 S8 A64])
        (reg:DI 790 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 790 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2717 2714 2720 195 (set (mem/c:DI (plus:DI (reg/f:DI 1570)
                (const_int 24 [0x18])) [4 prng_state_store.z4+0 S8 A64])
        (reg:DI 789 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 789 [ prng_state_store_z4_lsm.13 ])
        (nil)))
(insn 2720 2717 2723 195 (set (mem/c:DI (plus:DI (reg/f:DI 1570)
                (const_int 16 [0x10])) [4 prng_state_store.z3+0 S8 A64])
        (reg:DI 287 [ prng_state_store_z5_lsm.11 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 287 [ prng_state_store_z5_lsm.11 ])
        (nil)))
(insn 2723 2720 2726 195 (set (mem/c:DI (plus:DI (reg/f:DI 1570)
                (const_int 8 [0x8])) [4 prng_state_store.z2+0 S8 A64])
        (reg:DI 785 [ prng_state_store_z4_lsm.13 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1570)
        (expr_list:REG_DEAD (reg:DI 785 [ prng_state_store_z4_lsm.13 ])
            (nil))))
;;  succ:       196 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859

;; basic block 196, loop depth 0, count 0, freq 2
;;  prev block 195, next block 197, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       191 [100.0%]  (FALLTHRU)
;;              195 [100.0%]  (FALLTHRU)
;;              193 [100.0%] 
;; bb 196 artificial_defs: { }
;; bb 196 artificial_uses: { u2605(29){ }u2606(31){ }u2607(64){ }u2608(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 291 1853 1854 1859
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2726 2723 2727 196 121 "" [1 uses])
(note 2727 2726 2728 196 [bb 196] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2728 2727 2729 196 (var_location:DI p (reg/f:DI 291 [ D.3806 ])) -1
     (nil))
(insn 2729 2728 2730 196 (set (reg:DI 0 x0)
        (reg/f:DI 291 [ D.3806 ])) xalloc.c:132 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 291 [ D.3806 ])
        (nil)))
(call_insn 2730 2729 2848 196 (parallel [
            (call (mem:DI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>) [0 __builtin_free S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) xalloc.c:132 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
;;  succ:       197 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859

;; basic block 197, loop depth 0, count 0, freq 14
;;  prev block 196, next block 198, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       203 [100.0%]  (FALLTHRU)
;;              196 [100.0%]  (FALLTHRU)
;; bb 197 artificial_defs: { }
;; bb 197 artificial_uses: { u2613(29){ }u2614(31){ }u2615(64){ }u2616(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1854
;; lr  def 	 66 [cc] 777 1580 1582
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859
;; live  gen 	 66 [cc] 777 1580 1582
;; live  kill	
(code_label 2848 2730 2731 197 126 "" [0 uses])
(note 2731 2848 2732 197 [bb 197] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2732 2731 2734 197 (var_location:SI m (const_int 0 [0])) -1
     (nil))
(insn 2734 2732 2735 197 (set (reg/f:DI 1580)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) graph500.c:187 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 2735 2734 227 197 (set (reg:SI 1582 [ NBFS ])
        (mem/c:SI (plus:DI (reg/f:DI 1580)
                (const_int 48 [0x30])) [3 NBFS+0 S4 A32])) graph500.c:187 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1580)
        (nil)))
(insn 227 2735 2736 197 (set (reg:DI 777 [ ivtmp.94 ])
        (const_int 0 [0])) graph500.c:187 48 {*movdi_aarch64}
     (nil))
(insn 2736 227 2737 197 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1582 [ NBFS ])
            (const_int 0 [0]))) graph500.c:187 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1582 [ NBFS ])
        (nil)))
(jump_insn 2737 2736 3755 197 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3749)
            (pc))) graph500.c:187 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9775 (nil)))
 -> 3749)
;;  succ:       204 [97.8%] 
;;              198 [2.2%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1853 1854 1859

;; basic block 198, loop depth 0, count 0, freq 4
;;  prev block 197, next block 199, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       197 [2.2%]  (FALLTHRU)
;;              297 [2.2%]  (FALLTHRU,LOOP_EXIT)
;; bb 198 artificial_defs: { }
;; bb 198 artificial_uses: { u2621(29){ }u2622(31){ }u2623(64){ }u2624(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 240 1583 1585
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 240 1583 1585
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3755 2737 2738 198 181 "" [0 uses])
(note 2738 3755 2739 198 [bb 198] NOTE_INSN_BASIC_BLOCK)
(call_insn 2739 2738 2740 198 (parallel [
            (call (mem:DI (symbol_ref:DI ("destroy_graph") [flags 0x43]  <function_decl 0x7f3c5e24c700 destroy_graph>) [0 destroy_graph S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:215 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("destroy_graph") [flags 0x43]  <function_decl 0x7f3c5e24c700 destroy_graph>)
        (nil))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(debug_insn 2740 2739 2741 198 (var_location:DI max_bfsvtx (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2741 2740 2742 198 (var_location:DI bfs_tree (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2742 2741 2743 198 (var_location:DI sz (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2743 2742 2744 198 (var_location:DF R (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2744 2743 2745 198 (var_location:DI t (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2745 2744 2746 198 (var_location:DI k (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2746 2745 2747 198 (var_location:SI err (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2747 2746 2748 198 (var_location:SI m (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2748 2747 2749 198 (var_location:DI has_adj (clobber (const_int 0 [0]))) graph500.c:107 -1
     (nil))
(debug_insn 2749 2748 2751 198 (var_location:DI p (mem/f/c:DI (symbol_ref:DI ("IJ") [flags 0x82]  <var_decl 0x7f3c5e2541b0 IJ>) [2 IJ+0 S8 A64])) graph500.c:109 -1
     (nil))
(insn 2751 2749 2752 198 (set (reg/f:DI 1583)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:109 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1853)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (nil))))
(insn 2752 2751 2753 198 (set (reg:DI 0 x0)
        (mem/f/c:DI (plus:DI (reg/f:DI 1583)
                (const_int 88 [0x58])) [2 IJ+0 S8 A64])) xalloc.c:132 48 {*movdi_aarch64}
     (nil))
(call_insn 2753 2752 2754 198 (parallel [
            (call (mem:DI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>) [0 __builtin_free S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) xalloc.c:132 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 2754 2753 2756 198 (var_location:DI p (clobber (const_int 0 [0]))) graph500.c:109 -1
     (nil))
(insn 2756 2754 2775 198 (set (reg/f:DI 1585)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) graph500.c:111 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 2775 2756 2776 198 (set (reg:SI 3 x3)
        (mem/c:SI (plus:DI (reg/f:DI 1585)
                (const_int 48 [0x30])) [3 NBFS+0 S4 A32])) graph500.c:111 47 {*movsi_aarch64}
     (nil))
(insn 2776 2775 2777 198 (set (reg:DF 37 v5)
        (mem/c:DF (plus:DI (reg/f:DI 1583)
                (const_int 104 [0x68])) [1 construction_time+0 S8 A64])) graph500.c:111 54 {*movdf_aarch64}
     (nil))
(insn 2777 2776 2778 198 (set (reg:DF 36 v4)
        (mem/c:DF (plus:DI (reg/f:DI 1583)
                (const_int 96 [0x60])) [1 generation_time+0 S8 A64])) graph500.c:111 54 {*movdf_aarch64}
     (nil))
(insn 2778 2777 2779 198 (set (reg:DF 35 v3)
        (mem/c:DF (plus:DI (reg/f:DI 1585)
                (const_int 40 [0x28])) [1 D+0 S8 A64])) graph500.c:111 54 {*movdf_aarch64}
     (nil))
(insn 2779 2778 2780 198 (set (reg:DF 34 v2)
        (mem/c:DF (plus:DI (reg/f:DI 1585)
                (const_int 32 [0x20])) [1 C+0 S8 A64])) graph500.c:111 54 {*movdf_aarch64}
     (nil))
(insn 2780 2779 2781 198 (set (reg:DF 33 v1)
        (mem/c:DF (plus:DI (reg/f:DI 1585)
                (const_int 24 [0x18])) [1 B+0 S8 A64])) graph500.c:111 54 {*movdf_aarch64}
     (nil))
(insn 2781 2780 2782 198 (set (reg:DF 32 v0)
        (mem/c:DF (plus:DI (reg/f:DI 1585)
                (const_int 16 [0x10])) [1 A+0 S8 A64])) graph500.c:111 54 {*movdf_aarch64}
     (nil))
(insn 2782 2781 2783 198 (set (reg:DI 2 x2)
        (mem/c:DI (plus:DI (reg/f:DI 1585)
                (const_int 8 [0x8])) [4 edgefactor+0 S8 A64])) graph500.c:111 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1585)
        (nil)))
(insn 2783 2782 2784 198 (set (reg:DI 1 x1)
        (mem/c:DI (plus:DI (reg/f:DI 1583)
                (const_int 24 [0x18])) [4 nvtx_scale+0 S8 A64])) graph500.c:111 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1583)
        (nil)))
(insn 2784 2783 2785 198 (set (reg:DI 0 x0)
        (mem/c:DI (lo_sum:DI (reg/f:DI 1854)
                (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])) [4 SCALE+0 S8 A64])) graph500.c:111 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1854)
        (expr_list:REG_EQUAL (mem/c:DI (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]) [4 SCALE+0 S8 A64])
            (nil))))
(call_insn 2785 2784 267 198 (parallel [
            (call (mem:DI (symbol_ref:DI ("output_results.constprop.5") [flags 0x43]  <function_decl 0x7f3c5e23cc00 output_results.constprop>) [0 output_results.constprop S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:111 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DF 37 v5)
        (expr_list:REG_DEAD (reg:DF 36 v4)
            (expr_list:REG_DEAD (reg:DF 35 v3)
                (expr_list:REG_DEAD (reg:DF 34 v2)
                    (expr_list:REG_DEAD (reg:DF 33 v1)
                        (expr_list:REG_DEAD (reg:DF 32 v0)
                            (expr_list:REG_DEAD (reg:SI 3 x3)
                                (expr_list:REG_DEAD (reg:DI 2 x2)
                                    (expr_list:REG_DEAD (reg:DI 1 x1)
                                        (expr_list:REG_DEAD (reg:DI 0 x0)
                                            (expr_list:REG_CALL_DECL (symbol_ref:DI ("output_results.constprop.5") [flags 0x43]  <function_decl 0x7f3c5e23cc00 output_results.constprop>)
                                                (expr_list:REG_EH_REGION (const_int 0 [0])
                                                    (nil)))))))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DF (use (reg:DF 32 v0))
                            (expr_list:DF (use (reg:DF 33 v1))
                                (expr_list:DF (use (reg:DF 34 v2))
                                    (expr_list:DF (use (reg:DF 35 v3))
                                        (expr_list:DF (use (reg:DF 36 v4))
                                            (expr_list:DF (use (reg:DF 37 v5))
                                                (expr_list:SI (use (reg:SI 3 x3))
                                                    (nil))))))))))))))
(insn 267 2785 2788 198 (set (reg:SI 240 [ D.3797 ])
        (const_int 0 [0])) graph500.c:114 47 {*movsi_aarch64}
     (nil))
;;  succ:       323 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240

;; basic block 199, loop depth 0, count 0, freq 12
;;  prev block 198, next block 200, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       160 [85.0%] 
;; bb 199 artificial_defs: { }
;; bb 199 artificial_uses: { u2670(29){ }u2671(31){ }u2672(64){ }u2673(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 603
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 571 1442 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 66 [cc] 603
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2788 267 2789 199 104 "" [1 uses])
(note 2789 2788 2790 199 [bb 199] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2790 2789 2791 199 (var_location:DI __path (reg/f:DI 571 [ D.3800 ])) graph500.c:175 -1
     (nil))
(debug_insn 2791 2790 2792 199 (var_location:SI __oflag (const_int 0 [0])) graph500.c:175 -1
     (nil))
(insn 2792 2791 2793 199 (set (reg:SI 1 x1)
        (const_int 0 [0])) /usr/aarch64-linux-gnu/include/bits/fcntl2.h:53 47 {*movsi_aarch64}
     (nil))
(insn 2793 2792 2794 199 (set (reg:DI 0 x0)
        (reg/f:DI 571 [ D.3800 ])) /usr/aarch64-linux-gnu/include/bits/fcntl2.h:53 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 571 [ D.3800 ])
        (nil)))
(call_insn 2794 2793 2795 199 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("*open64") [flags 0x41]  <function_decl 0x7f3c5e24c300 __open_alias>) [0 __open_alias S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/fcntl2.h:53 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 x1)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("*open64") [flags 0x41]  <function_decl 0x7f3c5e24c300 __open_alias>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (nil))))))
(insn 2795 2794 2796 199 (set (reg:SI 603 [ D.3797 ])
        (reg:SI 0 x0)) /usr/aarch64-linux-gnu/include/bits/fcntl2.h:53 47 {*movsi_aarch64}
     (nil))
(debug_insn 2796 2795 2797 199 (var_location:DI __path (clobber (const_int 0 [0]))) graph500.c:175 -1
     (nil))
(debug_insn 2797 2796 2798 199 (var_location:SI __oflag (clobber (const_int 0 [0]))) graph500.c:175 -1
     (nil))
(debug_insn 2798 2797 2799 199 (var_location:SI fd (clobber (const_int 0 [0]))) graph500.c:175 -1
     (nil))
(insn 2799 2798 2800 199 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 603 [ D.3797 ])
            (const_int 0 [0]))) graph500.c:175 390 {*cmpsi}
     (nil))
(jump_insn 2800 2799 2801 199 (set (pc)
        (if_then_else (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2809)
            (pc))) graph500.c:175 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2809)
;;  succ:       200 [0.0%]  (FALLTHRU)
;;              201 [100.0%] 
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1710 1853 1854 1859
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1853 1854 1859

;; basic block 200, loop depth 0, count 0, freq 0
;;  prev block 199, next block 201, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       199 [0.0%]  (FALLTHRU)
;; bb 200 artificial_defs: { }
;; bb 200 artificial_uses: { u2682(29){ }u2683(31){ }u2684(64){ }u2685(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1605 1606
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1605 1606
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2801 2800 2802 200 [bb 200] NOTE_INSN_BASIC_BLOCK)
(insn 2802 2801 2803 200 (set (reg/f:DI 1606)
        (high:DI (symbol_ref/f:DI ("*.LC50") [flags 0x82]  <var_decl 0x7f3c5d881480 *.LC50>))) graph500.c:176 48 {*movdi_aarch64}
     (nil))
(insn 2803 2802 2804 200 (set (reg/f:DI 1605)
        (lo_sum:DI (reg/f:DI 1606)
            (symbol_ref/f:DI ("*.LC50") [flags 0x82]  <var_decl 0x7f3c5d881480 *.LC50>))) graph500.c:176 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1606)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC50") [flags 0x82]  <var_decl 0x7f3c5d881480 *.LC50>)
            (nil))))
(insn 2804 2803 2805 200 (set (reg:DI 0 x0)
        (reg/f:DI 1605)) graph500.c:176 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1605)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC50") [flags 0x82]  <var_decl 0x7f3c5d881480 *.LC50>)
            (nil))))
(call_insn 2805 2804 2806 200 (parallel [
            (call (mem:DI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>) [0 perror S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:176 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 2806 2805 2807 200 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) graph500.c:177 47 {*movsi_aarch64}
     (nil))
(call_insn 2807 2806 2809 200 (parallel [
            (call (mem:DI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>) [0 __builtin_exit S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:177 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 201, loop depth 0, count 0, freq 12
;;  prev block 200, next block 202, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       199 [100.0%] 
;; bb 201 artificial_defs: { }
;; bb 201 artificial_uses: { u2692(29){ }u2693(31){ }u2694(64){ }u2695(65){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1710 1853 1854 1859
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1442 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 604 606 608 1607 1609 1613
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1442 1853 1854 1859
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 66 [cc] 604 606 608 1607 1609 1613
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2809 2807 2810 201 124 "" [1 uses])
(note 2810 2809 2812 201 [bb 201] NOTE_INSN_BASIC_BLOCK)
(insn 2812 2810 2813 201 (set (reg/f:DI 1607)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) graph500.c:179 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 2813 2812 2815 201 (set (reg:SI 604 [ D.3797 ])
        (mem/c:SI (plus:DI (reg/f:DI 1607)
                (const_int 48 [0x30])) [3 NBFS+0 S4 A32])) graph500.c:179 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1607)
        (nil)))
(insn 2815 2813 2816 201 (set (reg:DI 1609 [ D.3797 ])
        (sign_extend:DI (reg:SI 604 [ D.3797 ]))) graph500.c:179 80 {*extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 604 [ D.3797 ])
        (nil)))
(insn 2816 2815 2817 201 (set (reg:DI 606 [ D.3802 ])
        (ashift:DI (reg:DI 1609 [ D.3797 ])
            (const_int 3 [0x3]))) graph500.c:179 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1609 [ D.3797 ])
        (nil)))
(debug_insn 2817 2816 2818 201 (var_location:DI sz (reg:DI 606 [ D.3802 ])) graph500.c:179 -1
     (nil))
(debug_insn 2818 2817 2819 201 (var_location:SI __fd (reg:SI 603 [ D.3797 ])) graph500.c:180 -1
     (nil))
(debug_insn 2819 2818 2820 201 (var_location:DI __buf (symbol_ref:DI ("bfs_root") [flags 0x82]  <var_decl 0x7f3c5e2545a0 bfs_root>)) graph500.c:180 -1
     (nil))
(debug_insn 2820 2819 2824 201 (var_location:DI __nbytes (reg:DI 606 [ D.3802 ])) graph500.c:180 -1
     (nil))
(insn 2824 2820 2825 201 (set (reg/f:DI 1613)
        (plus:DI (reg/f:DI 1442)
            (const_int 112 [0x70]))) /usr/aarch64-linux-gnu/include/bits/unistd.h:39 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1442)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                    (const_int 112 [0x70])))
            (nil))))
(insn 2825 2824 2826 201 (set (reg:DI 3 x3)
        (const_int 512 [0x200])) /usr/aarch64-linux-gnu/include/bits/unistd.h:39 48 {*movdi_aarch64}
     (nil))
(insn 2826 2825 2827 201 (set (reg:DI 2 x2)
        (reg:DI 606 [ D.3802 ])) /usr/aarch64-linux-gnu/include/bits/unistd.h:39 48 {*movdi_aarch64}
     (nil))
(insn 2827 2826 2829 201 (set (reg:DI 1 x1)
        (reg/f:DI 1613)) /usr/aarch64-linux-gnu/include/bits/unistd.h:39 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1613)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                    (const_int 112 [0x70])))
            (nil))))
(call_insn 2829 2827 2830 201 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("*__read_chk") [flags 0x41]  <function_decl 0x7f3c5e24c200 __read_chk_warn>) [0 __read_chk_warn S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/unistd.h:39 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__read_chk") [flags 0x41]  <function_decl 0x7f3c5e24c200 __read_chk_warn>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
(insn 2830 2829 2831 201 (set (reg:DI 608 [ D.3798 ])
        (reg:DI 0 x0)) /usr/aarch64-linux-gnu/include/bits/unistd.h:39 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (nil)))
(debug_insn 2831 2830 2832 201 (var_location:SI __fd (clobber (const_int 0 [0]))) graph500.c:180 -1
     (nil))
(debug_insn 2832 2831 2833 201 (var_location:DI __buf (clobber (const_int 0 [0]))) graph500.c:180 -1
     (nil))
(debug_insn 2833 2832 2834 201 (var_location:DI __nbytes (clobber (const_int 0 [0]))) graph500.c:180 -1
     (nil))
(insn 2834 2833 2835 201 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 606 [ D.3802 ])
            (reg:DI 608 [ D.3798 ]))) graph500.c:180 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 608 [ D.3798 ])
        (expr_list:REG_DEAD (reg:DI 606 [ D.3802 ])
            (nil))))
(jump_insn 2835 2834 2836 201 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2844)
            (pc))) graph500.c:180 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2844)
;;  succ:       202 [0.0%]  (FALLTHRU)
;;              203 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1853 1854 1859

;; basic block 202, loop depth 0, count 0, freq 0
;;  prev block 201, next block 203, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       201 [0.0%]  (FALLTHRU)
;; bb 202 artificial_defs: { }
;; bb 202 artificial_uses: { u2718(29){ }u2719(31){ }u2720(64){ }u2721(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1614 1615
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1614 1615
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2836 2835 2837 202 [bb 202] NOTE_INSN_BASIC_BLOCK)
(insn 2837 2836 2838 202 (set (reg/f:DI 1615)
        (high:DI (symbol_ref/f:DI ("*.LC51") [flags 0x82]  <var_decl 0x7f3c5d881510 *.LC51>))) graph500.c:181 48 {*movdi_aarch64}
     (nil))
(insn 2838 2837 2839 202 (set (reg/f:DI 1614)
        (lo_sum:DI (reg/f:DI 1615)
            (symbol_ref/f:DI ("*.LC51") [flags 0x82]  <var_decl 0x7f3c5d881510 *.LC51>))) graph500.c:181 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1615)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC51") [flags 0x82]  <var_decl 0x7f3c5d881510 *.LC51>)
            (nil))))
(insn 2839 2838 2840 202 (set (reg:DI 0 x0)
        (reg/f:DI 1614)) graph500.c:181 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1614)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC51") [flags 0x82]  <var_decl 0x7f3c5d881510 *.LC51>)
            (nil))))
(call_insn 2840 2839 2841 202 (parallel [
            (call (mem:DI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>) [0 perror S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:181 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 2841 2840 2842 202 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) graph500.c:182 47 {*movsi_aarch64}
     (nil))
(call_insn 2842 2841 2844 202 (parallel [
            (call (mem:DI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>) [0 __builtin_exit S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:182 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f3c5e24c900 exit>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 203, loop depth 0, count 0, freq 12
;;  prev block 202, next block 204, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       201 [100.0%] 
;; bb 203 artificial_defs: { }
;; bb 203 artificial_uses: { u2728(29){ }u2729(31){ }u2730(64){ }u2731(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 603 1853 1854 1859
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2844 2842 2845 203 125 "" [1 uses])
(note 2845 2844 2846 203 [bb 203] NOTE_INSN_BASIC_BLOCK)
(insn 2846 2845 2847 203 (set (reg:SI 0 x0)
        (reg:SI 603 [ D.3797 ])) graph500.c:184 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 603 [ D.3797 ])
        (nil)))
(call_insn 2847 2846 3749 203 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("close") [flags 0x41]  <function_decl 0x7f3c5e239900 close>) [0 close S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:184 42 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("close") [flags 0x41]  <function_decl 0x7f3c5e239900 close>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (nil)))))
;;  succ:       197 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1710 1853 1854 1859
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853 1854 1859

;; basic block 204, loop depth 0, count 0, freq 14
;;  prev block 203, next block 205, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       197 [97.8%] 
;; bb 204 artificial_defs: { }
;; bb 204 artificial_uses: { u2739(29){ }u2740(31){ }u2741(64){ }u2742(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1710 1853 1854 1859
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1853
;; lr  def 	 1616 1875 1876 1877 1878
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1853 1854 1859
;; live  gen 	 1616 1875 1876 1877 1878
;; live  kill	
(code_label 3749 2847 2853 204 180 "" [1 uses])
(note 2853 3749 2857 204 [bb 204] NOTE_INSN_BASIC_BLOCK)
(insn 2857 2853 2883 204 (set (reg/f:DI 1616)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:191 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
        (nil)))
(insn 2883 2857 2911 204 (set (reg/f:DI 1875)
        (plus:DI (reg/f:DI 1616)
            (const_int 112 [0x70]))) graph500.c:192 95 {*adddi3_aarch64}
     (nil))
(insn 2911 2883 2912 204 (set (reg/f:DI 1876)
        (high:DI (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2912 2911 2951 204 (set (reg/f:DI 1877)
        (lo_sum:DI (reg/f:DI 1876)
            (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>)
        (expr_list:REG_DEAD (reg/f:DI 1635)
            (nil))))
(insn 2951 2912 4332 204 (set (reg:DF 1878)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC54") [flags 0x2]) [1  S8 A64])) timer.c:69 54 {*movdf_aarch64}
     (nil))
;;  succ:       205 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1853 1854 1859 1875 1877 1878

;; basic block 205, loop depth 0, count 0, freq 193, maybe hot
;;  prev block 204, next block 206, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       204 [100.0%]  (FALLTHRU)
;;              297 [97.8%]  (DFS_BACK)
;; bb 205 artificial_defs: { }
;; bb 205 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 611 613 647 752
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 66 [cc] 611 613 647 752
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 4332 2951 4331 205 275 "" [1 uses])
(note 4331 4332 2854 205 [bb 205] NOTE_INSN_BASIC_BLOCK)
(insn 2854 4331 2855 205 (set (reg/v:SI 752 [ m ])
        (subreg:SI (reg:DI 777 [ ivtmp.94 ]) 0)) 47 {*movsi_aarch64}
     (nil))
(debug_insn 2855 2854 2858 205 (var_location:SI m (subreg:SI (reg:DI 777 [ ivtmp.94 ]) 0)) -1
     (nil))
(insn 2858 2855 2859 205 (set (reg:DI 611 [ D.3798 ])
        (mem/c:DI (plus:DI (reg/f:DI 1616)
                (const_int 24 [0x18])) [4 nvtx_scale+0 S8 A64])) graph500.c:191 48 {*movdi_aarch64}
     (nil))
(insn 2859 2858 2860 205 (set (reg:DI 613 [ D.3802 ])
        (ashift:DI (reg:DI 611 [ D.3798 ])
            (const_int 3 [0x3]))) graph500.c:191 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(debug_insn 2860 2859 2861 205 (var_location:DI sz (reg:DI 613 [ D.3802 ])) graph500.c:191 -1
     (nil))
(debug_insn 2861 2860 2862 205 (var_location:DI n (reg:DI 613 [ D.3802 ])) -1
     (nil))
(insn 2862 2861 2863 205 (set (reg:DI 0 x0)
        (reg:DI 613 [ D.3802 ])) generator/utils.c:32 48 {*movdi_aarch64}
     (nil))
(call_insn 2863 2862 2864 205 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f3c5e24cb00 malloc>) [0 __builtin_malloc S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/utils.c:32 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f3c5e24cb00 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 2864 2863 2866 205 (set (reg/v/f:DI 647 [ bfs_tree ])
        (reg:DI 0 x0)) generator/utils.c:32 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_NOALIAS (reg/f:DI 1618)
            (nil))))
(debug_insn 2866 2864 2867 205 (var_location:DI p (reg/v/f:DI 647 [ bfs_tree ])) generator/utils.c:32 -1
     (nil))
(insn 2867 2866 2868 205 (set (reg:CC 66 cc)
        (compare:CC (reg/v/f:DI 647 [ bfs_tree ])
            (const_int 0 [0]))) generator/utils.c:33 391 {*cmpdi}
     (nil))
(jump_insn 2868 2867 2869 205 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2873)
            (pc))) generator/utils.c:33 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2873)
;;  succ:       206 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              207 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 613 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 613 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 206, loop depth 0, count 0, freq 0
;;  prev block 205, next block 207, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       205 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 206 artificial_defs: { }
;; bb 206 artificial_uses: { u2758(29){ }u2759(31){ }u2760(64){ }u2761(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 613
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2869 2868 2870 206 [bb 206] NOTE_INSN_BASIC_BLOCK)
(insn 2870 2869 2871 206 (set (reg:DI 0 x0)
        (reg:DI 613 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 613 [ D.3802 ])
        (nil)))
(call_insn/c/i 2871 2870 2873 206 (parallel [
            (call (mem:DI (symbol_ref:DI ("xmalloc.part.0.lto_priv.11") [flags 0x43]  <function_decl 0x7f3c5e24cc00 xmalloc.part.0>) [0 xmalloc.part.0 S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("xmalloc.part.0.lto_priv.11") [flags 0x43]  <function_decl 0x7f3c5e24cc00 xmalloc.part.0>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 207, loop depth 0, count 0, freq 193, maybe hot
;;  prev block 206, next block 208, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       205 [100.0%] 
;; bb 207 artificial_defs: { }
;; bb 207 artificial_uses: { u2765(29){ }u2766(31){ }u2767(64){ }u2768(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 777 1875
;; lr  def 	 66 [cc] 811 1623
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 611 647 752 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 811 1623
;; live  kill	
(code_label 2873 2871 2874 207 127 "" [1 uses])
(note 2874 2873 2875 207 [bb 207] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2875 2874 2876 207 (var_location:DI n (clobber (const_int 0 [0]))) xalloc.c:104 -1
     (nil))
(debug_insn 2876 2875 2877 207 (var_location:DI p (clobber (const_int 0 [0]))) xalloc.c:104 -1
     (nil))
(debug_insn 2877 2876 2878 207 (var_location:DI sz (clobber (const_int 0 [0]))) graph500.c:191 -1
     (nil))
(debug_insn 2878 2877 2879 207 (var_location:DI bfs_tree (clobber (const_int 0 [0]))) graph500.c:191 -1
     (nil))
(insn 2879 2878 2884 207 (set (reg:DI 811 [ D.3805 ])
        (ashift:DI (reg:DI 777 [ ivtmp.94 ])
            (const_int 3 [0x3]))) 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 2884 2879 2885 207 (set (reg:DI 1623 [ MEM[symbol: bfs_root, index: _1361, offset: 0B] ])
        (mem:DI (plus:DI (reg:DI 811 [ D.3805 ])
                (reg/f:DI 1875)) [4 MEM[symbol: bfs_root, index: _1361, offset: 0B]+0 S8 A64])) graph500.c:192 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1622)
        (nil)))
(insn 2885 2884 2886 207 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 611 [ D.3798 ])
            (reg:DI 1623 [ MEM[symbol: bfs_root, index: _1361, offset: 0B] ]))) graph500.c:192 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1623 [ MEM[symbol: bfs_root, index: _1361, offset: 0B] ])
        (expr_list:REG_DEAD (reg:DI 611 [ D.3798 ])
            (nil))))
(jump_insn 2886 2885 2887 207 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2901)
            (pc))) graph500.c:192 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2901)
;;  succ:       208 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              209 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 208, loop depth 0, count 0, freq 0
;;  prev block 207, next block 209, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       207 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 208 artificial_defs: { }
;; bb 208 artificial_uses: { u2778(29){ }u2779(31){ }u2780(64){ }u2781(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1624 1625 1626 1627 1628 1629 1630
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1624 1625 1626 1627 1628 1629 1630
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2887 2886 2888 208 [bb 208] NOTE_INSN_BASIC_BLOCK)
(insn 2888 2887 2889 208 (set (reg/f:DI 1625)
        (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) graph500.c:192 48 {*movdi_aarch64}
     (nil))
(insn 2889 2888 2890 208 (set (reg/f:DI 1624)
        (lo_sum:DI (reg/f:DI 1625)
            (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) graph500.c:192 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1625)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 2890 2889 2891 208 (set (reg/f:DI 1626)
        (plus:DI (reg/f:DI 1624)
            (const_int 32 [0x20]))) graph500.c:192 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1624)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 32 [0x20])))
            (nil))))
(insn 2891 2890 2892 208 (set (reg/f:DI 1628)
        (high:DI (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))) graph500.c:192 48 {*movdi_aarch64}
     (nil))
(insn 2892 2891 2893 208 (set (reg/f:DI 1627)
        (lo_sum:DI (reg/f:DI 1628)
            (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>))) graph500.c:192 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1628)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
            (nil))))
(insn 2893 2892 2894 208 (set (reg/f:DI 1630)
        (high:DI (symbol_ref/f:DI ("*.LC52") [flags 0x82]  <var_decl 0x7f3c5d8815a0 *.LC52>))) graph500.c:192 48 {*movdi_aarch64}
     (nil))
(insn 2894 2893 2895 208 (set (reg/f:DI 1629)
        (lo_sum:DI (reg/f:DI 1630)
            (symbol_ref/f:DI ("*.LC52") [flags 0x82]  <var_decl 0x7f3c5d8815a0 *.LC52>))) graph500.c:192 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1630)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC52") [flags 0x82]  <var_decl 0x7f3c5d8815a0 *.LC52>)
            (nil))))
(insn 2895 2894 2896 208 (set (reg:DI 3 x3)
        (reg/f:DI 1626)) graph500.c:192 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1626)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 32 [0x20])))
            (nil))))
(insn 2896 2895 2897 208 (set (reg:SI 2 x2)
        (const_int 192 [0xc0])) graph500.c:192 47 {*movsi_aarch64}
     (nil))
(insn 2897 2896 2898 208 (set (reg:DI 1 x1)
        (reg/f:DI 1627)) graph500.c:192 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1627)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC31") [flags 0x82]  <var_decl 0x7f3c5d840ab0 *.LC31>)
            (nil))))
(insn 2898 2897 2899 208 (set (reg:DI 0 x0)
        (reg/f:DI 1629)) graph500.c:192 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1629)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC52") [flags 0x82]  <var_decl 0x7f3c5d8815a0 *.LC52>)
            (nil))))
(call_insn 2899 2898 2901 208 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:192 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 209, loop depth 0, count 0, freq 193, maybe hot
;;  prev block 208, next block 211, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       207 [100.0%] 
;; bb 209 artificial_defs: { }
;; bb 209 artificial_uses: { u2794(29){ }u2795(31){ }u2796(64){ }u2797(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616
;; lr  def 	 66 [cc] 1633
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 1633
;; live  kill	
(code_label 2901 2899 2902 209 128 "" [1 uses])
(note 2902 2901 2905 209 [bb 209] NOTE_INSN_BASIC_BLOCK)
(insn 2905 2902 2906 209 (set (reg:SI 1633 [ VERBOSE ])
        (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])) graph500.c:194 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1616)
        (nil)))
(insn 2906 2905 2907 209 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1633 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:194 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1633 [ VERBOSE ])
        (nil)))
(jump_insn 2907 2906 2908 209 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 2921)
            (pc))) graph500.c:194 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 2921)
;;  succ:       211 [29.0%]  (FALLTHRU)
;;              212 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 211, loop depth 0, count 0, freq 56, maybe hot
;;  prev block 209, next block 212, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       209 [29.0%]  (FALLTHRU)
;; bb 211 artificial_defs: { }
;; bb 211 artificial_uses: { u2803(29){ }u2804(31){ }u2805(64){ }u2806(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1877
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1636 1638 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1636 1638 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2908 2907 2909 211 [bb 211] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2909 2908 2910 211 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:194 -1
     (nil))
(debug_insn 2910 2909 2913 211 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>)) graph500.c:194 -1
     (nil))
(insn 2913 2910 2914 211 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:194 48 {*movdi_aarch64}
     (nil))
(insn 2914 2913 2915 211 (set (reg/f:DI 1636)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:194 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 2915 2914 2916 211 (set (reg/f:DI 1638 [ stderr ])
        (mem/f/c:DI (reg/f:DI 1636) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1636)
        (nil)))
(insn 2916 2915 2917 211 (set (reg:SI 3 x3)
        (subreg:SI (reg:DI 777 [ ivtmp.94 ]) 0)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2917 2916 2918 211 (set (reg:DI 2 x2)
        (reg/f:DI 1877)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1634)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC53") [flags 0x82]  <var_decl 0x7f3c5d881630 *.LC53>)
            (nil))))
(insn 2918 2917 2919 211 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2919 2918 2920 211 (set (reg:DI 0 x0)
        (reg/f:DI 1638 [ stderr ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1638 [ stderr ])
        (nil)))
(call_insn 2920 2919 2921 211 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:SI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:SI (use (reg:SI 3 x3))
                            (nil))))))))
;;  succ:       212 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 212, loop depth 0, count 0, freq 193, maybe hot
;;  prev block 211, next block 213, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       211 [100.0%]  (FALLTHRU)
;;              209 [71.0%] 
;; bb 212 artificial_defs: { }
;; bb 212 artificial_uses: { u2818(29){ }u2819(31){ }u2820(64){ }u2821(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 811 1616 1859 1875 1878
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 618 653 659 1639 1645 1646 1647 1648 1649 1652 1653 1654 1656 1657 1660 1661 1662 1663 1664 1665 1668
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 618 653 659 1639 1645 1646 1647 1648 1649 1652 1653 1654 1656 1657 1660 1661 1662 1663 1664 1665 1668
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 2921 2920 2922 212 129 "" [1 uses])
(note 2922 2921 2924 212 [bb 212] NOTE_INSN_BASIC_BLOCK)
(insn 2924 2922 2925 212 (set (reg/f:DI 1639)
        (lo_sum:DI (reg/f:DI 1859)
            (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>))) timer.c:43 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
        (nil)))
(insn 2925 2924 2926 212 (set (reg:DI 1 x1)
        (reg/f:DI 1639)) timer.c:43 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (symbol_ref:DI ("tic_ts.lto_priv.16") [flags 0xc2]  <var_decl 0x7f3c5e254750 tic_ts>)
        (nil)))
(insn 2926 2925 2927 212 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) timer.c:43 47 {*movsi_aarch64}
     (nil))
(call_insn 2927 2926 2932 212 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>) [0 clock_gettime S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) timer.c:43 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_UNUSED (reg:SI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 2932 2927 2933 212 (set (reg:DI 1645 [ MEM[symbol: bfs_root, index: _1361, offset: 0B] ])
        (mem:DI (plus:DI (reg:DI 811 [ D.3805 ])
                (reg/f:DI 1875)) [4 MEM[symbol: bfs_root, index: _1361, offset: 0B]+0 S8 A64])) graph500.c:195 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1644)
        (nil)))
(insn 2933 2932 2934 212 (set (reg/f:DI 1646)
        (plus:DI (reg/f:DI 64 sfp)
            (const_int -48 [0xffffffffffffffd0]))) graph500.c:195 95 {*adddi3_aarch64}
     (nil))
(insn 2934 2933 2935 212 (set (reg:DI 2 x2)
        (reg:DI 1645 [ MEM[symbol: bfs_root, index: _1361, offset: 0B] ])) graph500.c:195 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1645 [ MEM[symbol: bfs_root, index: _1361, offset: 0B] ])
        (nil)))
(insn 2935 2934 2936 212 (set (reg:DI 1 x1)
        (reg/f:DI 1646)) graph500.c:195 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1646)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))
(insn 2936 2935 2937 212 (set (reg:DI 0 x0)
        (reg/v/f:DI 647 [ bfs_tree ])) graph500.c:195 48 {*movdi_aarch64}
     (nil))
(call_insn 2937 2936 2938 212 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("make_bfs_tree") [flags 0x43]  <function_decl 0x7f3c5e24c800 make_bfs_tree>) [0 make_bfs_tree S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:195 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("make_bfs_tree") [flags 0x43]  <function_decl 0x7f3c5e24c800 make_bfs_tree>)
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(insn 2938 2937 2939 212 (set (reg/v:SI 618 [ err ])
        (reg:SI 0 x0)) graph500.c:195 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 0 x0)
        (nil)))
(debug_insn 2939 2938 2940 212 (var_location:SI err (reg/v:SI 618 [ err ])) graph500.c:195 -1
     (nil))
(insn 2940 2939 2941 212 (set (reg/f:DI 1647)
        (plus:DI (reg/f:DI 64 sfp)
            (const_int -40 [0xffffffffffffffd8]))) timer.c:68 95 {*adddi3_aarch64}
     (nil))
(insn 2941 2940 2942 212 (set (reg:DI 1 x1)
        (reg/f:DI 1647)) timer.c:68 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1647)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8]))
            (nil))))
(insn 2942 2941 2943 212 (set (reg:SI 0 x0)
        (const_int 1 [0x1])) timer.c:68 47 {*movsi_aarch64}
     (nil))
(call_insn 2943 2942 2944 212 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>) [0 clock_gettime S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) timer.c:68 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_UNUSED (reg:SI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("clock_gettime") [flags 0x41]  <function_decl 0x7f3c5e24cd00 clock_gettime>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 2944 2943 2945 212 (set (reg:DI 1649 [ ts.tv_nsec ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [4 ts.tv_nsec+0 S8 A64])) timer.c:69 48 {*movdi_aarch64}
     (nil))
(insn 2945 2944 2948 212 (set (reg:DF 1648 [ D.3804 ])
        (float:DF (reg:DI 1649 [ ts.tv_nsec ]))) timer.c:69 798 {floatdidf2}
     (expr_list:REG_DEAD (reg:DI 1649 [ ts.tv_nsec ])
        (nil)))
(insn 2948 2945 2949 212 (set (reg:DI 1653 [ tic_ts.tv_nsec ])
        (mem/c:DI (plus:DI (reg/f:DI 1639)
                (const_int 8 [0x8])) [4 tic_ts.tv_nsec+0 S8 A64])) timer.c:69 48 {*movdi_aarch64}
     (nil))
(insn 2949 2948 2950 212 (set (reg:DF 1652 [ D.3804 ])
        (float:DF (reg:DI 1653 [ tic_ts.tv_nsec ]))) timer.c:69 798 {floatdidf2}
     (expr_list:REG_DEAD (reg:DI 1653 [ tic_ts.tv_nsec ])
        (nil)))
(insn 2950 2949 2952 212 (set (reg:DF 1654 [ D.3804 ])
        (minus:DF (reg:DF 1648 [ D.3804 ])
            (reg:DF 1652 [ D.3804 ]))) timer.c:69 807 {subdf3}
     (expr_list:REG_DEAD (reg:DF 1652 [ D.3804 ])
        (expr_list:REG_DEAD (reg:DF 1648 [ D.3804 ])
            (nil))))
(insn 2952 2950 2953 212 (set (reg/v:DF 653 [ out ])
        (mult:DF (reg:DF 1654 [ D.3804 ])
            (reg:DF 1878))) timer.c:69 809 {muldf3}
     (expr_list:REG_DEAD (reg:DF 1655)
        (expr_list:REG_DEAD (reg:DF 1654 [ D.3804 ])
            (nil))))
(debug_insn 2953 2952 2954 212 (var_location:DF out (reg/v:DF 653 [ out ])) timer.c:69 -1
     (nil))
(insn 2954 2953 2955 212 (set (reg:DI 1657 [ ts.tv_sec ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 ts.tv_sec+0 S8 A64])) timer.c:70 48 {*movdi_aarch64}
     (nil))
(insn 2955 2954 2958 212 (set (reg:DF 1656 [ D.3804 ])
        (float:DF (reg:DI 1657 [ ts.tv_sec ]))) timer.c:70 798 {floatdidf2}
     (expr_list:REG_DEAD (reg:DI 1657 [ ts.tv_sec ])
        (nil)))
(insn 2958 2955 2959 212 (set (reg:DI 1661 [ tic_ts.tv_sec ])
        (mem/c:DI (reg/f:DI 1639) [4 tic_ts.tv_sec+0 S8 A64])) timer.c:70 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1639)
        (nil)))
(insn 2959 2958 2960 212 (set (reg:DF 1660 [ D.3804 ])
        (float:DF (reg:DI 1661 [ tic_ts.tv_sec ]))) timer.c:70 798 {floatdidf2}
     (expr_list:REG_DEAD (reg:DI 1661 [ tic_ts.tv_sec ])
        (nil)))
(insn 2960 2959 2961 212 (set (reg:DF 1662 [ D.3804 ])
        (minus:DF (reg:DF 1656 [ D.3804 ])
            (reg:DF 1660 [ D.3804 ]))) timer.c:70 807 {subdf3}
     (expr_list:REG_DEAD (reg:DF 1660 [ D.3804 ])
        (expr_list:REG_DEAD (reg:DF 1656 [ D.3804 ])
            (nil))))
(insn 2961 2960 2963 212 (set (reg/v:DF 659 [ out ])
        (plus:DF (reg:DF 1662 [ D.3804 ])
            (reg/v:DF 653 [ out ]))) timer.c:70 805 {adddf3}
     (expr_list:REG_DEAD (reg:DF 1662 [ D.3804 ])
        (expr_list:REG_DEAD (reg/v:DF 653 [ out ])
            (nil))))
(debug_insn 2963 2961 2964 212 (var_location:DF out (clobber (const_int 0 [0]))) graph500.c:195 -1
     (nil))
(insn 2964 2963 2965 212 (set (reg/f:DI 1665)
        (high:DI (symbol_ref:DI ("bfs_time.lto_priv.14") [flags 0xc2]  <var_decl 0x7f3c5e254240 bfs_time>))) graph500.c:195 48 {*movdi_aarch64}
     (nil))
(insn 2965 2964 2966 212 (set (reg/f:DI 1664)
        (lo_sum:DI (reg/f:DI 1665)
            (symbol_ref:DI ("bfs_time.lto_priv.14") [flags 0xc2]  <var_decl 0x7f3c5e254240 bfs_time>))) graph500.c:195 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1665)
        (expr_list:REG_EQUAL (symbol_ref:DI ("bfs_time.lto_priv.14") [flags 0xc2]  <var_decl 0x7f3c5e254240 bfs_time>)
            (nil))))
(insn 2966 2965 2967 212 (set (reg/f:DI 1663)
        (plus:DI (reg:DI 811 [ D.3805 ])
            (reg/f:DI 1664))) graph500.c:195 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1664)
        (nil)))
(insn 2967 2966 2970 212 (set (mem:DF (reg/f:DI 1663) [1 MEM[symbol: bfs_time, index: _1361, offset: 0B]+0 S8 A64])
        (reg/v:DF 659 [ out ])) graph500.c:195 54 {*movdf_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1663)
        (expr_list:REG_DEAD (reg/v:DF 659 [ out ])
            (nil))))
(insn 2970 2967 2971 212 (set (reg:SI 1668 [ VERBOSE ])
        (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])) graph500.c:196 47 {*movsi_aarch64}
     (nil))
(insn 2971 2970 2972 212 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1668 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:196 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1668 [ VERBOSE ])
        (nil)))
(jump_insn 2972 2971 2973 212 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3847)
            (pc))) graph500.c:196 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7100 (nil)))
 -> 3847)
;;  succ:       213 [29.0%]  (FALLTHRU)
;;              310 [71.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 213, loop depth 0, count 0, freq 56, maybe hot
;;  prev block 212, next block 214, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       212 [29.0%]  (FALLTHRU)
;; bb 213 artificial_defs: { }
;; bb 213 artificial_uses: { u2879(29){ }u2880(31){ }u2881(64){ }u2882(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1669 1670 1671 1673 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 1669 1670 1671 1673 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 2973 2972 2974 213 [bb 213] NOTE_INSN_BASIC_BLOCK)
(debug_insn 2974 2973 2975 213 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:196 -1
     (nil))
(debug_insn 2975 2974 2976 213 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)) graph500.c:196 -1
     (nil))
(insn 2976 2975 2977 213 (set (reg/f:DI 1670)
        (high:DI (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2977 2976 2978 213 (set (reg/f:DI 1669)
        (lo_sum:DI (reg/f:DI 1670)
            (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1670)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)
            (nil))))
(insn 2978 2977 2979 213 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:196 48 {*movdi_aarch64}
     (nil))
(insn 2979 2978 2980 213 (set (reg/f:DI 1671)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:196 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
            (nil))))
(insn 2980 2979 2981 213 (set (reg/f:DI 1673 [ stderr ])
        (mem/f/c:DI (reg/f:DI 1671) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 2981 2980 2982 213 (set (reg:DI 2 x2)
        (reg/f:DI 1669)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1669)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)
            (nil))))
(insn 2982 2981 2983 213 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 2983 2982 2984 213 (set (reg:DI 0 x0)
        (reg/f:DI 1673 [ stderr ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1673 [ stderr ])
        (nil)))
(call_insn 2984 2983 2985 213 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(insn 2985 2984 2986 213 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 618 [ err ])
            (const_int 0 [0]))) graph500.c:198 390 {*cmpsi}
     (expr_list:REG_DEAD (reg/v:SI 618 [ err ])
        (nil)))
(jump_insn 2986 2985 3849 213 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 2994)
            (pc))) graph500.c:198 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 2994)
;;  succ:       214 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              215 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878

;; basic block 214, loop depth 0, count 0, freq 0
;;  prev block 213, next block 215, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       213 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              310 [0.0%]  (LOOP_EXIT)
;; bb 214 artificial_defs: { }
;; bb 214 artificial_uses: { u2894(29){ }u2895(31){ }u2896(64){ }u2897(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1674 1675
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1674 1675
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3849 2986 2987 214 186 "" [1 uses])
(note 2987 3849 2988 214 [bb 214] NOTE_INSN_BASIC_BLOCK)
(insn 2988 2987 2989 214 (set (reg/f:DI 1675)
        (high:DI (symbol_ref/f:DI ("*.LC56") [flags 0x82]  <var_decl 0x7f3c5d881750 *.LC56>))) graph500.c:199 48 {*movdi_aarch64}
     (nil))
(insn 2989 2988 2990 214 (set (reg/f:DI 1674)
        (lo_sum:DI (reg/f:DI 1675)
            (symbol_ref/f:DI ("*.LC56") [flags 0x82]  <var_decl 0x7f3c5d881750 *.LC56>))) graph500.c:199 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1675)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC56") [flags 0x82]  <var_decl 0x7f3c5d881750 *.LC56>)
            (nil))))
(insn 2990 2989 2991 214 (set (reg:DI 0 x0)
        (reg/f:DI 1674)) graph500.c:199 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1674)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC56") [flags 0x82]  <var_decl 0x7f3c5d881750 *.LC56>)
            (nil))))
(call_insn 2991 2990 2992 214 (parallel [
            (call (mem:DI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>) [0 perror S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:199 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f3c5e24c000 perror>)
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(call_insn 2992 2991 2994 214 (parallel [
            (call (mem:DI (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>) [0 __builtin_abort S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:200 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 215, loop depth 0, count 0, freq 56, maybe hot
;;  prev block 214, next block 217, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       213 [100.0%] 
;; bb 215 artificial_defs: { }
;; bb 215 artificial_uses: { u2903(29){ }u2904(31){ }u2905(64){ }u2906(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616
;; lr  def 	 66 [cc] 1678
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 1678
;; live  kill	
(code_label 2994 2992 2995 215 131 "" [1 uses])
(note 2995 2994 2998 215 [bb 215] NOTE_INSN_BASIC_BLOCK)
(insn 2998 2995 2999 215 (set (reg:SI 1678 [ VERBOSE ])
        (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])) graph500.c:203 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1641)
        (nil)))
(insn 2999 2998 3000 215 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1678 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:203 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1678 [ VERBOSE ])
        (nil)))
(jump_insn 3000 2999 3004 215 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3004)
            (pc))) graph500.c:203 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9990 (nil)))
 -> 3004)
;;  succ:       217 [99.9%] 
;;              218 [0.1%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878

;; basic block 217, loop depth 0, count 0, freq 56, maybe hot
;;  prev block 215, next block 218, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       215 [99.9%] 
;; bb 217 artificial_defs: { }
;; bb 217 artificial_uses: { u2912(29){ }u2913(31){ }u2914(64){ }u2915(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1671
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1679 1680 1683
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1671 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1679 1680 1683
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3004 3000 3005 217 132 "" [1 uses])
(note 3005 3004 3006 217 [bb 217] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3006 3005 3007 217 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:203 -1
     (nil))
(debug_insn 3007 3006 3008 217 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>)) graph500.c:203 -1
     (nil))
(insn 3008 3007 3009 217 (set (reg/f:DI 1680)
        (high:DI (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 3009 3008 3012 217 (set (reg/f:DI 1679)
        (lo_sum:DI (reg/f:DI 1680)
            (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1680)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>)
            (nil))))
(insn 3012 3009 3013 217 (set (reg/f:DI 1683 [ stderr ])
        (mem/f/c:DI (reg/f:DI 1671) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1671)
        (nil)))
(insn 3013 3012 3014 217 (set (reg:SI 3 x3)
        (reg/v:SI 752 [ m ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 3014 3013 3015 217 (set (reg:DI 2 x2)
        (reg/f:DI 1679)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1679)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC57") [flags 0x82]  <var_decl 0x7f3c5d8817e0 *.LC57>)
            (nil))))
(insn 3015 3014 3016 217 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 3016 3015 3017 217 (set (reg:DI 0 x0)
        (reg/f:DI 1683 [ stderr ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1683 [ stderr ])
        (nil)))
(call_insn 3017 3016 3018 217 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 3 x3)
        (expr_list:REG_DEAD (reg:DI 2 x2)
            (expr_list:REG_DEAD (reg:SI 1 x1)
                (expr_list:REG_UNUSED (reg:SI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:SI (use (reg:SI 3 x3))
                            (nil))))))))
;;  succ:       218 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 218, loop depth 0, count 0, freq 193, maybe hot
;;  prev block 217, next block 219, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       215 [0.1%]  (FALLTHRU)
;;              217 [100.0%]  (FALLTHRU)
;;              310 [100.0%]  (FALLTHRU)
;; bb 218 artificial_defs: { }
;; bb 218 artificial_uses: { u2928(29){ }u2929(31){ }u2930(64){ }u2931(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1875
;; lr  def 	 66 [cc] 623 624 1861
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 623 624 1861
;; live  kill	
(code_label 3018 3017 3019 218 133 "" [0 uses])
(note 3019 3018 3020 218 [bb 218] NOTE_INSN_BASIC_BLOCK)
(insn 3020 3019 3025 218 (set (reg:DI 623 [ D.3798 ])
        (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -48 [0xffffffffffffffd0])) [4 max_bfsvtx+0 S8 A128])) graph500.c:204 48 {*movdi_aarch64}
     (nil))
(insn 3025 3020 3026 218 (set (reg:DI 624 [ D.3798 ])
        (mem:DI (plus:DI (reg:DI 811 [ D.3805 ])
                (reg/f:DI 1875)) [4 MEM[symbol: bfs_root, index: _1361, offset: 0B]+0 S8 A64])) graph500.c:204 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1687)
        (nil)))
(debug_insn 3026 3025 3027 218 (var_location:DI D#35 (mem/f/c:DI (symbol_ref:DI ("IJ") [flags 0x82]  <var_decl 0x7f3c5e2541b0 IJ>) [2 IJ+0 S8 A64])) graph500.c:204 -1
     (nil))
(debug_insn 3027 3026 3028 218 (var_location:DI D#34 (mem/c:DI (symbol_ref:DI ("nedge") [flags 0x82]  <var_decl 0x7f3c5e254120 nedge>) [4 nedge+0 S8 A64])) graph500.c:204 -1
     (nil))
(debug_insn 3028 3027 3029 218 (var_location:DI bfs_tree_in (reg/v/f:DI 647 [ bfs_tree ])) graph500.c:204 -1
     (nil))
(debug_insn 3029 3028 3030 218 (var_location:DI max_bfsvtx (reg:DI 623 [ D.3798 ])) graph500.c:204 -1
     (nil))
(debug_insn 3030 3029 3031 218 (var_location:DI root (reg:DI 624 [ D.3798 ])) graph500.c:204 -1
     (nil))
(debug_insn 3031 3030 3032 218 (var_location:DI IJ_in (debug_expr:DI D#35)) graph500.c:204 -1
     (nil))
(debug_insn 3032 3031 3033 218 (var_location:DI nedge (debug_expr:DI D#34)) graph500.c:204 -1
     (nil))
(debug_insn 3033 3032 3034 218 (var_location:DI bfs_tree (reg/v/f:DI 647 [ bfs_tree ])) verify.c:83 -1
     (nil))
(debug_insn 3034 3033 3035 218 (var_location:DI IJ (debug_expr:DI D#35)) verify.c:84 -1
     (nil))
(insn 3035 3034 3036 218 (set (reg:DI 1861 [ D.3798 ])
        (plus:DI (reg:DI 623 [ D.3798 ])
            (const_int 1 [0x1]))) verify.c:89 95 {*adddi3_aarch64}
     (nil))
(debug_insn 3036 3035 3037 218 (var_location:DI nv (reg:DI 1861 [ D.3798 ])) verify.c:89 -1
     (nil))
(insn 3037 3036 3038 218 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 623 [ D.3798 ])
            (reg:DI 624 [ D.3798 ]))) verify.c:96 391 {*cmpdi}
     (nil))
(jump_insn 3038 3037 3039 218 (set (pc)
        (if_then_else (lt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3923)
            (pc))) verify.c:96 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 400 (nil)))
 -> 3923)
;;  succ:       320 [4.0%] 
;;              219 [96.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 219, loop depth 0, count 0, freq 185, maybe hot
;;  prev block 218, next block 220, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       218 [96.0%]  (FALLTHRU)
;; bb 219 artificial_defs: { }
;; bb 219 artificial_uses: { u2946(29){ }u2947(31){ }u2948(64){ }u2949(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647
;; lr  def 	 66 [cc] 1688
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1688
;; live  kill	
(note 3039 3038 3040 219 [bb 219] NOTE_INSN_BASIC_BLOCK)
(insn 3040 3039 3041 219 (set (reg:DI 1688 [ *_638 ])
        (mem:DI (plus:DI (mult:DI (reg:DI 624 [ D.3798 ])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 647 [ bfs_tree ])) [4 *_638+0 S8 A64])) verify.c:96 48 {*movdi_aarch64}
     (nil))
(insn 3041 3040 3042 219 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 624 [ D.3798 ])
            (reg:DI 1688 [ *_638 ]))) verify.c:96 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1688 [ *_638 ])
        (nil)))
(jump_insn 3042 3041 3043 219 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3923)
            (pc))) verify.c:96 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2078 (nil)))
 -> 3923)
;;  succ:       320 [20.8%] 
;;              220 [79.2%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 220, loop depth 0, count 0, freq 147, maybe hot
;;  prev block 219, next block 221, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       219 [79.2%]  (FALLTHRU)
;; bb 220 artificial_defs: { }
;; bb 220 artificial_uses: { u2955(29){ }u2956(31){ }u2957(64){ }u2958(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1616 1861
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 625 626 666 746
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 647 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 0 [x0] 66 [cc] 625 626 666 746
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 3043 3042 3046 220 [bb 220] NOTE_INSN_BASIC_BLOCK)
(insn 3046 3043 3049 220 (set (reg/f:DI 625 [ D.3803 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 1616)
                (const_int 88 [0x58])) [2 IJ+0 S8 A64])) graph500.c:204 48 {*movdi_aarch64}
     (nil))
(insn 3049 3046 3050 220 (set (reg:DI 626 [ D.3798 ])
        (mem/c:DI (plus:DI (reg/f:DI 1616)
                (const_int 80 [0x50])) [4 nedge+0 S8 A64])) graph500.c:204 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1684)
        (nil)))
(debug_insn 3050 3049 3051 220 (var_location:SI err (const_int 0 [0])) verify.c:99 -1
     (nil))
(debug_insn 3051 3050 3053 220 (var_location:SI nedge_traversed (const_int 0 [0])) verify.c:100 -1
     (nil))
(insn 3053 3051 3054 220 (set (reg:DI 666 [ D.3802 ])
        (ashift:DI (reg:DI 1861 [ D.3798 ])
            (const_int 4 [0x4]))) verify.c:101 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(debug_insn 3054 3053 3055 220 (var_location:DI sz (reg:DI 666 [ D.3802 ])) verify.c:101 -1
     (nil))
(debug_insn 3055 3054 3056 220 (var_location:DI n (reg:DI 666 [ D.3802 ])) -1
     (nil))
(insn 3056 3055 3057 220 (set (reg:DI 0 x0)
        (reg:DI 666 [ D.3802 ])) generator/utils.c:32 48 {*movdi_aarch64}
     (nil))
(call_insn 3057 3056 3058 220 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f3c5e24cb00 malloc>) [0 __builtin_malloc S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) generator/utils.c:32 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f3c5e24cb00 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(insn 3058 3057 3060 220 (set (reg/v/f:DI 746 [ seen_edge ])
        (reg:DI 0 x0)) generator/utils.c:32 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_NOALIAS (reg/f:DI 1693)
            (nil))))
(debug_insn 3060 3058 3061 220 (var_location:DI p (reg/v/f:DI 746 [ seen_edge ])) generator/utils.c:32 -1
     (nil))
(insn 3061 3060 3062 220 (set (reg:CC 66 cc)
        (compare:CC (reg/v/f:DI 746 [ seen_edge ])
            (const_int 0 [0]))) generator/utils.c:33 391 {*cmpdi}
     (nil))
(jump_insn 3062 3061 3063 220 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3067)
            (pc))) generator/utils.c:33 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 3067)
;;  succ:       221 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              222 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 666 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 666 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 221, loop depth 0, count 0, freq 0
;;  prev block 220, next block 222, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       220 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 221 artificial_defs: { }
;; bb 221 artificial_uses: { u2977(29){ }u2978(31){ }u2979(64){ }u2980(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 666
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 3063 3062 3064 221 [bb 221] NOTE_INSN_BASIC_BLOCK)
(insn 3064 3063 3065 221 (set (reg:DI 0 x0)
        (reg:DI 666 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 666 [ D.3802 ])
        (nil)))
(call_insn/c/i 3065 3064 3067 221 (parallel [
            (call (mem:DI (symbol_ref:DI ("xmalloc.part.0.lto_priv.11") [flags 0x43]  <function_decl 0x7f3c5e24cc00 xmalloc.part.0>) [0 xmalloc.part.0 S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("xmalloc.part.0.lto_priv.11") [flags 0x43]  <function_decl 0x7f3c5e24cc00 xmalloc.part.0>)
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 222, loop depth 0, count 0, freq 147, maybe hot
;;  prev block 221, next block 223, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       220 [100.0%] 
;; bb 222 artificial_defs: { }
;; bb 222 artificial_uses: { u2984(29){ }u2985(31){ }u2986(64){ }u2987(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746 1861
;; lr  def 	 66 [cc] 668 1694
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 668 1694
;; live  kill	
(code_label 3067 3065 3068 222 135 "" [1 uses])
(note 3068 3067 3069 222 [bb 222] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3069 3068 3070 222 (var_location:DI n (clobber (const_int 0 [0]))) xalloc.c:104 -1
     (nil))
(debug_insn 3070 3069 3071 222 (var_location:DI p (clobber (const_int 0 [0]))) xalloc.c:104 -1
     (nil))
(debug_insn 3071 3070 3072 222 (var_location:DI sz (clobber (const_int 0 [0]))) verify.c:101 -1
     (nil))
(debug_insn 3072 3071 3073 222 (var_location:DI seen_edge (clobber (const_int 0 [0]))) verify.c:101 -1
     (nil))
(insn 3073 3072 3074 222 (set (reg:DI 1694 [ D.3802 ])
        (ashift:DI (reg:DI 1861 [ D.3798 ])
            (const_int 3 [0x3]))) verify.c:102 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 3074 3073 3075 222 (set (reg/v/f:DI 668 [ level ])
        (plus:DI (reg/v/f:DI 746 [ seen_edge ])
            (reg:DI 1694 [ D.3802 ]))) verify.c:102 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1694 [ D.3802 ])
        (nil)))
(debug_insn 3075 3074 3076 222 (var_location:DI level (reg/v/f:DI 668 [ level ])) verify.c:102 -1
     (nil))
(debug_insn 3076 3075 3077 222 (var_location:DI level (reg/v/f:DI 668 [ level ])) verify.c:102 -1
     (nil))
(debug_insn 3077 3076 3078 222 (var_location:DI nv (reg:DI 1861 [ D.3798 ])) verify.c:102 -1
     (nil))
(debug_insn 3078 3077 3079 222 (var_location:DI bfs_tree (reg/v/f:DI 647 [ bfs_tree ])) verify.c:102 -1
     (nil))
(debug_insn 3079 3078 3080 222 (var_location:DI root (reg:DI 624 [ D.3798 ])) verify.c:102 -1
     (nil))
(debug_insn 3080 3079 3081 222 (var_location:DI k (const_int 0 [0])) -1
     (nil))
(insn 3081 3080 3082 222 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1861 [ D.3798 ])
            (const_int 0 [0]))) verify.c:27 391 {*cmpdi}
     (nil))
(jump_insn 3082 3081 3083 222 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3416)
            (pc))) verify.c:27 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 3416)
;;  succ:       223 [91.0%]  (FALLTHRU)
;;              263 [9.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 223, loop depth 0, count 0, freq 134, maybe hot
;;  prev block 222, next block 224, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       222 [91.0%]  (FALLTHRU)
;; bb 223 artificial_defs: { }
;; bb 223 artificial_uses: { u2998(29){ }u2999(31){ }u3000(64){ }u3001(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 1861
;; lr  def 	 66 [cc] 672 742 1695 1696 1697 1698
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 672 742 1695 1696 1697 1698
;; live  kill	
(note 3083 3082 3086 223 [bb 223] NOTE_INSN_BASIC_BLOCK)
(insn 3086 3083 3087 223 (set (reg:DI 672 [ ivtmp.84 ])
        (reg/v/f:DI 668 [ level ])) 48 {*movdi_aarch64}
     (nil))
(insn 3087 3086 3088 223 (set (reg:DI 1695 [ D.3810 ])
        (and:DI (reg/v/f:DI 668 [ level ])
            (const_int 15 [0xf]))) 468 {anddi3}
     (nil))
(insn 3088 3087 3089 223 (set (reg:DI 1696 [ D.3810 ])
        (lshiftrt:DI (reg:DI 1695 [ D.3810 ])
            (const_int 3 [0x3]))) 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1695 [ D.3810 ])
        (nil)))
(insn 3089 3088 3090 223 (set (reg:DI 1697 [ D.3810 ])
        (neg:DI (reg:DI 1696 [ D.3810 ]))) 336 {negdi2}
     (expr_list:REG_DEAD (reg:DI 1696 [ D.3810 ])
        (nil)))
(insn 3090 3089 3091 223 (set (reg:DI 1698 [ D.3810 ])
        (and:DI (reg:DI 1697 [ D.3810 ])
            (const_int 1 [0x1]))) 468 {anddi3}
     (expr_list:REG_DEAD (reg:DI 1697 [ D.3810 ])
        (nil)))
(insn 3091 3090 3092 223 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1698 [ D.3810 ])
            (reg:DI 1861 [ D.3798 ]))) 391 {*cmpdi}
     (nil))
(insn 3092 3091 4319 223 (set (reg:DI 742 [ prologue_after_cost_adjust.32 ])
        (if_then_else:DI (leu (reg:CC 66 cc)
                (const_int 0 [0]))
            (reg:DI 1698 [ D.3810 ])
            (reg:DI 1861 [ D.3798 ]))) 443 {*cmovdi_insn}
     (expr_list:REG_DEAD (reg:DI 1698 [ D.3810 ])
        (expr_list:REG_DEAD (reg:CC 66 cc)
            (nil))))
(insn 4319 3092 4320 223 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1861 [ D.3798 ])
            (const_int 3 [0x3]))) verify.c:27 391 {*cmpdi}
     (nil))
(insn 4320 4319 3098 223 (set (reg:DI 742 [ prologue_after_cost_adjust.32 ])
        (if_then_else:DI (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (reg:DI 742 [ prologue_after_cost_adjust.32 ])
            (reg:DI 1861 [ D.3798 ]))) verify.c:27 443 {*cmovdi_insn}
     (nil))
(insn 3098 4320 3099 223 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 742 [ prologue_after_cost_adjust.32 ])
            (const_int 0 [0]))) 391 {*cmpdi}
     (nil))
(jump_insn 3099 3098 3100 223 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3994)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3334 (nil)))
 -> 3994)
;;  succ:       224 [66.7%]  (FALLTHRU)
;;              230 [33.3%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 224, loop depth 0, count 0, freq 89, maybe hot
;;  prev block 223, next block 225, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       223 [66.7%]  (FALLTHRU)
;; bb 224 artificial_defs: { }
;; bb 224 artificial_uses: { u3027(29){ }u3028(31){ }u3029(64){ }u3030(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 742
;; lr  def 	 66 [cc] 1699 1700 1701
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1699 1700 1701
;; live  kill	
(note 3100 3099 3101 224 [bb 224] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3101 3100 3102 224 (var_location:DI k (const_int 0 [0])) -1
     (nil))
(insn 3102 3101 3103 224 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 624 [ D.3798 ])
            (const_int 0 [0]))) verify.c:28 391 {*cmpdi}
     (nil))
(insn 3103 3102 3104 224 (set (reg:SI 1700)
        (ne:SI (reg:CC 66 cc)
            (const_int 0 [0]))) verify.c:28 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (nil)))
(insn 3104 3103 3105 224 (set (reg:DI 1699 [ D.3809 ])
        (zero_extend:DI (reg:SI 1700))) verify.c:28 82 {*zero_extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1700)
        (nil)))
(insn 3105 3104 3106 224 (set (reg:DI 1701 [ D.3798 ])
        (neg:DI (reg:DI 1699 [ D.3809 ]))) verify.c:28 336 {negdi2}
     (expr_list:REG_DEAD (reg:DI 1699 [ D.3809 ])
        (nil)))
(insn 3106 3105 3108 224 (set (mem:DI (reg/v/f:DI 668 [ level ]) [4 *level_644+0 S8 A64])
        (reg:DI 1701 [ D.3798 ])) verify.c:28 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1701 [ D.3798 ])
        (nil)))
(debug_insn 3108 3106 3109 224 (var_location:DI k (const_int 1 [0x1])) -1
     (nil))
(insn 3109 3108 3110 224 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 742 [ prologue_after_cost_adjust.32 ])
            (const_int 1 [0x1]))) 391 {*cmpdi}
     (nil))
(jump_insn 3110 3109 3111 224 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3998)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3333 (nil)))
 -> 3998)
;;  succ:       225 [66.7%]  (FALLTHRU)
;;              227 [33.3%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 225, loop depth 0, count 0, freq 89, maybe hot
;;  prev block 224, next block 226, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       224 [66.7%]  (FALLTHRU)
;; bb 225 artificial_defs: { }
;; bb 225 artificial_uses: { u3039(29){ }u3040(31){ }u3041(64){ }u3042(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 742
;; lr  def 	 66 [cc] 1702 1703 1704
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1702 1703 1704
;; live  kill	
(note 3111 3110 3112 225 [bb 225] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3112 3111 3113 225 (var_location:DI k (const_int 1 [0x1])) -1
     (nil))
(insn 3113 3112 3114 225 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 624 [ D.3798 ])
            (const_int 1 [0x1]))) verify.c:28 391 {*cmpdi}
     (nil))
(insn 3114 3113 3115 225 (set (reg:SI 1703)
        (ne:SI (reg:CC 66 cc)
            (const_int 0 [0]))) verify.c:28 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (nil)))
(insn 3115 3114 3116 225 (set (reg:DI 1702 [ D.3809 ])
        (zero_extend:DI (reg:SI 1703))) verify.c:28 82 {*zero_extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1703)
        (nil)))
(insn 3116 3115 3117 225 (set (reg:DI 1704 [ D.3798 ])
        (neg:DI (reg:DI 1702 [ D.3809 ]))) verify.c:28 336 {negdi2}
     (expr_list:REG_DEAD (reg:DI 1702 [ D.3809 ])
        (nil)))
(insn 3117 3116 3119 225 (set (mem:DI (plus:DI (reg/v/f:DI 668 [ level ])
                (const_int 8 [0x8])) [4 MEM[(int64_t *)level_644 + 8B]+0 S8 A64])
        (reg:DI 1704 [ D.3798 ])) verify.c:28 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1704 [ D.3798 ])
        (nil)))
(debug_insn 3119 3117 3120 225 (var_location:DI k (const_int 2 [0x2])) -1
     (nil))
(insn 3120 3119 3121 225 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 742 [ prologue_after_cost_adjust.32 ])
            (const_int 3 [0x3]))) 391 {*cmpdi}
     (nil))
(jump_insn 3121 3120 3122 225 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4002)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3333 (nil)))
 -> 4002)
;;  succ:       226 [66.7%]  (FALLTHRU)
;;              228 [33.3%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 226, loop depth 0, count 0, freq 89, maybe hot
;;  prev block 225, next block 227, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       225 [66.7%]  (FALLTHRU)
;; bb 226 artificial_defs: { }
;; bb 226 artificial_uses: { u3051(29){ }u3052(31){ }u3053(64){ }u3054(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668
;; lr  def 	 66 [cc] 806 1705 1706 1707
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 806 1705 1706 1707
;; live  kill	
(note 3122 3121 3123 226 [bb 226] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3123 3122 3124 226 (var_location:DI k (const_int 2 [0x2])) -1
     (nil))
(insn 3124 3123 3125 226 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 624 [ D.3798 ])
            (const_int 2 [0x2]))) verify.c:28 391 {*cmpdi}
     (nil))
(insn 3125 3124 3126 226 (set (reg:SI 1706)
        (ne:SI (reg:CC 66 cc)
            (const_int 0 [0]))) verify.c:28 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (nil)))
(insn 3126 3125 3127 226 (set (reg:DI 1705 [ D.3809 ])
        (zero_extend:DI (reg:SI 1706))) verify.c:28 82 {*zero_extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1706)
        (nil)))
(insn 3127 3126 3128 226 (set (reg:DI 1707 [ D.3798 ])
        (neg:DI (reg:DI 1705 [ D.3809 ]))) verify.c:28 336 {negdi2}
     (expr_list:REG_DEAD (reg:DI 1705 [ D.3809 ])
        (nil)))
(insn 3128 3127 3130 226 (set (mem:DI (plus:DI (reg/v/f:DI 668 [ level ])
                (const_int 16 [0x10])) [4 MEM[(int64_t *)level_644 + 16B]+0 S8 A64])
        (reg:DI 1707 [ D.3798 ])) verify.c:28 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1707 [ D.3798 ])
        (nil)))
(debug_insn 3130 3128 4071 226 (var_location:DI k (const_int 3 [0x3])) -1
     (nil))
(debug_insn 4071 3130 229 226 (var_location:DI D#51 (const_int 3 [0x3])) -1
     (nil))
(insn 229 4071 3998 226 (set (reg/v:DI 806 [ k ])
        (const_int 3 [0x3])) verify.c:27 48 {*movdi_aarch64}
     (nil))
;;  succ:       229 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 227, loop depth 0, count 0, freq 30
;;  prev block 226, next block 228, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       224 [33.3%] 
;; bb 227 artificial_defs: { }
;; bb 227 artificial_uses: { u3062(29){ }u3063(31){ }u3064(64){ }u3065(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 806
;; live  kill	
(code_label 3998 229 3997 227 200 "" [1 uses])
(note 3997 3998 4070 227 [bb 227] NOTE_INSN_BASIC_BLOCK)
(debug_insn 4070 3997 230 227 (var_location:DI D#51 (const_int 1 [0x1])) -1
     (nil))
(insn 230 4070 4002 227 (set (reg/v:DI 806 [ k ])
        (const_int 1 [0x1])) verify.c:27 48 {*movdi_aarch64}
     (nil))
;;  succ:       229 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 228, loop depth 0, count 0, freq 30
;;  prev block 227, next block 229, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       225 [33.3%] 
;; bb 228 artificial_defs: { }
;; bb 228 artificial_uses: { u3067(29){ }u3068(31){ }u3069(64){ }u3070(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 806
;; live  kill	
(code_label 4002 230 4001 228 201 "" [1 uses])
(note 4001 4002 4069 228 [bb 228] NOTE_INSN_BASIC_BLOCK)
(debug_insn 4069 4001 231 228 (var_location:DI D#51 (const_int 2 [0x2])) -1
     (nil))
(insn 231 4069 3131 228 (set (reg/v:DI 806 [ k ])
        (const_int 2 [0x2])) verify.c:27 48 {*movdi_aarch64}
     (nil))
;;  succ:       229 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 229, loop depth 0, count 0, freq 89, maybe hot
;;  prev block 228, next block 230, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       228 [100.0%]  (FALLTHRU)
;;              226 [100.0%]  (FALLTHRU)
;;              227 [100.0%]  (FALLTHRU)
;; bb 229 artificial_defs: { }
;; bb 229 artificial_uses: { u3071(29){ }u3072(31){ }u3073(64){ }u3074(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 742 1861
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 3131 231 3132 229 139 "" [0 uses])
(note 3132 3131 3133 229 [bb 229] NOTE_INSN_BASIC_BLOCK)
(insn 3133 3132 3134 229 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1861 [ D.3798 ])
            (reg:DI 742 [ prologue_after_cost_adjust.32 ]))) 391 {*cmpdi}
     (nil))
(jump_insn 3134 3133 3994 229 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3192)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3334 (nil)))
 -> 3192)
;;  succ:       231 [66.7%]  (FALLTHRU)
;;              236 [33.3%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 230, loop depth 0, count 0, freq 45, maybe hot
;;  prev block 229, next block 231, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       223 [33.3%] 
;; bb 230 artificial_defs: { }
;; bb 230 artificial_uses: { u3078(29){ }u3079(31){ }u3080(64){ }u3081(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 806
;; live  kill	
(code_label 3994 3134 3993 230 199 "" [1 uses])
(note 3993 3994 4068 230 [bb 230] NOTE_INSN_BASIC_BLOCK)
(debug_insn 4068 3993 232 230 (var_location:DI D#51 (const_int 0 [0])) -1
     (nil))
(insn 232 4068 3135 230 (set (reg/v:DI 806 [ k ])
        (const_int 0 [0])) verify.c:27 48 {*movdi_aarch64}
     (nil))
;;  succ:       231 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 231, loop depth 0, count 0, freq 104, maybe hot
;;  prev block 230, next block 232, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       230 [100.0%]  (FALLTHRU)
;;              229 [66.7%]  (FALLTHRU)
;; bb 231 artificial_defs: { }
;; bb 231 artificial_uses: { u3082(29){ }u3083(31){ }u3084(64){ }u3085(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 742 1861
;; lr  def 	 66 [cc] 753 754 799 1708 1709
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 753 754 799 1708 1709
;; live  kill	
(code_label 3135 232 3136 231 138 "" [0 uses])
(note 3136 3135 3137 231 [bb 231] NOTE_INSN_BASIC_BLOCK)
(insn 3137 3136 3138 231 (set (reg:DI 754 [ niters.33 ])
        (minus:DI (reg:DI 1861 [ D.3798 ])
            (reg:DI 742 [ prologue_after_cost_adjust.32 ]))) 264 {subdi3}
     (nil))
(insn 3138 3137 3139 231 (set (reg:DI 1708 [ D.3810 ])
        (plus:DI (reg:DI 754 [ niters.33 ])
            (const_int -2 [0xfffffffffffffffe]))) 95 {*adddi3_aarch64}
     (nil))
(insn 3139 3138 3140 231 (set (reg:DI 1709 [ D.3810 ])
        (lshiftrt:DI (reg:DI 1708 [ D.3810 ])
            (const_int 1 [0x1]))) 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1708 [ D.3810 ])
        (nil)))
(insn 3140 3139 3141 231 (set (reg:DI 753 [ bnd.34 ])
        (plus:DI (reg:DI 1709 [ D.3810 ])
            (const_int 1 [0x1]))) 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1709 [ D.3810 ])
        (nil)))
(insn 3141 3140 3142 231 (set (reg:DI 799 [ ratio_mult_vf.35 ])
        (ashift:DI (reg:DI 753 [ bnd.34 ])
            (const_int 1 [0x1]))) 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 3142 3141 3143 231 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 623 [ D.3798 ])
            (reg:DI 742 [ prologue_after_cost_adjust.32 ]))) 391 {*cmpdi}
     (nil))
(jump_insn 3143 3142 3144 231 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3179)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3334 (nil)))
 -> 3179)
;;  succ:       232 [66.7%]  (FALLTHRU)
;;              235 [33.3%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 232, loop depth 0, count 0, freq 69, maybe hot
;;  prev block 231, next block 233, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       231 [66.7%]  (FALLTHRU)
;; bb 232 artificial_defs: { }
;; bb 232 artificial_uses: { u3095(29){ }u3096(31){ }u3097(64){ }u3098(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 742 746 806 1710 1861
;; lr  def 	 770 776 782 800 1710 1711 1716 1717 1857 1858
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 742 746 752 753 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 770 776 782 800 1710 1711 1716 1717 1857 1858
;; live  kill	
(note 3144 3143 3145 232 [bb 232] NOTE_INSN_BASIC_BLOCK)
(insn 3145 3144 3147 232 (set (reg:DI 1711 [ stmp_var_.37 ])
        (plus:DI (reg/v:DI 806 [ k ])
            (const_int 1 [0x1]))) 95 {*adddi3_aarch64}
     (nil))
(insn 3147 3145 3149 232 (set (reg:V2DI 1710)
        (vec_merge:V2DI (vec_duplicate:V2DI (reg/v:DI 806 [ k ]))
            (reg:V2DI 1710)
            (const_int 1 [0x1]))) 1119 {aarch64_simd_vec_setv2di}
     (nil))
(insn 3149 3147 3150 232 (set (reg:V2DI 1710)
        (vec_merge:V2DI (vec_duplicate:V2DI (reg:DI 1711 [ stmp_var_.37 ]))
            (reg:V2DI 1710)
            (const_int 2 [0x2]))) 1119 {aarch64_simd_vec_setv2di}
     (expr_list:REG_DEAD (reg:DI 1711 [ stmp_var_.37 ])
        (nil)))
(insn 3150 3149 3152 232 (set (reg:V2DI 770 [ vect_vec_iv_.40 ])
        (reg:V2DI 1710)) 915 {*aarch64_simd_movv2di}
     (nil))
(insn 3152 3150 3154 232 (set (reg:V2DI 800 [ vect_cst_.42 ])
        (vec_duplicate:V2DI (reg:DI 624 [ D.3798 ]))) 877 {aarch64_simd_dupv2di}
     (nil))
(insn 3154 3152 3155 232 (set (reg:DI 1716 [ D.3802 ])
        (plus:DI (reg:DI 1861 [ D.3798 ])
            (reg:DI 742 [ prologue_after_cost_adjust.32 ]))) 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 742 [ prologue_after_cost_adjust.32 ])
        (nil)))
(insn 3155 3154 3156 232 (set (reg:DI 1717 [ D.3802 ])
        (ashift:DI (reg:DI 1716 [ D.3802 ])
            (const_int 3 [0x3]))) 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1716 [ D.3802 ])
        (nil)))
(insn 3156 3155 233 232 (set (reg/f:DI 782 [ vectp.48 ])
        (plus:DI (reg/v/f:DI 746 [ seen_edge ])
            (reg:DI 1717 [ D.3802 ]))) 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1717 [ D.3802 ])
        (nil)))
(insn 233 3156 4201 232 (set (reg:DI 776 [ D.3810 ])
        (const_int 0 [0])) verify.c:27 48 {*movdi_aarch64}
     (nil))
(insn 4201 233 4202 232 (set (reg:V2DI 1857)
        (mem/u/c:V2DI (symbol_ref/u:DI ("*.LC58") [flags 0x2]) [4  S16 A128])) -1
     (expr_list:REG_EQUAL (const_vector:V2DI [
                (const_int 2 [0x2])
                (const_int 2 [0x2])
            ])
        (nil)))
(insn 4202 4201 3172 232 (set (reg:V2DI 1858)
        (mem/u/c:V2DI (symbol_ref/u:DI ("*.LC59") [flags 0x2]) [4  S16 A128])) -1
     (expr_list:REG_EQUAL (const_vector:V2DI [
                (const_int 1 [0x1])
                (const_int 1 [0x1])
            ])
        (nil)))
;;  succ:       233 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878

;; basic block 233, loop depth 0, count 0, freq 345, maybe hot
;;  prev block 232, next block 234, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       232 [100.0%]  (FALLTHRU)
;;              233 [80.0%]  (DFS_BACK)
;; bb 233 artificial_defs: { }
;; bb 233 artificial_uses: { u3115(29){ }u3116(31){ }u3117(64){ }u3118(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 753 770 776 782 800 1857 1858
;; lr  def 	 66 [cc] 770 776 795 1719 1720 1722 1724
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 770 776 795 1719 1720 1722 1724
;; live  kill	
(code_label 3172 4202 3157 233 142 "" [1 uses])
(note 3157 3172 3159 233 [bb 233] NOTE_INSN_BASIC_BLOCK)
(insn 3159 3157 3160 233 (set (reg:V2DI 795 [ vect_vec_iv_.40 ])
        (plus:V2DI (reg:V2DI 770 [ vect_vec_iv_.40 ])
            (reg:V2DI 1857))) 963 {addv2di3}
     (nil))
(debug_insn 3160 3159 3161 233 (var_location:DI k (clobber (const_int 0 [0]))) -1
     (nil))
(insn 3161 3160 3163 233 (set (reg:DI 1719 [ D.3805 ])
        (ashift:DI (reg:DI 776 [ D.3810 ])
            (const_int 4 [0x4]))) verify.c:28 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 3163 3161 3165 233 (set (reg:V2DI 1722)
        (neg:V2DI (eq:V2DI (reg:V2DI 800 [ vect_cst_.42 ])
                (reg:V2DI 770 [ vect_vec_iv_.40 ])))) 2198 {aarch64_cmeqv2di}
     (expr_list:REG_DEAD (reg:V2DI 770 [ vect_vec_iv_.40 ])
        (nil)))
(insn 3165 3163 3166 233 (set (reg:V2DI 1720 [ vect_patt_839.41 ])
        (and:V2DI (not:V2DI (reg:V2DI 1722))
            (reg:V2DI 1858))) 956 {bicv2di3}
     (expr_list:REG_DEAD (reg:V2DI 1722)
        (expr_list:REG_EQUAL (and:V2DI (not:V2DI (reg:V2DI 1722))
                (const_vector:V2DI [
                        (const_int 1 [0x1])
                        (const_int 1 [0x1])
                    ]))
            (nil))))
(insn 3166 3165 3167 233 (set (reg:V2DI 1724 [ vect__599.46 ])
        (neg:V2DI (reg:V2DI 1720 [ vect_patt_839.41 ]))) verify.c:28 1005 {negv2di2}
     (expr_list:REG_DEAD (reg:V2DI 1720 [ vect_patt_839.41 ])
        (nil)))
(insn 3167 3166 3169 233 (set (mem:V2DI (plus:DI (reg/f:DI 782 [ vectp.48 ])
                (reg:DI 1719 [ D.3805 ])) [4 MEM[base: vectp.48_1271, index: _743, offset: 0B]+0 S16 A128])
        (reg:V2DI 1724 [ vect__599.46 ])) verify.c:28 915 {*aarch64_simd_movv2di}
     (expr_list:REG_DEAD (reg:V2DI 1724 [ vect__599.46 ])
        (expr_list:REG_DEAD (reg:DI 1719 [ D.3805 ])
            (nil))))
(debug_insn 3169 3167 3170 233 (var_location:DI k (debug_expr:DI D#41)) -1
     (nil))
(insn 3170 3169 3171 233 (set (reg:DI 776 [ D.3810 ])
        (plus:DI (reg:DI 776 [ D.3810 ])
            (const_int 1 [0x1]))) 95 {*adddi3_aarch64}
     (nil))
(insn 3171 3170 3173 233 (set (reg:V2DI 770 [ vect_vec_iv_.40 ])
        (reg:V2DI 795 [ vect_vec_iv_.40 ])) 915 {*aarch64_simd_movv2di}
     (expr_list:REG_DEAD (reg:V2DI 795 [ vect_vec_iv_.40 ])
        (nil)))
(insn 3173 3171 3174 233 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 753 [ bnd.34 ])
            (reg:DI 776 [ D.3810 ]))) 391 {*cmpdi}
     (nil))
(jump_insn 3174 3173 3175 233 (set (pc)
        (if_then_else (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3172)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 8000 (nil)))
 -> 3172)
;;  succ:       233 [80.0%]  (DFS_BACK)
;;              234 [20.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 753 754 770 776 777 782 799 800 806 811 1616 1710 1853 1854 1857 1858 1859 1861 1875 1877 1878

;; basic block 234, loop depth 0, count 0, freq 69, maybe hot
;;  prev block 233, next block 235, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       233 [20.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 234 artificial_defs: { }
;; bb 234 artificial_uses: { u3137(29){ }u3138(31){ }u3139(64){ }u3140(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 754 799 806
;; lr  def 	 66 [cc] 806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 754 777 799 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 806
;; live  kill	
(note 3175 3174 4067 234 [bb 234] NOTE_INSN_BASIC_BLOCK)
(debug_insn 4067 3175 3176 234 (var_location:DI D#51 (plus:DI (reg/v:DI 806 [ k ])
        (reg:DI 799 [ ratio_mult_vf.35 ]))) -1
     (nil))
(insn 3176 4067 3177 234 (set (reg/v:DI 806 [ k ])
        (plus:DI (reg/v:DI 806 [ k ])
            (reg:DI 799 [ ratio_mult_vf.35 ]))) 95 {*adddi3_aarch64}
     (nil))
(insn 3177 3176 3178 234 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 754 [ niters.33 ])
            (reg:DI 799 [ ratio_mult_vf.35 ]))) 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 799 [ ratio_mult_vf.35 ])
        (expr_list:REG_DEAD (reg:DI 754 [ niters.33 ])
            (nil))))
(jump_insn 3178 3177 3179 234 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3192)
            (pc))) 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3334 (nil)))
 -> 3192)
;;  succ:       235 [66.7%]  (FALLTHRU)
;;              236 [33.3%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 235, loop depth 0, count 0, freq 162, maybe hot
;;  prev block 234, next block 236, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       234 [66.7%]  (FALLTHRU)
;;              231 [33.3%] 
;; bb 235 artificial_defs: { }
;; bb 235 artificial_uses: { u3148(29){ }u3149(31){ }u3150(64){ }u3151(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 668 806
;; lr  def 	 66 [cc] 1725 1726 1727
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 806 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1725 1726 1727
;; live  kill	
(code_label 3179 3178 3180 235 141 "" [1 uses])
(note 3180 3179 3181 235 [bb 235] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3181 3180 3182 235 (var_location:DI k (debug_expr:DI D#51)) -1
     (nil))
(insn 3182 3181 3183 235 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 624 [ D.3798 ])
            (reg/v:DI 806 [ k ]))) verify.c:28 391 {*cmpdi}
     (nil))
(insn 3183 3182 3184 235 (set (reg:SI 1726)
        (ne:SI (reg:CC 66 cc)
            (const_int 0 [0]))) verify.c:28 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (nil)))
(insn 3184 3183 3185 235 (set (reg:DI 1725 [ D.3809 ])
        (zero_extend:DI (reg:SI 1726))) verify.c:28 82 {*zero_extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1726)
        (nil)))
(insn 3185 3184 3186 235 (set (reg:DI 1727 [ D.3798 ])
        (neg:DI (reg:DI 1725 [ D.3809 ]))) verify.c:28 336 {negdi2}
     (expr_list:REG_DEAD (reg:DI 1725 [ D.3809 ])
        (nil)))
(insn 3186 3185 3187 235 (set (mem:DI (plus:DI (mult:DI (reg/v:DI 806 [ k ])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 668 [ level ])) [4 *_1336+0 S8 A64])
        (reg:DI 1727 [ D.3798 ])) verify.c:28 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1727 [ D.3798 ])
        (expr_list:REG_DEAD (reg/v:DI 806 [ k ])
            (nil))))
(debug_insn 3187 3186 3189 235 (var_location:DI D#44 (plus:DI (debug_expr:DI D#51)
        (const_int 1 [0x1]))) verify.c:27 -1
     (nil))
(debug_insn 3189 3187 3192 235 (var_location:DI k (debug_expr:DI D#44)) -1
     (nil))
;;  succ:       236 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 236, loop depth 0, count 0, freq 134, maybe hot
;;  prev block 235, next block 237, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       235 [100.0%]  (FALLTHRU)
;;              229 [33.3%] 
;;              234 [33.3%] 
;; bb 236 artificial_defs: { }
;; bb 236 artificial_uses: { u3160(29){ }u3161(31){ }u3162(64){ }u3163(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715 745
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 715 745
;; live  kill	
(code_label 3192 3189 3193 236 140 "" [2 uses])
(note 3193 3192 234 236 [bb 236] NOTE_INSN_BASIC_BLOCK)
(insn 234 3193 235 236 (set (reg/v:SI 715 [ err ])
        (const_int 0 [0])) verify.c:27 47 {*movsi_aarch64}
     (nil))
(insn 235 234 3410 236 (set (reg/v:DI 745 [ parent ])
        (const_int 0 [0])) verify.c:27 48 {*movdi_aarch64}
     (nil))
;;  succ:       237 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 237, loop depth 0, count 0, freq 6736, maybe hot
;;  prev block 236, next block 238, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       236 [100.0%]  (FALLTHRU)
;;              262 [98.0%]  (DFS_BACK)
;; bb 237 artificial_defs: { }
;; bb 237 artificial_uses: { u3165(29){ }u3166(31){ }u3167(64){ }u3168(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672
;; lr  def 	 66 [cc] 1728
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1728
;; live  kill	
(code_label 3410 235 3195 237 157 "" [1 uses])
(note 3195 3410 3196 237 [bb 237] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3196 3195 3197 237 (var_location:DI k (reg/v:DI 745 [ parent ])) -1
     (nil))
(debug_insn 3197 3196 3199 237 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3199 3197 3200 237 (set (reg:DI 1728 [ MEM[base: _745, offset: 0B] ])
        (mem:DI (reg:DI 672 [ ivtmp.84 ]) [4 MEM[base: _745, offset: 0B]+0 S8 A64])) verify.c:32 48 {*movdi_aarch64}
     (nil))
(insn 3200 3199 3201 237 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1728 [ MEM[base: _745, offset: 0B] ])
            (const_int 0 [0]))) verify.c:32 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1728 [ MEM[base: _745, offset: 0B] ])
        (nil)))
(jump_insn 3201 3200 3202 237 (set (pc)
        (if_then_else (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3402)
            (pc))) verify.c:32 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7300 (nil)))
 -> 3402)
;;  succ:       262 [73.0%] 
;;              238 [27.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 238, loop depth 0, count 0, freq 1819, maybe hot
;;  prev block 237, next block 239, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       237 [27.0%]  (FALLTHRU)
;; bb 238 artificial_defs: { }
;; bb 238 artificial_uses: { u3175(29){ }u3176(31){ }u3177(64){ }u3178(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(note 3202 3201 3203 238 [bb 238] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3203 3202 3204 238 (var_location:SI terr (reg/v:SI 715 [ err ])) verify.c:33 -1
     (nil))
(insn 3204 3203 3205 238 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 715 [ err ])
            (const_int 0 [0]))) verify.c:34 390 {*cmpsi}
     (nil))
(jump_insn 3205 3204 3206 238 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3402)
            (pc))) verify.c:34 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 3402)
;;  succ:       239 [50.0%]  (FALLTHRU)
;;              262 [50.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 239, loop depth 0, count 0, freq 909, maybe hot
;;  prev block 238, next block 241, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       238 [50.0%]  (FALLTHRU)
;; bb 239 artificial_defs: { }
;; bb 239 artificial_uses: { u3182(29){ }u3183(31){ }u3184(64){ }u3185(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647 745
;; lr  def 	 66 [cc] 809 1730 1731
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 809 1730 1731
;; live  kill	
(note 3206 3205 3208 239 [bb 239] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3208 3206 3209 239 (var_location:SI terr (const_int 0 [0])) verify.c:33 -1
     (nil))
(insn 3209 3208 3210 239 (set (reg:DI 809 [ D.3798 ])
        (mem:DI (plus:DI (mult:DI (reg/v:DI 745 [ parent ])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 647 [ bfs_tree ])) [4 MEM[base: bfs_tree_622, index: _592, step: 8, offset: 0B]+0 S8 A64])) verify.c:34 48 {*movdi_aarch64}
     (nil))
(insn 3210 3209 3211 239 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 624 [ D.3798 ])
            (reg/v:DI 745 [ parent ]))) verify.c:34 391 {*cmpdi}
     (nil))
(insn 3211 3210 3212 239 (set (reg:CC_DGE 66 cc)
        (compare (and:SI (ne (reg:CC_DNE 66 cc)
                    (const_int 0 [0]))
                (ge (reg:DI 809 [ D.3798 ])
                    (const_int 0 [0])))
            (const_int 0 [0]))) verify.c:34 4 {ccmp_anddi}
     (nil))
(insn 3212 3211 3214 239 (set:SI (reg:SI 1730)
        (ne:SI (reg:CC_DGE 66 cc)
            (const_int 0 [0]))) verify.c:34 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC_DGE 66 cc)
        (nil)))
(insn 3214 3212 3215 239 (set (reg:SI 1731 [ D.3809 ])
        (zero_extend:SI (subreg:QI (reg:SI 1730) 0))) verify.c:34 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1730)
        (nil)))
(insn 3215 3214 3216 239 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1731 [ D.3809 ])
            (const_int 0 [0]))) verify.c:34 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1731 [ D.3809 ])
        (nil)))
(jump_insn 3216 3215 3217 239 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3402)
            (pc))) verify.c:34 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2 (nil)))
 -> 3402)
;;  succ:       241 [100.0%]  (FALLTHRU)
;;              262 [0.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 241, loop depth 0, count 0, freq 909, maybe hot
;;  prev block 239, next block 242, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       239 [100.0%]  (FALLTHRU)
;; bb 241 artificial_defs: { }
;; bb 241 artificial_uses: { u3197(29){ }u3198(31){ }u3199(64){ }u3200(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 745 809
;; lr  def 	 456 581 609
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 456 581 609
;; live  kill	
(note 3217 3216 237 241 [bb 241] NOTE_INSN_BASIC_BLOCK)
(insn 237 3217 238 241 (set (reg/v:DI 456 [ parent ])
        (reg/v:DI 745 [ parent ])) verify.c:34 48 {*movdi_aarch64}
     (nil))
(insn 238 237 239 241 (set (reg/v:DI 609 [ nhop ])
        (const_int 0 [0])) verify.c:34 48 {*movdi_aarch64}
     (nil))
(insn 239 238 3261 241 (set (reg/v:DI 581 [ parent ])
        (reg:DI 809 [ D.3798 ])) verify.c:34 48 {*movdi_aarch64}
     (nil))
;;  succ:       243 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 242, loop depth 0, count 0, freq 8646, maybe hot
;;  prev block 241, next block 243, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       246 [97.5%] 
;; bb 242 artificial_defs: { }
;; bb 242 artificial_uses: { u3204(29){ }u3205(31){ }u3206(64){ }u3207(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 647 727
;; lr  def 	 456 581
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 456 581
;; live  kill	
(code_label 3261 239 3220 242 149 "" [1 uses])
(note 3220 3261 3221 242 [bb 242] NOTE_INSN_BASIC_BLOCK)
(insn 3221 3220 3222 242 (set (reg/v:DI 456 [ parent ])
        (reg/v:DI 581 [ parent ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v:DI 581 [ parent ])
        (nil)))
(insn 3222 3221 3223 242 (set (reg/v:DI 581 [ parent ])
        (mem:DI (plus:DI (reg/v/f:DI 647 [ bfs_tree ])
                (reg:DI 727 [ D.3802 ])) [4 MEM[(const int64_t *)_1332]+0 S8 A64])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 727 [ D.3802 ])
        (nil)))
;;  succ:       243 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 243, loop depth 0, count 0, freq 9340, maybe hot
;; Invalid sum of incoming frequencies 9555, should be 9340
;;  prev block 242, next block 244, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       241 [100.0%]  (FALLTHRU)
;;              242 [100.0%]  (FALLTHRU,DFS_BACK)
;; bb 243 artificial_defs: { }
;; bb 243 artificial_uses: { u3211(29){ }u3212(31){ }u3213(64){ }u3214(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 456 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 3223 3222 3224 243 147 "" [0 uses])
(note 3224 3223 3225 243 [bb 243] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3225 3224 3226 243 (var_location:DI nhop (reg/v:DI 609 [ nhop ])) -1
     (nil))
(debug_insn 3226 3225 3227 243 (var_location:DI parent (reg/v:DI 456 [ parent ])) -1
     (nil))
(debug_insn 3227 3226 3228 243 (var_location:DI D#28 (mem:DI (debug_expr:DI D#40) [0 +0 S8 A64])) verify.c:39 -1
     (nil))
(insn 3228 3227 3229 243 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 456 [ parent ])
            (reg/v:DI 581 [ parent ]))) verify.c:39 391 {*cmpdi}
     (expr_list:REG_DEAD (reg/v:DI 456 [ parent ])
        (nil)))
(jump_insn 3229 3228 3230 243 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3245)
            (pc))) verify.c:39 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 3245)
;;  succ:       244 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              245 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 244, loop depth 0, count 0, freq 4
;;  prev block 243, next block 245, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       243 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 244 artificial_defs: { }
;; bb 244 artificial_uses: { u3220(29){ }u3221(31){ }u3222(64){ }u3223(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1732 1733 1735 1736 1737 1738 1739
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1732 1733 1735 1736 1737 1738 1739
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 3230 3229 3231 244 [bb 244] NOTE_INSN_BASIC_BLOCK)
(insn 3231 3230 3232 244 (set (reg/f:DI 1733)
        (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) verify.c:39 48 {*movdi_aarch64}
     (nil))
(insn 3232 3231 3234 244 (set (reg/f:DI 1732)
        (lo_sum:DI (reg/f:DI 1733)
            (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) verify.c:39 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1733)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 3234 3232 3235 244 (set (reg/f:DI 1735)
        (plus:DI (reg/f:DI 1732)
            (const_int 48 [0x30]))) verify.c:39 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1732)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 48 [0x30])))
            (nil))))
(insn 3235 3234 3236 244 (set (reg/f:DI 1737)
        (high:DI (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))) verify.c:39 48 {*movdi_aarch64}
     (nil))
(insn 3236 3235 3237 244 (set (reg/f:DI 1736)
        (lo_sum:DI (reg/f:DI 1737)
            (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))) verify.c:39 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1737)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
            (nil))))
(insn 3237 3236 3238 244 (set (reg/f:DI 1739)
        (high:DI (symbol_ref/f:DI ("*.LC61") [flags 0x82]  <var_decl 0x7f3c5d881900 *.LC61>))) verify.c:39 48 {*movdi_aarch64}
     (nil))
(insn 3238 3237 3239 244 (set (reg/f:DI 1738)
        (lo_sum:DI (reg/f:DI 1739)
            (symbol_ref/f:DI ("*.LC61") [flags 0x82]  <var_decl 0x7f3c5d881900 *.LC61>))) verify.c:39 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1739)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC61") [flags 0x82]  <var_decl 0x7f3c5d881900 *.LC61>)
            (nil))))
(insn 3239 3238 3240 244 (set (reg:DI 3 x3)
        (reg/f:DI 1735)) verify.c:39 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1735)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 48 [0x30])))
            (nil))))
(insn 3240 3239 3241 244 (set (reg:SI 2 x2)
        (const_int 39 [0x27])) verify.c:39 47 {*movsi_aarch64}
     (nil))
(insn 3241 3240 3242 244 (set (reg:DI 1 x1)
        (reg/f:DI 1736)) verify.c:39 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1736)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
            (nil))))
(insn 3242 3241 3243 244 (set (reg:DI 0 x0)
        (reg/f:DI 1738)) verify.c:39 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1738)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC61") [flags 0x82]  <var_decl 0x7f3c5d881900 *.LC61>)
            (nil))))
(call_insn 3243 3242 3245 244 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) verify.c:39 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 245, loop depth 0, count 0, freq 9336, maybe hot
;;  prev block 244, next block 246, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       243 [100.0%] 
;; bb 245 artificial_defs: { }
;; bb 245 artificial_uses: { u3236(29){ }u3237(31){ }u3238(64){ }u3239(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609
;; lr  def 	 66 [cc] 609
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 609
;; live  kill	
(code_label 3245 3243 3246 245 148 "" [1 uses])
(note 3246 3245 3247 245 [bb 245] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3247 3246 3248 245 (var_location:DI parent (debug_expr:DI D#28)) verify.c:40 -1
     (nil))
(insn 3248 3247 3250 245 (set (reg/v:DI 609 [ nhop ])
        (plus:DI (reg/v:DI 609 [ nhop ])
            (const_int 1 [0x1]))) verify.c:41 95 {*adddi3_aarch64}
     (nil))
(debug_insn 3250 3248 3251 245 (var_location:DI nhop (reg/v:DI 609 [ nhop ])) -1
     (nil))
(debug_insn 3251 3250 3252 245 (var_location:DI parent (debug_expr:DI D#28)) -1
     (nil))
(insn 3252 3251 3253 245 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 581 [ parent ])
            (const_int 0 [0]))) verify.c:38 391 {*cmpdi}
     (nil))
(jump_insn 3253 3252 3254 245 (set (pc)
        (if_then_else (lt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4004)
            (pc))) verify.c:38 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 241 (nil)))
 -> 4004)
;;  succ:       246 [97.6%]  (FALLTHRU)
;;              299 [2.4%]  (LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 246, loop depth 0, count 0, freq 8866, maybe hot
;; Invalid sum of incoming frequencies 9111, should be 8866
;;  prev block 245, next block 247, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       245 [97.6%]  (FALLTHRU)
;; bb 246 artificial_defs: { }
;; bb 246 artificial_uses: { u3244(29){ }u3245(31){ }u3246(64){ }u3247(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 668 1861
;; lr  def 	 66 [cc] 727 731 1741 1742
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 727 731 1741 1742
;; live  kill	
(note 3254 3253 3257 246 [bb 246] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3257 3254 3258 246 (var_location:DI nhop (reg/v:DI 609 [ nhop ])) -1
     (nil))
(debug_insn 3258 3257 3259 246 (var_location:DI parent (debug_expr:DI D#28)) -1
     (nil))
(insn 3259 3258 3260 246 (set (reg:DI 727 [ D.3802 ])
        (ashift:DI (reg/v:DI 581 [ parent ])
            (const_int 3 [0x3]))) verify.c:38 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 3260 3259 3262 246 (set (reg:DI 731 [ D.3798 ])
        (mem:DI (plus:DI (reg/v/f:DI 668 [ level ])
                (reg:DI 727 [ D.3802 ])) [4 *_757+0 S8 A64])) verify.c:38 48 {*movdi_aarch64}
     (nil))
(insn 3262 3260 3263 246 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1861 [ D.3798 ])
            (reg/v:DI 609 [ nhop ]))) verify.c:38 391 {*cmpdi}
     (nil))
(insn 3263 3262 3264 246 (set (reg:CC_DLT 66 cc)
        (compare (and:SI (ne (reg:CC_DGT 66 cc)
                    (const_int 0 [0]))
                (lt (reg:DI 731 [ D.3798 ])
                    (const_int 0 [0])))
            (const_int 0 [0]))) verify.c:38 4 {ccmp_anddi}
     (nil))
(insn 3264 3263 3266 246 (set:SI (reg:SI 1741)
        (ne:SI (reg:CC_DLT 66 cc)
            (const_int 0 [0]))) verify.c:38 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC_DLT 66 cc)
        (nil)))
(insn 3266 3264 3267 246 (set (reg:SI 1742 [ D.3809 ])
        (zero_extend:SI (subreg:QI (reg:SI 1741) 0))) verify.c:38 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1741)
        (nil)))
(insn 3267 3266 3268 246 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1742 [ D.3809 ])
            (const_int 0 [0]))) verify.c:38 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1742 [ D.3809 ])
        (nil)))
(jump_insn 3268 3267 3269 246 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3261)
            (pc))) verify.c:38 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9752 (nil)))
 -> 3261)
;;  succ:       242 [97.5%] 
;;              247 [2.5%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 581 609 623 624 625 626 647 668 672 715 727 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 247, loop depth 0, count 0, freq 482, maybe hot
;; Invalid sum of incoming frequencies 220, should be 482
;;  prev block 246, next block 248, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       246 [2.5%]  (FALLTHRU,LOOP_EXIT)
;; bb 247 artificial_defs: { }
;; bb 247 artificial_uses: { u3261(29){ }u3262(31){ }u3263(64){ }u3264(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 1861
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(note 3269 3268 3270 247 [bb 247] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3270 3269 3271 247 (var_location:QI D#49 (le:QI (reg:DI 1861 [ D.3798 ])
        (reg/v:DI 609 [ nhop ]))) verify.c:43 -1
     (nil))
(debug_insn 3271 3270 3272 247 (var_location:SI D#48 (zero_extend:SI (debug_expr:QI D#49))) verify.c:43 -1
     (nil))
(debug_insn 3272 3271 3274 247 (var_location:SI D#47 (neg:SI (debug_expr:SI D#48))) verify.c:43 -1
     (nil))
(debug_insn 3274 3272 3275 247 (var_location:SI terr (debug_expr:SI D#47)) -1
     (nil))
(insn 3275 3274 3276 247 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1861 [ D.3798 ])
            (reg/v:DI 609 [ nhop ]))) verify.c:46 391 {*cmpdi}
     (nil))
(jump_insn 3276 3275 3277 247 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4008)
            (pc))) verify.c:46 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 3154 (nil)))
 -> 4008)
;;  succ:       248 [68.5%]  (FALLTHRU)
;;              300 [31.5%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 248, loop depth 0, count 0, freq 330, maybe hot
;;  prev block 247, next block 249, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       247 [68.5%]  (FALLTHRU)
;; bb 248 artificial_defs: { }
;; bb 248 artificial_uses: { u3270(29){ }u3271(31){ }u3272(64){ }u3273(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 731
;; lr  def 	 66 [cc] 733
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 609 623 624 625 626 647 668 672 715 731 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 733
;; live  kill	
(note 3277 3276 3278 248 [bb 248] NOTE_INSN_BASIC_BLOCK)
(insn 3278 3277 3281 248 (set (reg/v:DI 733 [ nhop ])
        (plus:DI (reg/v:DI 609 [ nhop ])
            (reg:DI 731 [ D.3798 ]))) verify.c:49 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 731 [ D.3798 ])
        (expr_list:REG_DEAD (reg/v:DI 609 [ nhop ])
            (nil))))
(debug_insn 3281 3278 3282 248 (var_location:DI nhop (reg/v:DI 733 [ nhop ])) -1
     (nil))
(debug_insn 3282 3281 3283 248 (var_location:DI parent (reg/v:DI 745 [ parent ])) -1
     (nil))
(insn 3283 3282 3284 248 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 733 [ nhop ])
            (const_int 0 [0]))) verify.c:52 391 {*cmpdi}
     (nil))
(jump_insn 3284 3283 3285 248 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3288)
            (pc))) verify.c:52 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 3288)
;;  succ:       250 [0.0%]  (LOOP_EXIT)
;;              249 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 249, loop depth 0, count 0, freq 330, maybe hot
;;  prev block 248, next block 250, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       248 [100.0%]  (FALLTHRU)
;; bb 249 artificial_defs: { }
;; bb 249 artificial_uses: { u3280(29){ }u3281(31){ }u3282(64){ }u3283(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672 809
;; lr  def 	 461 805
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 733 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 461 805
;; live  kill	
(note 3285 3284 240 249 [bb 249] NOTE_INSN_BASIC_BLOCK)
(insn 240 3285 241 249 (set (reg:DI 805 [ D.3798 ])
        (reg:DI 809 [ D.3798 ])) verify.c:52 48 {*movdi_aarch64}
     (nil))
(insn 241 240 3288 249 (set (reg/f:DI 461 [ D.3812 ])
        (reg:DI 672 [ ivtmp.84 ])) verify.c:52 48 {*movdi_aarch64}
     (nil))
;;  succ:       254 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 250, loop depth 0, count 0, freq 3
;;  prev block 249, next block 251, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       248 [0.0%]  (LOOP_EXIT)
;;              251 [0.0%]  (LOOP_EXIT)
;; bb 250 artificial_defs: { }
;; bb 250 artificial_uses: { u3286(29){ }u3287(31){ }u3288(64){ }u3289(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1743 1744 1746 1747 1748 1749 1750
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1743 1744 1746 1747 1748 1749 1750
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3288 241 3289 250 150 "" [2 uses])
(note 3289 3288 3290 250 [bb 250] NOTE_INSN_BASIC_BLOCK)
(insn 3290 3289 3291 250 (set (reg/f:DI 1744)
        (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) verify.c:52 48 {*movdi_aarch64}
     (nil))
(insn 3291 3290 3293 250 (set (reg/f:DI 1743)
        (lo_sum:DI (reg/f:DI 1744)
            (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) verify.c:52 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1744)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 3293 3291 3294 250 (set (reg/f:DI 1746)
        (plus:DI (reg/f:DI 1743)
            (const_int 48 [0x30]))) verify.c:52 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1743)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 48 [0x30])))
            (nil))))
(insn 3294 3293 3295 250 (set (reg/f:DI 1748)
        (high:DI (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))) verify.c:52 48 {*movdi_aarch64}
     (nil))
(insn 3295 3294 3296 250 (set (reg/f:DI 1747)
        (lo_sum:DI (reg/f:DI 1748)
            (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))) verify.c:52 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1748)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
            (nil))))
(insn 3296 3295 3297 250 (set (reg/f:DI 1750)
        (high:DI (symbol_ref/f:DI ("*.LC62") [flags 0x82]  <var_decl 0x7f3c5d881990 *.LC62>))) verify.c:52 48 {*movdi_aarch64}
     (nil))
(insn 3297 3296 3298 250 (set (reg/f:DI 1749)
        (lo_sum:DI (reg/f:DI 1750)
            (symbol_ref/f:DI ("*.LC62") [flags 0x82]  <var_decl 0x7f3c5d881990 *.LC62>))) verify.c:52 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1750)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC62") [flags 0x82]  <var_decl 0x7f3c5d881990 *.LC62>)
            (nil))))
(insn 3298 3297 3299 250 (set (reg:DI 3 x3)
        (reg/f:DI 1746)) verify.c:52 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1746)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 48 [0x30])))
            (nil))))
(insn 3299 3298 3300 250 (set (reg:SI 2 x2)
        (const_int 52 [0x34])) verify.c:52 47 {*movsi_aarch64}
     (nil))
(insn 3300 3299 3301 250 (set (reg:DI 1 x1)
        (reg/f:DI 1747)) verify.c:52 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1747)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
            (nil))))
(insn 3301 3300 3302 250 (set (reg:DI 0 x0)
        (reg/f:DI 1749)) verify.c:52 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1749)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC62") [flags 0x82]  <var_decl 0x7f3c5d881990 *.LC62>)
            (nil))))
(call_insn 3302 3301 3323 250 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) verify.c:52 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 251, loop depth 0, count 0, freq 6632, maybe hot
;;  prev block 250, next block 253, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       254 [95.5%] 
;; bb 251 artificial_defs: { }
;; bb 251 artificial_uses: { u3302(29){ }u3303(31){ }u3304(64){ }u3305(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 734
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 3323 3302 3304 251 152 "" [1 uses])
(note 3304 3323 3305 251 [bb 251] NOTE_INSN_BASIC_BLOCK)
(insn 3305 3304 3306 251 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 734 [ nhop ])
            (const_int 0 [0]))) verify.c:52 391 {*cmpdi}
     (nil))
(jump_insn 3306 3305 3307 251 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3288)
            (pc))) verify.c:52 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 3288)
;;  succ:       250 [0.0%]  (LOOP_EXIT)
;;              253 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 253, loop depth 0, count 0, freq 6629, maybe hot
;;  prev block 251, next block 254, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       251 [100.0%]  (FALLTHRU)
;; bb 253 artificial_defs: { }
;; bb 253 artificial_uses: { u3308(29){ }u3309(31){ }u3310(64){ }u3311(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 734 735
;; lr  def 	 733 805
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 733 805
;; live  kill	
(note 3307 3306 3308 253 [bb 253] NOTE_INSN_BASIC_BLOCK)
(insn 3308 3307 242 253 (set (reg:DI 805 [ D.3798 ])
        (mem:DI (plus:DI (reg/v/f:DI 647 [ bfs_tree ])
                (reg:DI 735 [ D.3802 ])) [4 MEM[(const int64_t *)_1346]+0 S8 A64])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 735 [ D.3802 ])
        (nil)))
(insn 242 3308 3309 253 (set (reg/v:DI 733 [ nhop ])
        (reg/v:DI 734 [ nhop ])) verify.c:52 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v:DI 734 [ nhop ])
        (nil)))
;;  succ:       254 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 254, loop depth 0, count 0, freq 6944, maybe hot
;;  prev block 253, next block 255, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       249 [100.0%]  (FALLTHRU)
;;              253 [100.0%]  (FALLTHRU,DFS_BACK)
;; bb 254 artificial_defs: { }
;; bb 254 artificial_uses: { u3315(29){ }u3316(31){ }u3317(64){ }u3318(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 668 733 805
;; lr  def 	 66 [cc] 461 734 735 737
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 733 745 746 752 777 805 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 461 734 735 737
;; live  kill	
(code_label 3309 242 3310 254 151 "" [0 uses])
(note 3310 3309 3311 254 [bb 254] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3311 3310 3312 254 (var_location:DI nhop (reg/v:DI 733 [ nhop ])) -1
     (nil))
(debug_insn 3312 3311 3313 254 (var_location:DI parent (reg/v:DI 745 [ parent ])) -1
     (nil))
(insn 3313 3312 3314 254 (set (reg/v:DI 734 [ nhop ])
        (plus:DI (reg/v:DI 733 [ nhop ])
            (const_int -1 [0xffffffffffffffff]))) verify.c:53 95 {*adddi3_aarch64}
     (nil))
(debug_insn 3314 3313 3315 254 (var_location:DI nhop (reg/v:DI 734 [ nhop ])) verify.c:53 -1
     (nil))
(insn 3315 3314 3316 254 (set (mem:DI (reg/f:DI 461 [ D.3812 ]) [4 *_363+0 S8 A64])
        (reg/v:DI 733 [ nhop ])) verify.c:53 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v:DI 733 [ nhop ])
        (expr_list:REG_DEAD (reg/f:DI 461 [ D.3812 ])
            (nil))))
(debug_insn 3316 3315 3318 254 (var_location:DI D#27 (mem:DI (debug_expr:DI D#39) [0 +0 S8 A64])) verify.c:54 -1
     (nil))
(debug_insn 3318 3316 3319 254 (var_location:DI nhop (reg/v:DI 734 [ nhop ])) -1
     (nil))
(debug_insn 3319 3318 3320 254 (var_location:DI parent (debug_expr:DI D#27)) -1
     (nil))
(insn 3320 3319 3321 254 (set (reg:DI 735 [ D.3802 ])
        (ashift:DI (reg:DI 805 [ D.3798 ])
            (const_int 3 [0x3]))) verify.c:51 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 805 [ D.3798 ])
        (nil)))
(insn 3321 3320 3322 254 (set (reg/f:DI 461 [ D.3812 ])
        (plus:DI (reg/v/f:DI 668 [ level ])
            (reg:DI 735 [ D.3802 ]))) verify.c:51 95 {*adddi3_aarch64}
     (nil))
(insn 3322 3321 3324 254 (set (reg:DI 737 [ D.3798 ])
        (mem:DI (reg/f:DI 461 [ D.3812 ]) [4 *_767+0 S8 A64])) verify.c:51 48 {*movdi_aarch64}
     (nil))
(insn 3324 3322 3325 254 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 737 [ D.3798 ])
            (const_int 0 [0]))) verify.c:51 391 {*cmpdi}
     (nil))
(jump_insn 3325 3324 3326 254 (set (pc)
        (if_then_else (lt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3323)
            (pc))) verify.c:51 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9550 (nil)))
 -> 3323)
;;  succ:       251 [95.5%] 
;;              255 [4.5%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 461 623 624 625 626 647 668 672 715 734 735 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 255, loop depth 0, count 0, freq 327, maybe hot
;;  prev block 254, next block 256, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       254 [4.5%]  (FALLTHRU,LOOP_EXIT)
;; bb 255 artificial_defs: { }
;; bb 255 artificial_uses: { u3332(29){ }u3333(31){ }u3334(64){ }u3335(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 734 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 734 737
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 734 737 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(note 3326 3325 3327 255 [bb 255] NOTE_INSN_BASIC_BLOCK)
(insn 3327 3326 3328 255 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 734 [ nhop ])
            (reg:DI 737 [ D.3798 ]))) verify.c:56 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 737 [ D.3798 ])
        (expr_list:REG_DEAD (reg/v:DI 734 [ nhop ])
            (nil))))
(jump_insn 3328 3327 3329 255 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3344)
            (pc))) verify.c:56 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 3344)
;;  succ:       256 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              257 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 256, loop depth 0, count 0, freq 0
;;  prev block 255, next block 257, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       255 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 256 artificial_defs: { }
;; bb 256 artificial_uses: { u3339(29){ }u3340(31){ }u3341(64){ }u3342(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1751 1752 1754 1755 1756 1757 1758
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1751 1752 1754 1755 1756 1757 1758
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 3329 3328 3330 256 [bb 256] NOTE_INSN_BASIC_BLOCK)
(insn 3330 3329 3331 256 (set (reg/f:DI 1752)
        (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) verify.c:56 48 {*movdi_aarch64}
     (nil))
(insn 3331 3330 3333 256 (set (reg/f:DI 1751)
        (lo_sum:DI (reg/f:DI 1752)
            (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) verify.c:56 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1752)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 3333 3331 3334 256 (set (reg/f:DI 1754)
        (plus:DI (reg/f:DI 1751)
            (const_int 48 [0x30]))) verify.c:56 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1751)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 48 [0x30])))
            (nil))))
(insn 3334 3333 3335 256 (set (reg/f:DI 1756)
        (high:DI (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))) verify.c:56 48 {*movdi_aarch64}
     (nil))
(insn 3335 3334 3336 256 (set (reg/f:DI 1755)
        (lo_sum:DI (reg/f:DI 1756)
            (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))) verify.c:56 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1756)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
            (nil))))
(insn 3336 3335 3337 256 (set (reg/f:DI 1758)
        (high:DI (symbol_ref/f:DI ("*.LC63") [flags 0x82]  <var_decl 0x7f3c5d881a20 *.LC63>))) verify.c:56 48 {*movdi_aarch64}
     (nil))
(insn 3337 3336 3338 256 (set (reg/f:DI 1757)
        (lo_sum:DI (reg/f:DI 1758)
            (symbol_ref/f:DI ("*.LC63") [flags 0x82]  <var_decl 0x7f3c5d881a20 *.LC63>))) verify.c:56 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1758)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC63") [flags 0x82]  <var_decl 0x7f3c5d881a20 *.LC63>)
            (nil))))
(insn 3338 3337 3339 256 (set (reg:DI 3 x3)
        (reg/f:DI 1754)) verify.c:56 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1754)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 48 [0x30])))
            (nil))))
(insn 3339 3338 3340 256 (set (reg:SI 2 x2)
        (const_int 56 [0x38])) verify.c:56 47 {*movsi_aarch64}
     (nil))
(insn 3340 3339 3341 256 (set (reg:DI 1 x1)
        (reg/f:DI 1755)) verify.c:56 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1755)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
            (nil))))
(insn 3341 3340 3342 256 (set (reg:DI 0 x0)
        (reg/f:DI 1757)) verify.c:56 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1757)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC63") [flags 0x82]  <var_decl 0x7f3c5d881a20 *.LC63>)
            (nil))))
(call_insn 3342 3341 3344 256 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) verify.c:56 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 257, loop depth 0, count 0, freq 327, maybe hot
;;  prev block 256, next block 258, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       255 [100.0%] 
;; bb 257 artificial_defs: { }
;; bb 257 artificial_uses: { u3355(29){ }u3356(31){ }u3357(64){ }u3358(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672
;; lr  def 	 66 [cc] 738
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 738
;; live  kill	
(code_label 3344 3342 3345 257 153 "" [1 uses])
(note 3345 3344 3346 257 [bb 257] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3346 3345 3347 257 (var_location:DI nhop (const_int 0 [0])) verify.c:60 -1
     (nil))
(debug_insn 3347 3346 3348 257 (var_location:DI parent (reg/v:DI 745 [ parent ])) verify.c:61 -1
     (nil))
(insn 3348 3347 3349 257 (set (reg/v:DI 738 [ lastlvl ])
        (mem:DI (reg:DI 672 [ ivtmp.84 ]) [4 MEM[base: _745, offset: 0B]+0 S8 A64])) verify.c:62 48 {*movdi_aarch64}
     (nil))
(debug_insn 3349 3348 3351 257 (var_location:DI D#23 (plus:DI (reg/v:DI 738 [ lastlvl ])
        (const_int 1 [0x1]))) verify.c:62 -1
     (nil))
(debug_insn 3351 3349 3352 257 (var_location:DI lastlvl (debug_expr:DI D#23)) -1
     (nil))
(debug_insn 3352 3351 3353 257 (var_location:DI nhop (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 3353 3352 3354 257 (var_location:DI parent (reg/v:DI 745 [ parent ])) -1
     (nil))
(insn 3354 3353 3355 257 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 738 [ lastlvl ])
            (const_int 0 [0]))) verify.c:63 391 {*cmpdi}
     (nil))
(jump_insn 3355 3354 3396 257 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3402)
            (pc))) verify.c:63 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 450 (nil)))
 -> 3402)
;;  succ:       261 [95.5%]  (FALLTHRU)
;;              262 [4.5%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 258, loop depth 0, count 0, freq 6572, maybe hot
;;  prev block 257, next block 259, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       261 [95.5%] 
;; bb 258 artificial_defs: { }
;; bb 258 artificial_uses: { u3369(29){ }u3370(31){ }u3371(64){ }u3372(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 738 739
;; lr  def 	 66 [cc] 1759
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 1759
;; live  kill	
(code_label 3396 3355 3359 258 156 "" [1 uses])
(note 3359 3396 3360 258 [bb 258] NOTE_INSN_BASIC_BLOCK)
(insn 3360 3359 3361 258 (set (reg:DI 1759 [ D.3798 ])
        (plus:DI (reg/v:DI 739 [ lastlvl ])
            (const_int 1 [0x1]))) verify.c:64 95 {*adddi3_aarch64}
     (nil))
(insn 3361 3360 3362 258 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1759 [ D.3798 ])
            (reg/v:DI 738 [ lastlvl ]))) verify.c:64 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1759 [ D.3798 ])
        (expr_list:REG_DEAD (reg/v:DI 738 [ lastlvl ])
            (nil))))
(jump_insn 3362 3361 3363 258 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3367)
            (pc))) verify.c:64 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 3367)
;;  succ:       260 [0.0%]  (LOOP_EXIT)
;;              259 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 259, loop depth 0, count 0, freq 6569, maybe hot
;;  prev block 258, next block 260, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       258 [100.0%]  (FALLTHRU)
;; bb 259 artificial_defs: { }
;; bb 259 artificial_uses: { u3377(29){ }u3378(31){ }u3379(64){ }u3380(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 739 741
;; lr  def 	 738 809
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 738 809
;; live  kill	
(note 3363 3362 3364 259 [bb 259] NOTE_INSN_BASIC_BLOCK)
(insn 3364 3363 243 259 (set (reg:DI 809 [ D.3798 ])
        (mem:DI (plus:DI (reg/v/f:DI 647 [ bfs_tree ])
                (reg:DI 741 [ D.3802 ])) [4 MEM[(const int64_t *)_1354]+0 S8 A64])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 741 [ D.3802 ])
        (nil)))
(insn 243 3364 3367 259 (set (reg/v:DI 738 [ lastlvl ])
        (reg/v:DI 739 [ lastlvl ])) verify.c:64 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v:DI 739 [ lastlvl ])
        (nil)))
;;  succ:       261 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 260, loop depth 0, count 0, freq 3
;;  prev block 259, next block 261, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       258 [0.0%]  (LOOP_EXIT)
;; bb 260 artificial_defs: { }
;; bb 260 artificial_uses: { u3384(29){ }u3385(31){ }u3386(64){ }u3387(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1760 1761 1763 1764 1765 1766 1767
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 1760 1761 1763 1764 1765 1766 1767
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3367 243 3368 260 155 "" [1 uses])
(note 3368 3367 3369 260 [bb 260] NOTE_INSN_BASIC_BLOCK)
(insn 3369 3368 3370 260 (set (reg/f:DI 1761)
        (high:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) verify.c:64 48 {*movdi_aarch64}
     (nil))
(insn 3370 3369 3372 260 (set (reg/f:DI 1760)
        (lo_sum:DI (reg/f:DI 1761)
            (symbol_ref:DI ("*.LANCHOR2") [flags 0x182]))) verify.c:64 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1761)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
            (nil))))
(insn 3372 3370 3373 260 (set (reg/f:DI 1763)
        (plus:DI (reg/f:DI 1760)
            (const_int 48 [0x30]))) verify.c:64 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1760)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 48 [0x30])))
            (nil))))
(insn 3373 3372 3374 260 (set (reg/f:DI 1765)
        (high:DI (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))) verify.c:64 48 {*movdi_aarch64}
     (nil))
(insn 3374 3373 3375 260 (set (reg/f:DI 1764)
        (lo_sum:DI (reg/f:DI 1765)
            (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>))) verify.c:64 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1765)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
            (nil))))
(insn 3375 3374 3376 260 (set (reg/f:DI 1767)
        (high:DI (symbol_ref/f:DI ("*.LC64") [flags 0x82]  <var_decl 0x7f3c5d881ab0 *.LC64>))) verify.c:64 48 {*movdi_aarch64}
     (nil))
(insn 3376 3375 3377 260 (set (reg/f:DI 1766)
        (lo_sum:DI (reg/f:DI 1767)
            (symbol_ref/f:DI ("*.LC64") [flags 0x82]  <var_decl 0x7f3c5d881ab0 *.LC64>))) verify.c:64 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1767)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC64") [flags 0x82]  <var_decl 0x7f3c5d881ab0 *.LC64>)
            (nil))))
(insn 3377 3376 3378 260 (set (reg:DI 3 x3)
        (reg/f:DI 1763)) verify.c:64 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1763)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR2") [flags 0x182])
                    (const_int 48 [0x30])))
            (nil))))
(insn 3378 3377 3379 260 (set (reg:SI 2 x2)
        (const_int 64 [0x40])) verify.c:64 47 {*movsi_aarch64}
     (nil))
(insn 3379 3378 3380 260 (set (reg:DI 1 x1)
        (reg/f:DI 1764)) verify.c:64 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1764)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC60") [flags 0x82]  <var_decl 0x7f3c5d881870 *.LC60>)
            (nil))))
(insn 3380 3379 3381 260 (set (reg:DI 0 x0)
        (reg/f:DI 1766)) verify.c:64 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1766)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC64") [flags 0x82]  <var_decl 0x7f3c5d881ab0 *.LC64>)
            (nil))))
(call_insn 3381 3380 3383 260 (parallel [
            (call (mem:DI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>) [0 __assert_fail S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) verify.c:64 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 3 x3)
        (expr_list:REG_DEAD (reg:SI 2 x2)
            (expr_list:REG_DEAD (reg:DI 1 x1)
                (expr_list:REG_DEAD (reg:DI 0 x0)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7f3c5e24c500 __assert_fail>)
                        (expr_list:REG_NORETURN (const_int 0 [0])
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (expr_list:DI (use (reg:DI 3 x3))
                            (nil))))))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 261, loop depth 0, count 0, freq 6883, maybe hot
;;  prev block 260, next block 262, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       257 [95.5%]  (FALLTHRU)
;;              259 [100.0%]  (FALLTHRU,DFS_BACK)
;; bb 261 artificial_defs: { }
;; bb 261 artificial_uses: { u3400(29){ }u3401(31){ }u3402(64){ }u3403(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 809
;; lr  def 	 66 [cc] 739 741
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 745 746 752 777 809 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 739 741
;; live  kill	
(code_label 3383 3381 3384 261 154 "" [0 uses])
(note 3384 3383 3388 261 [bb 261] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3388 3384 3391 261 (var_location:DI D#26 (mem:DI (debug_expr:DI D#38) [0 +0 S8 A64])) verify.c:66 -1
     (nil))
(debug_insn 3391 3388 3392 261 (var_location:DI lastlvl (reg/v:DI 738 [ lastlvl ])) -1
     (nil))
(debug_insn 3392 3391 3393 261 (var_location:DI nhop (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 3393 3392 3394 261 (var_location:DI parent (debug_expr:DI D#26)) -1
     (nil))
(insn 3394 3393 3395 261 (set (reg:DI 741 [ D.3802 ])
        (ashift:DI (reg:DI 809 [ D.3798 ])
            (const_int 3 [0x3]))) verify.c:63 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 809 [ D.3798 ])
        (nil)))
(insn 3395 3394 3397 261 (set (reg/v:DI 739 [ lastlvl ])
        (mem:DI (plus:DI (reg/v/f:DI 668 [ level ])
                (reg:DI 741 [ D.3802 ])) [4 *_784+0 S8 A64])) verify.c:63 48 {*movdi_aarch64}
     (nil))
(insn 3397 3395 3398 261 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 739 [ lastlvl ])
            (const_int 0 [0]))) verify.c:63 391 {*cmpdi}
     (nil))
(jump_insn 3398 3397 3402 261 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3396)
            (pc))) verify.c:63 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9550 (nil)))
 -> 3396)
;;  succ:       258 [95.5%] 
;;              262 [4.5%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 738 739 741 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 262, loop depth 0, count 0, freq 6729, maybe hot
;; Invalid sum of incoming frequencies 6529, should be 6729
;;  prev block 261, next block 263, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       237 [73.0%] 
;;              261 [4.5%]  (FALLTHRU,LOOP_EXIT)
;;              300 [100.0%]  (FALLTHRU)
;;              238 [50.0%] 
;;              239 [0.0%] 
;;              257 [4.5%] 
;;              299 [100.0%]  (FALLTHRU)
;; bb 262 artificial_defs: { }
;; bb 262 artificial_uses: { u3410(29){ }u3411(31){ }u3412(64){ }u3413(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 672 745 1861
;; lr  def 	 66 [cc] 672 745
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 672 745
;; live  kill	
(code_label 3402 3398 3403 262 144 "" [4 uses])
(note 3403 3402 3404 262 [bb 262] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3404 3403 3405 262 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3405 3404 3407 262 (set (reg/v:DI 745 [ parent ])
        (plus:DI (reg/v:DI 745 [ parent ])
            (const_int 1 [0x1]))) verify.c:31 95 {*adddi3_aarch64}
     (nil))
(debug_insn 3407 3405 3408 262 (var_location:DI k (reg/v:DI 745 [ parent ])) -1
     (nil))
(debug_insn 3408 3407 3409 262 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3409 3408 3411 262 (set (reg:DI 672 [ ivtmp.84 ])
        (plus:DI (reg:DI 672 [ ivtmp.84 ])
            (const_int 8 [0x8]))) 95 {*adddi3_aarch64}
     (nil))
(insn 3411 3409 3412 262 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1861 [ D.3798 ])
            (reg/v:DI 745 [ parent ]))) verify.c:31 391 {*cmpdi}
     (nil))
(jump_insn 3412 3411 3416 262 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3410)
            (pc))) verify.c:31 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9800 (nil)))
 -> 3410)
;;  succ:       237 [98.0%]  (DFS_BACK)
;;              312 [2.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 263, loop depth 0, count 0, freq 69, maybe hot
;;  prev block 262, next block 264, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       222 [9.0%] 
;;              264 [100.0%]  (FALLTHRU)
;; bb 263 artificial_defs: { }
;; bb 263 artificial_uses: { u3422(29){ }u3423(31){ }u3424(64){ }u3425(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 626
;; lr  def 	 66 [cc] 763
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 763
;; live  kill	
(code_label 3416 3412 3417 263 136 "" [1 uses])
(note 3417 3416 3418 263 [bb 263] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3418 3417 3419 263 (var_location:SI terr (const_int 0 [0])) -1
     (nil))
(debug_insn 3419 3418 3420 263 (var_location:DI k (const_int 0 [0])) -1
     (nil))
(debug_insn 3420 3419 3421 263 (var_location:SI nedge_traversed (const_int 0 [0])) -1
     (nil))
(debug_insn 3421 3420 3422 263 (var_location:SI err (const_int 0 [0])) -1
     (nil))
(insn 3422 3421 3423 263 (set (reg:DI 763 [ D.3798 ])
        (ashift:DI (reg:DI 626 [ D.3798 ])
            (const_int 1 [0x1]))) verify.c:117 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 626 [ D.3798 ])
        (nil)))
(insn 3423 3422 3424 263 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 763 [ D.3798 ])
            (const_int 0 [0]))) verify.c:117 391 {*cmpdi}
     (nil))
(jump_insn 3424 3423 3428 263 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3464)
            (pc))) verify.c:117 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 3464)
;;  succ:       265 [91.0%] 
;;              319 [9.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 264, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 263, next block 265, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       312 [46.7%]  (FALLTHRU)
;; bb 264 artificial_defs: { }
;; bb 264 artificial_uses: { u3429(29){ }u3430(31){ }u3431(64){ }u3432(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1768 1770 1771
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 1768 1770 1771
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 3428 3424 3439 264 [bb 264] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3439 3428 3440 264 (var_location:DI level (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3440 3439 3441 264 (var_location:DI nv (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3441 3440 3442 264 (var_location:DI bfs_tree (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3442 3441 3443 264 (var_location:DI root (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3443 3442 3444 264 (var_location:DI lastlvl (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3444 3443 3445 264 (var_location:DI nhop (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3445 3444 3446 264 (var_location:DI parent (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3446 3445 3447 264 (var_location:DI k (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3447 3446 3448 264 (var_location:SI err (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3448 3447 3449 264 (var_location:SI err (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3449 3448 3451 264 (var_location:DI k (const_int 0 [0])) -1
     (nil))
(insn 3451 3449 3452 264 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 623 [ D.3798 ])
            (const_int 0 [0]))) 391 {*cmpdi}
     (nil))
(insn 3452 3451 3453 264 (set (reg:DI 1768 [ D.3798 ])
        (if_then_else:DI (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (reg:DI 623 [ D.3798 ])
            (const_int 0 [0]))) 443 {*cmovdi_insn}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (nil)))
(insn 3453 3452 3454 264 (set (reg:DI 1770 [ D.3805 ])
        (plus:DI (reg:DI 1768 [ D.3798 ])
            (const_int 1 [0x1]))) 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1768 [ D.3798 ])
        (nil)))
(insn 3454 3453 3457 264 (set (reg:DI 1771 [ D.3805 ])
        (ashift:DI (reg:DI 1770 [ D.3805 ])
            (const_int 3 [0x3]))) 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1770 [ D.3805 ])
        (nil)))
(insn 3457 3454 3458 264 (set (reg:DI 2 x2)
        (reg:DI 1771 [ D.3805 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1771 [ D.3805 ])
        (nil)))
(insn 3458 3457 3459 264 (set (reg:SI 1 x1)
        (const_int 0 [0])) 47 {*movsi_aarch64}
     (nil))
(insn 3459 3458 3460 264 (set (reg:DI 0 x0)
        (reg/v/f:DI 746 [ seen_edge ])) 48 {*movdi_aarch64}
     (nil))
(call_insn 3460 3459 3464 264 (parallel [
            (set (reg:DI 0 x0)
                (call (mem:DI (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f3c5d823900 memset>) [0 memset S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:DI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("memset") [flags 0x41]  <function_decl 0x7f3c5d823900 memset>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
;;  succ:       263 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 265, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 264, next block 266, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       263 [91.0%] 
;; bb 265 artificial_defs: { }
;; bb 265 artificial_uses: { u3446(29){ }u3447(31){ }u3448(64){ }u3449(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 625 763
;; lr  def 	 610 708 715 720 1775 1776 1777 1778 1872 1873 1874
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 647 668 746 752 763 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 610 708 715 720 1775 1776 1777 1778 1872 1873 1874
;; live  kill	
(code_label 3464 3460 3465 265 159 "" [1 uses])
(note 3465 3464 3466 265 [bb 265] NOTE_INSN_BASIC_BLOCK)
(insn 3466 3465 3467 265 (set (reg:DI 708 [ ivtmp.64 ])
        (plus:DI (reg/f:DI 625 [ D.3803 ])
            (const_int 8 [0x8]))) 95 {*adddi3_aarch64}
     (nil))
(insn 3467 3466 3468 265 (set (reg:DI 1775 [ D.3810 ])
        (plus:DI (reg:DI 763 [ D.3798 ])
            (const_int -1 [0xffffffffffffffff]))) 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 763 [ D.3798 ])
        (nil)))
(insn 3468 3467 3469 265 (set (reg:DI 1776 [ D.3810 ])
        (lshiftrt:DI (reg:DI 1775 [ D.3810 ])
            (const_int 1 [0x1]))) 637 {*aarch64_lshr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1775 [ D.3810 ])
        (nil)))
(insn 3469 3468 3470 265 (set (reg:DI 1777 [ D.3810 ])
        (ashift:DI (reg:DI 1776 [ D.3810 ])
            (const_int 4 [0x4]))) 635 {*aarch64_ashl_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg:DI 1776 [ D.3810 ])
        (nil)))
(insn 3470 3469 3471 265 (set (reg:DI 1778 [ D.3805 ])
        (plus:DI (reg:DI 1777 [ D.3810 ])
            (const_int 24 [0x18]))) 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1777 [ D.3810 ])
        (nil)))
(insn 3471 3470 244 265 (set (reg:DI 720 [ D.3810 ])
        (plus:DI (reg/f:DI 625 [ D.3803 ])
            (reg:DI 1778 [ D.3805 ]))) 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1778 [ D.3805 ])
        (expr_list:REG_DEAD (reg/f:DI 625 [ D.3803 ])
            (nil))))
(insn 244 3471 245 265 (set (reg/v:SI 715 [ err ])
        (const_int 0 [0])) verify.c:117 47 {*movsi_aarch64}
     (nil))
(insn 245 244 248 265 (set (reg/v:SI 610 [ nedge_traversed ])
        (const_int 0 [0])) verify.c:117 47 {*movsi_aarch64}
     (nil))
(insn 248 245 252 265 (set (reg:SI 1872 [ err ])
        (const_int 0 [0])) verify.c:132 47 {*movsi_aarch64}
     (nil))
(insn 252 248 3550 265 (set (reg:SI 1873 [ err ])
        (const_int -14 [0xfffffffffffffff2])) verify.c:153 47 {*movsi_aarch64}
     (nil))
(insn 3550 252 3573 265 (set (reg:DI 1874)
        (const_int 1 [0x1])) verify.c:148 48 {*movdi_aarch64}
     (nil))
;;  succ:       266 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 266, loop depth 0, count 0, freq 695, maybe hot
;;  prev block 265, next block 267, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       265 [100.0%]  (FALLTHRU)
;;              279 [91.0%]  (DFS_BACK)
;; bb 266 artificial_defs: { }
;; bb 266 artificial_uses: { u3457(29){ }u3458(31){ }u3459(64){ }u3460(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 708 715
;; lr  def 	 66 [cc] 674 675 716 1780 1781
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 674 675 716 1780 1781
;; live  kill	
(code_label 3573 3550 3472 266 170 "" [1 uses])
(note 3472 3573 3473 266 [bb 266] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3473 3472 3474 266 (var_location:SI terr (const_int 0 [0])) -1
     (nil))
(debug_insn 3474 3473 3475 266 (var_location:DI k (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 3475 3474 3476 266 (var_location:SI nedge_traversed (reg/v:SI 610 [ nedge_traversed ])) -1
     (nil))
(debug_insn 3476 3475 3478 266 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3478 3476 3479 266 (set (reg/v:DI 674 [ i ])
        (mem:DI (plus:DI (reg:DI 708 [ ivtmp.64 ])
                (const_int -8 [0xfffffffffffffff8])) [4 MEM[base: _1398, offset: -8B]+0 S8 A64])) verify.c:118 48 {*movdi_aarch64}
     (nil))
(debug_insn 3479 3478 3480 266 (var_location:DI i (reg/v:DI 674 [ i ])) verify.c:118 -1
     (nil))
(insn 3480 3479 3481 266 (set (reg/v:DI 675 [ j ])
        (mem:DI (reg:DI 708 [ ivtmp.64 ]) [4 MEM[base: _1398, offset: 0B]+0 S8 A64])) verify.c:119 48 {*movdi_aarch64}
     (nil))
(debug_insn 3481 3480 3482 266 (var_location:DI j (reg/v:DI 675 [ j ])) verify.c:119 -1
     (nil))
(debug_insn 3482 3481 3483 266 (var_location:SI terr (reg/v:SI 715 [ err ])) verify.c:121 -1
     (nil))
(insn 3483 3482 3484 266 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 674 [ i ])
            (const_int 0 [0]))) verify.c:123 391 {*cmpdi}
     (nil))
(insn 3484 3483 3485 266 (set (reg:CC_DLT 66 cc)
        (compare (ior:SI (ne (reg:CC_DLT 66 cc)
                    (const_int 0 [0]))
                (lt (reg/v:DI 675 [ j ])
                    (const_int 0 [0])))
            (const_int 0 [0]))) verify.c:123 6 {ccmp_iordi}
     (nil))
(insn 3485 3484 3487 266 (set:SI (reg:SI 1780)
        (ne:SI (reg:CC_DLT 66 cc)
            (const_int 0 [0]))) verify.c:123 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC_DLT 66 cc)
        (nil)))
(insn 3487 3485 246 266 (set (reg:SI 1781 [ D.3813 ])
        (zero_extend:SI (subreg:QI (reg:SI 1780) 0))) verify.c:123 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1780)
        (nil)))
(insn 246 3487 3488 266 (set (reg/v:SI 716 [ err ])
        (reg/v:SI 715 [ err ])) verify.c:123 47 {*movsi_aarch64}
     (nil))
(insn 3488 246 3489 266 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1781 [ D.3813 ])
            (const_int 0 [0]))) verify.c:123 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1781 [ D.3813 ])
        (nil)))
(jump_insn 3489 3488 3490 266 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3562)
            (pc))) verify.c:123 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 3562)
;;  succ:       279 [50.0%] 
;;              267 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 267, loop depth 0, count 0, freq 347, maybe hot
;;  prev block 266, next block 268, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       266 [50.0%]  (FALLTHRU)
;; bb 267 artificial_defs: { }
;; bb 267 artificial_uses: { u3477(29){ }u3478(31){ }u3479(64){ }u3480(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 679 1783 1785 1786 1788
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 679 1783 1785 1786 1788
;; live  kill	
(note 3490 3489 3491 267 [bb 267] NOTE_INSN_BASIC_BLOCK)
(insn 3491 3490 3492 267 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 623 [ D.3798 ])
            (reg/v:DI 674 [ i ]))) verify.c:124 391 {*cmpdi}
     (nil))
(insn 3492 3491 3494 267 (set (reg:SI 1783)
        (lt:SI (reg:CC 66 cc)
            (const_int 0 [0]))) verify.c:124 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (nil)))
(insn 3494 3492 3495 267 (set (reg:SI 679 [ D.3813 ])
        (zero_extend:SI (subreg:QI (reg:SI 1783) 0))) verify.c:124 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1783)
        (nil)))
(insn 3495 3494 3496 267 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 623 [ D.3798 ])
            (reg/v:DI 675 [ j ]))) verify.c:124 391 {*cmpdi}
     (nil))
(insn 3496 3495 3498 267 (set (reg:SI 1785)
        (ge:SI (reg:CC 66 cc)
            (const_int 0 [0]))) verify.c:124 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (nil)))
(insn 3498 3496 3500 267 (set (reg:SI 1786)
        (and:SI (reg:SI 679 [ D.3813 ])
            (reg:SI 1785))) verify.c:124 465 {andsi3}
     (expr_list:REG_DEAD (reg:SI 1785)
        (nil)))
(insn 3500 3498 3501 267 (set (reg:SI 1788)
        (zero_extend:SI (subreg:QI (reg:SI 1786) 0))) verify.c:124 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1786)
        (nil)))
(insn 3501 3500 3502 267 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1788)
            (const_int 0 [0]))) verify.c:124 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1788)
        (nil)))
(jump_insn 3502 3501 3503 267 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3782)
            (pc))) verify.c:124 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 3782)
;;  succ:       301 [50.0%] 
;;              268 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 268, loop depth 0, count 0, freq 173, maybe hot
;;  prev block 267, next block 269, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       267 [50.0%]  (FALLTHRU)
;; bb 268 artificial_defs: { }
;; bb 268 artificial_uses: { u3496(29){ }u3497(31){ }u3498(64){ }u3499(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 1790 1791
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 1790 1791
;; live  kill	
(note 3503 3502 3504 268 [bb 268] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3504 3503 3505 268 (var_location:SI terr (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3505 3504 3506 268 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 623 [ D.3798 ])
            (reg/v:DI 675 [ j ]))) verify.c:125 391 {*cmpdi}
     (nil))
(insn 3506 3505 3507 268 (set (reg:CC_DGE 66 cc)
        (compare (and:SI (ne (reg:CC_DLT 66 cc)
                    (const_int 0 [0]))
                (ge (reg:DI 623 [ D.3798 ])
                    (reg/v:DI 674 [ i ])))
            (const_int 0 [0]))) verify.c:125 4 {ccmp_anddi}
     (nil))
(insn 3507 3506 3509 268 (set:SI (reg:SI 1790)
        (ne:SI (reg:CC_DGE 66 cc)
            (const_int 0 [0]))) verify.c:125 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC_DGE 66 cc)
        (nil)))
(insn 3509 3507 3510 268 (set (reg:SI 1791 [ D.3813 ])
        (zero_extend:SI (subreg:QI (reg:SI 1790) 0))) verify.c:125 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1790)
        (nil)))
(insn 3510 3509 3511 268 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1791 [ D.3813 ])
            (const_int 0 [0]))) verify.c:125 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1791 [ D.3813 ])
        (nil)))
(jump_insn 3511 3510 3512 268 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4014)
            (pc))) verify.c:125 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 4014)
;;  succ:       313 [50.0%] 
;;              269 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 269, loop depth 0, count 0, freq 86, maybe hot
;;  prev block 268, next block 270, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       268 [50.0%]  (FALLTHRU)
;; bb 269 artificial_defs: { }
;; bb 269 artificial_uses: { u3511(29){ }u3512(31){ }u3513(64){ }u3514(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 679 715
;; lr  def 	 66 [cc] 716 1793 1794 1796
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 679 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 716 1793 1794 1796
;; live  kill	
(note 3512 3511 3513 269 [bb 269] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3513 3512 3514 269 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3514 3513 3515 269 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 715 [ err ])
            (const_int 0 [0]))) verify.c:127 390 {*cmpsi}
     (nil))
(insn 3515 3514 3517 269 (set (reg:SI 1793)
        (ne:SI (reg:CC 66 cc)
            (const_int 0 [0]))) verify.c:127 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (nil)))
(insn 3517 3515 3519 269 (set (reg:SI 1794)
        (ior:SI (reg:SI 679 [ D.3813 ])
            (reg:SI 1793))) verify.c:127 466 {iorsi3}
     (expr_list:REG_DEAD (reg:SI 1793)
        (expr_list:REG_DEAD (reg:SI 679 [ D.3813 ])
            (nil))))
(insn 3519 3517 247 269 (set (reg:SI 1796)
        (zero_extend:SI (subreg:QI (reg:SI 1794) 0))) verify.c:127 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1794)
        (nil)))
(insn 247 3519 3520 269 (set (reg/v:SI 716 [ err ])
        (reg/v:SI 715 [ err ])) verify.c:127 47 {*movsi_aarch64}
     (nil))
(insn 3520 247 3521 269 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1796)
            (const_int 0 [0]))) verify.c:127 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1796)
        (nil)))
(jump_insn 3521 3520 3522 269 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3562)
            (pc))) verify.c:127 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 3562)
;;  succ:       279
;;              270 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 270, loop depth 0, count 0, freq 174, maybe hot
;;  prev block 269, next block 271, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       269 [100.0%]  (FALLTHRU)
;; bb 270 artificial_defs: { }
;; bb 270 artificial_uses: { u3525(29){ }u3526(31){ }u3527(64){ }u3528(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 674
;; lr  def 	 66 [cc] 688 690
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 688 690
;; live  kill	
(note 3522 3521 3523 270 [bb 270] NOTE_INSN_BASIC_BLOCK)
(insn 3523 3522 3524 270 (set (reg:DI 688 [ D.3802 ])
        (ashift:DI (reg/v:DI 674 [ i ])
            (const_int 3 [0x3]))) verify.c:131 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 3524 3523 3525 270 (set (reg:DI 690 [ D.3798 ])
        (mem:DI (plus:DI (reg/v/f:DI 647 [ bfs_tree ])
                (reg:DI 688 [ D.3802 ])) [4 *_674+0 S8 A64])) verify.c:131 48 {*movdi_aarch64}
     (nil))
(insn 3525 3524 3526 270 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 690 [ D.3798 ])
            (const_int 0 [0]))) verify.c:131 391 {*cmpdi}
     (nil))
(jump_insn 3526 3525 3527 270 (set (pc)
        (if_then_else (lt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3894)
            (pc))) verify.c:131 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2700 (nil)))
 -> 3894)
;;  succ:       271 [73.0%]  (FALLTHRU)
;;              316 [27.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 271, loop depth 0, count 0, freq 127, maybe hot
;;  prev block 270, next block 272, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       270 [73.0%]  (FALLTHRU)
;; bb 271 artificial_defs: { }
;; bb 271 artificial_uses: { u3534(29){ }u3535(31){ }u3536(64){ }u3537(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 675
;; lr  def 	 66 [cc] 692 694
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 692 694
;; live  kill	
(note 3527 3526 3528 271 [bb 271] NOTE_INSN_BASIC_BLOCK)
(insn 3528 3527 3529 271 (set (reg:DI 692 [ D.3802 ])
        (ashift:DI (reg/v:DI 675 [ j ])
            (const_int 3 [0x3]))) verify.c:131 635 {*aarch64_ashl_sisd_or_int_di3}
     (nil))
(insn 3529 3528 3530 271 (set (reg:DI 694 [ D.3798 ])
        (mem:DI (plus:DI (reg/v/f:DI 647 [ bfs_tree ])
                (reg:DI 692 [ D.3802 ])) [4 *_678+0 S8 A64])) verify.c:131 48 {*movdi_aarch64}
     (nil))
(insn 3530 3529 3531 271 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 694 [ D.3798 ])
            (const_int 0 [0]))) verify.c:131 391 {*cmpdi}
     (nil))
(jump_insn 3531 3530 3887 271 (set (pc)
        (if_then_else (lt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4020)
            (pc))) verify.c:131 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2700 (nil)))
 -> 4020)
;;  succ:       302 [27.0%] 
;;              315 [73.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 272, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 271, next block 273, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       315 [72.0%] 
;; bb 272 artificial_defs: { }
;; bb 272 artificial_uses: { u3543(29){ }u3544(31){ }u3545(64){ }u3546(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 675 690
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 3887 3531 3535 272 190 "" [1 uses])
(note 3535 3887 3536 272 [bb 272] NOTE_INSN_BASIC_BLOCK)
(insn 3536 3535 3537 272 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 675 [ j ])
            (reg:DI 690 [ D.3798 ]))) verify.c:145 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 690 [ D.3798 ])
        (expr_list:REG_DEAD (reg/v:DI 675 [ j ])
            (nil))))
(jump_insn 3537 3536 3538 272 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3541)
            (pc))) verify.c:145 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 3541)
;;  succ:       273 [28.0%]  (FALLTHRU)
;;              274 [72.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 273, loop depth 0, count 0, freq 13
;;  prev block 272, next block 274, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       272 [28.0%]  (FALLTHRU)
;; bb 273 artificial_defs: { }
;; bb 273 artificial_uses: { u3550(29){ }u3551(31){ }u3552(64){ }u3553(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 688 746 1874
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	
;; live  kill	
(note 3538 3537 3540 273 [bb 273] NOTE_INSN_BASIC_BLOCK)
(insn 3540 3538 3541 273 (set (mem:DI (plus:DI (reg/v/f:DI 746 [ seen_edge ])
                (reg:DI 688 [ D.3802 ])) [4 *_687+0 S8 A64])
        (reg:DI 1874)) verify.c:146 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1797)
        (nil)))
;;  succ:       274 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 274, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 273, next block 275, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       272 [72.0%] 
;;              273 [100.0%]  (FALLTHRU)
;; bb 274 artificial_defs: { }
;; bb 274 artificial_uses: { u3557(29){ }u3558(31){ }u3559(64){ }u3560(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 674 694
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 688 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 3541 3540 3542 274 167 "" [1 uses])
(note 3542 3541 3543 274 [bb 274] NOTE_INSN_BASIC_BLOCK)
(insn 3543 3542 3544 274 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 674 [ i ])
            (reg:DI 694 [ D.3798 ]))) verify.c:147 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 694 [ D.3798 ])
        (expr_list:REG_DEAD (reg/v:DI 674 [ i ])
            (nil))))
(jump_insn 3544 3543 3548 274 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3548)
            (pc))) verify.c:147 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 3548)
;;  succ:       275 [28.0%] 
;;              276 [72.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 275, loop depth 0, count 0, freq 13
;;  prev block 274, next block 276, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       274 [28.0%] 
;; bb 275 artificial_defs: { }
;; bb 275 artificial_uses: { u3564(29){ }u3565(31){ }u3566(64){ }u3567(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 692 746 1874
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	
;; live  kill	
(code_label 3548 3544 3549 275 168 "" [1 uses])
(note 3549 3548 3551 275 [bb 275] NOTE_INSN_BASIC_BLOCK)
(insn 3551 3549 3552 275 (set (mem:DI (plus:DI (reg/v/f:DI 746 [ seen_edge ])
                (reg:DI 692 [ D.3802 ])) [4 *_689+0 S8 A64])
        (reg:DI 1874)) verify.c:148 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1798)
        (nil)))
;;  succ:       276 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 276, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 275, next block 277, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       275 [100.0%]  (FALLTHRU)
;;              274 [72.0%]  (FALLTHRU)
;;              315 [28.0%]  (FALLTHRU)
;; bb 276 artificial_defs: { }
;; bb 276 artificial_uses: { u3571(29){ }u3572(31){ }u3573(64){ }u3574(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 668 688 692
;; lr  def 	 66 [cc] 1799 1800 1801 1802
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 688 692 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 1799 1800 1801 1802
;; live  kill	
(code_label 3552 3551 3553 276 169 "" [0 uses])
(note 3553 3552 3554 276 [bb 276] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3554 3553 3555 276 (var_location:DI lvldiff (minus:DI (mem:DI (plus:DI (reg/v/f:DI 668 [ level ])
                (reg:DI 688 [ D.3802 ])) [0 *_690+0 S8 A64])
        (mem:DI (plus:DI (reg/v/f:DI 668 [ level ])
                (reg:DI 692 [ D.3802 ])) [0 *_692+0 S8 A64]))) verify.c:150 -1
     (nil))
(insn 3555 3554 3556 276 (set (reg:DI 1800 [ *_690 ])
        (mem:DI (plus:DI (reg/v/f:DI 668 [ level ])
                (reg:DI 688 [ D.3802 ])) [4 *_690+0 S8 A64])) verify.c:152 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 688 [ D.3802 ])
        (nil)))
(insn 3556 3555 3557 276 (set (reg:DI 1801 [ *_692 ])
        (mem:DI (plus:DI (reg/v/f:DI 668 [ level ])
                (reg:DI 692 [ D.3802 ])) [4 *_692+0 S8 A64])) verify.c:152 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 692 [ D.3802 ])
        (nil)))
(insn 3557 3556 3558 276 (set (reg:DI 1799 [ lvldiff ])
        (minus:DI (reg:DI 1800 [ *_690 ])
            (reg:DI 1801 [ *_692 ]))) verify.c:152 264 {subdi3}
     (expr_list:REG_DEAD (reg:DI 1801 [ *_692 ])
        (expr_list:REG_DEAD (reg:DI 1800 [ *_690 ])
            (nil))))
(insn 3558 3557 3559 276 (set (reg:DI 1802 [ D.3810 ])
        (plus:DI (reg:DI 1799 [ lvldiff ])
            (const_int 1 [0x1]))) verify.c:152 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1799 [ lvldiff ])
        (nil)))
(insn 3559 3558 3560 276 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1802 [ D.3810 ])
            (const_int 2 [0x2]))) verify.c:152 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1802 [ D.3810 ])
        (nil)))
(jump_insn 3560 3559 3561 276 (set (pc)
        (if_then_else (gtu (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4024)
            (pc))) verify.c:152 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 4024)
;;  succ:       278 [50.0%] 
;;              277 [50.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 277, loop depth 0, count 0, freq 32
;;  prev block 276, next block 278, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       276 [50.0%]  (FALLTHRU)
;; bb 277 artificial_defs: { }
;; bb 277 artificial_uses: { u3588(29){ }u3589(31){ }u3590(64){ }u3591(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1872
;; lr  def 	 715 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715 716
;; live  kill	
(note 3561 3560 4354 277 [bb 277] NOTE_INSN_BASIC_BLOCK)
(insn 4354 3561 251 277 (set (reg/v:SI 716 [ err ])
        (const_int 0 [0])) verify.c:152 47 {*movsi_aarch64}
     (nil))
(insn 251 4354 4024 277 (set (reg/v:SI 715 [ err ])
        (const_int 0 [0])) verify.c:152 47 {*movsi_aarch64}
     (nil))
;;  succ:       279 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 278, loop depth 0, count 0, freq 32
;;  prev block 277, next block 279, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       276 [50.0%] 
;; bb 278 artificial_defs: { }
;; bb 278 artificial_uses: { u3602(29){ }u3603(31){ }u3604(64){ }u3605(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1873
;; lr  def 	 715 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715 716
;; live  kill	
(code_label 4024 251 4023 278 208 "" [1 uses])
(note 4023 4024 4353 278 [bb 278] NOTE_INSN_BASIC_BLOCK)
(insn 4353 4023 253 278 (set (reg/v:SI 716 [ err ])
        (const_int -14 [0xfffffffffffffff2])) verify.c:153 47 {*movsi_aarch64}
     (nil))
(insn 253 4353 3562 278 (set (reg/v:SI 715 [ err ])
        (const_int -14 [0xfffffffffffffff2])) verify.c:153 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int -14 [0xfffffffffffffff2])
        (nil)))
;;  succ:       279 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 279, loop depth 0, count 0, freq 695, maybe hot
;;  prev block 278, next block 280, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       277 [100.0%]  (FALLTHRU)
;;              266 [50.0%] 
;;              314 [100.0%]  (FALLTHRU)
;;              317 [100.0%]  (FALLTHRU)
;;              278 [100.0%]  (FALLTHRU)
;;              303 [100.0%]  (FALLTHRU)
;;              269
;; bb 279 artificial_defs: { }
;; bb 279 artificial_uses: { u3607(29){ }u3608(31){ }u3609(64){ }u3610(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 708 720
;; lr  def 	 66 [cc] 708
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 708
;; live  kill	
(code_label 3562 253 3563 279 161 "" [2 uses])
(note 3563 3562 3568 279 [bb 279] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3568 3563 3569 279 (var_location:SI terr (reg/v:SI 716 [ err ])) -1
     (nil))
(debug_insn 3569 3568 3570 279 (var_location:DI k (debug_expr:DI D#42)) -1
     (nil))
(debug_insn 3570 3569 3571 279 (var_location:SI nedge_traversed (reg/v:SI 610 [ nedge_traversed ])) -1
     (nil))
(debug_insn 3571 3570 3572 279 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3572 3571 3574 279 (set (reg:DI 708 [ ivtmp.64 ])
        (plus:DI (reg:DI 708 [ ivtmp.64 ])
            (const_int 16 [0x10]))) 95 {*adddi3_aarch64}
     (nil))
(insn 3574 3572 3575 279 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 708 [ ivtmp.64 ])
            (reg:DI 720 [ D.3810 ]))) verify.c:117 391 {*cmpdi}
     (nil))
(jump_insn 3575 3574 3576 279 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3573)
            (pc))) verify.c:117 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 3573)
;;  succ:       266 [91.0%]  (DFS_BACK)
;;              280 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 280, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 279, next block 281, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       279 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 280 artificial_defs: { }
;; bb 280 artificial_uses: { u3618(29){ }u3619(31){ }u3620(64){ }u3621(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 716 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 716
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 716 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(note 3576 3575 3577 280 [bb 280] NOTE_INSN_BASIC_BLOCK)
(insn 3577 3576 3578 280 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 716 [ err ])
            (const_int 0 [0]))) verify.c:157 390 {*cmpsi}
     (expr_list:REG_DEAD (reg/v:SI 716 [ err ])
        (nil)))
(jump_insn 3578 3577 3579 280 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3626)
            (pc))) verify.c:157 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5495 (nil)))
 -> 3626)
;;  succ:       281 [45.0%]  (FALLTHRU)
;;              289 [55.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 281, loop depth 0, count 0, freq 29
;;  prev block 280, next block 282, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       280 [45.0%]  (FALLTHRU)
;; bb 281 artificial_defs: { }
;; bb 281 artificial_uses: { u3624(29){ }u3625(31){ }u3626(64){ }u3627(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1861
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(note 3579 3578 3580 281 [bb 281] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3580 3579 3581 281 (var_location:DI k (const_int 0 [0])) -1
     (nil))
(debug_insn 3581 3580 3582 281 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3582 3581 3583 281 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1861 [ D.3798 ])
            (const_int 0 [0]))) verify.c:160 391 {*cmpdi}
     (nil))
(jump_insn 3583 3582 3916 281 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3626)
            (pc))) verify.c:160 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 3626)
;;  succ:       282 [91.0%]  (FALLTHRU)
;;              289 [9.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 282, loop depth 0, count 0, freq 32
;;  prev block 281, next block 283, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       319 [91.0%] 
;;              281 [91.0%]  (FALLTHRU)
;; bb 282 artificial_defs: { }
;; bb 282 artificial_uses: { u3635(29){ }u3636(31){ }u3637(64){ }u3638(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 436 1869 1870 1871
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 436 1869 1870 1871
;; live  kill	
(code_label 3916 3583 3584 282 192 "" [1 uses])
(note 3584 3916 258 282 [bb 282] NOTE_INSN_BASIC_BLOCK)
(insn 258 3584 4321 282 (set (reg/v:DI 436 [ k ])
        (const_int 0 [0])) verify.c:160 48 {*movdi_aarch64}
     (nil))
(insn 4321 258 4322 282 (set (reg:SI 1869)
        (const_int -15 [0xfffffffffffffff1])) verify.c:163 47 {*movsi_aarch64}
     (nil))
(insn 4322 4321 4328 282 (set (reg:SI 1870)
        (const_int 0 [0])) verify.c:163 47 {*movsi_aarch64}
     (nil))
(insn 4328 4322 3623 282 (set (reg:SI 1871)
        (const_int -16 [0xfffffffffffffff0])) verify.c:166 47 {*movsi_aarch64}
     (nil))
;;  succ:       283 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

;; basic block 283, loop depth 0, count 0, freq 347, maybe hot
;;  prev block 282, next block 285, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       282 [100.0%]  (FALLTHRU)
;;              288 [91.0%]  (DFS_BACK)
;; bb 283 artificial_defs: { }
;; bb 283 artificial_uses: { u3640(29){ }u3641(31){ }u3642(64){ }u3643(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 624 715
;; lr  def 	 66 [cc] 1804 1805
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 66 [cc] 1804 1805
;; live  kill	
(code_label 3623 4328 3586 283 175 "" [1 uses])
(note 3586 3623 3587 283 [bb 283] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3587 3586 3588 283 (var_location:DI k (reg/v:DI 436 [ k ])) -1
     (nil))
(debug_insn 3588 3587 3589 283 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(debug_insn 3589 3588 3590 283 (var_location:SI terr (reg/v:SI 715 [ err ])) verify.c:161 -1
     (nil))
(insn 3590 3589 3591 283 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 715 [ err ])
            (const_int 0 [0]))) verify.c:162 390 {*cmpsi}
     (nil))
(insn 3591 3590 3592 283 (set (reg:CC_DNE 66 cc)
        (compare (and:SI (ne (reg:CC_DEQ 66 cc)
                    (const_int 0 [0]))
                (ne (reg/v:DI 436 [ k ])
                    (reg:DI 624 [ D.3798 ])))
            (const_int 0 [0]))) verify.c:162 4 {ccmp_anddi}
     (nil))
(insn 3592 3591 3594 283 (set:SI (reg:SI 1804)
        (ne:SI (reg:CC_DNE 66 cc)
            (const_int 0 [0]))) verify.c:162 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC_DNE 66 cc)
        (nil)))
(insn 3594 3592 3595 283 (set (reg:SI 1805 [ D.3813 ])
        (zero_extend:SI (subreg:QI (reg:SI 1804) 0))) verify.c:162 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1804)
        (nil)))
(insn 3595 3594 3596 283 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1805 [ D.3813 ])
            (const_int 0 [0]))) verify.c:162 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1805 [ D.3813 ])
        (nil)))
(jump_insn 3596 3595 3597 283 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3616)
            (pc))) verify.c:162 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 3616)
;;  succ:       285 [50.0%]  (FALLTHRU)
;;              288 [50.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

;; basic block 285, loop depth 0, count 0, freq 174, maybe hot
;;  prev block 283, next block 286, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       283 [50.0%]  (FALLTHRU)
;; bb 285 artificial_defs: { }
;; bb 285 artificial_uses: { u3656(29){ }u3657(31){ }u3658(64){ }u3659(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 647
;; lr  def 	 66 [cc] 710
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 66 [cc] 710
;; live  kill	
(note 3597 3596 3599 285 [bb 285] NOTE_INSN_BASIC_BLOCK)
(insn 3599 3597 3600 285 (set (reg:DI 710 [ D.3798 ])
        (mem:DI (plus:DI (mult:DI (reg/v:DI 436 [ k ])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 647 [ bfs_tree ])) [4 MEM[base: bfs_tree_622, index: _1276, step: 8, offset: 0B]+0 S8 A64])) verify.c:163 48 {*movdi_aarch64}
     (nil))
(insn 3600 3599 3601 285 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 710 [ D.3798 ])
            (const_int 0 [0]))) verify.c:163 391 {*cmpdi}
     (nil))
(jump_insn 3601 3600 3602 285 (set (pc)
        (if_then_else (lt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4029)
            (pc))) verify.c:163 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2700 (nil)))
 -> 4029)
;;  succ:       286 [73.0%]  (FALLTHRU)
;;              287 [27.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

;; basic block 286, loop depth 0, count 0, freq 127, maybe hot
;;  prev block 285, next block 287, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       285 [73.0%]  (FALLTHRU)
;; bb 286 artificial_defs: { }
;; bb 286 artificial_uses: { u3665(29){ }u3666(31){ }u3667(64){ }u3668(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 710 746 1869 1870 1871
;; lr  def 	 66 [cc] 715 1806
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 710 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 66 [cc] 715 1806
;; live  kill	
(note 3602 3601 3603 286 [bb 286] NOTE_INSN_BASIC_BLOCK)
(insn 3603 3602 4323 286 (set (reg:DI 1806 [ MEM[base: seen_edge_794, index: _1276, step: 8, offset: 0B] ])
        (mem:DI (plus:DI (mult:DI (reg/v:DI 436 [ k ])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 746 [ seen_edge ])) [4 MEM[base: seen_edge_794, index: _1276, step: 8, offset: 0B]+0 S8 A64])) verify.c:163 48 {*movdi_aarch64}
     (nil))
(insn 4323 3603 4324 286 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1806 [ MEM[base: seen_edge_794, index: _1276, step: 8, offset: 0B] ])
            (const_int 0 [0]))) verify.c:163 391 {*cmpdi}
     (nil))
(insn 4324 4323 3609 286 (set (reg/v:SI 715 [ err ])
        (if_then_else:SI (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (reg:SI 1869)
            (const_int 0 [0]))) verify.c:163 442 {*cmovsi_insn}
     (nil))
(debug_insn 3609 4324 4329 286 (var_location:SI terr (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 4329 3609 4330 286 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 436 [ k ])
            (reg:DI 710 [ D.3798 ]))) verify.c:166 391 {*cmpdi}
     (nil))
(insn 4330 4329 4029 286 (set (reg/v:SI 715 [ err ])
        (if_then_else:SI (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (reg/v:SI 715 [ err ])
            (reg:SI 1871))) verify.c:166 442 {*cmovsi_insn}
     (nil))
;;  succ:       288 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

;; basic block 287, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 286, next block 288, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       285 [27.0%] 
;; bb 287 artificial_defs: { }
;; bb 287 artificial_uses: { u3689(29){ }u3690(31){ }u3691(64){ }u3692(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 715
;; live  kill	
(code_label 4029 4330 4028 287 209 "" [1 uses])
(note 4028 4029 261 287 [bb 287] NOTE_INSN_BASIC_BLOCK)
(insn 261 4028 3615 287 (set (reg/v:SI 715 [ err ])
        (const_int 0 [0])) verify.c:163 47 {*movsi_aarch64}
     (nil))
(debug_insn 3615 261 3616 287 (var_location:SI terr (const_int 0 [0])) -1
     (nil))
;;  succ:       288 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

;; basic block 288, loop depth 0, count 0, freq 347, maybe hot
;;  prev block 287, next block 289, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       283 [50.0%] 
;;              287 [100.0%]  (FALLTHRU)
;;              286 [100.0%]  (FALLTHRU)
;; bb 288 artificial_defs: { }
;; bb 288 artificial_uses: { u3698(29){ }u3699(31){ }u3700(64){ }u3701(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 1861
;; lr  def 	 66 [cc] 436
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  gen 	 66 [cc] 436
;; live  kill	
(code_label 3616 3615 3617 288 172 "" [1 uses])
(note 3617 3616 3618 288 [bb 288] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3618 3617 3619 288 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3619 3618 3621 288 (set (reg/v:DI 436 [ k ])
        (plus:DI (reg/v:DI 436 [ k ])
            (const_int 1 [0x1]))) verify.c:160 95 {*adddi3_aarch64}
     (nil))
(debug_insn 3621 3619 3622 288 (var_location:DI k (reg/v:DI 436 [ k ])) -1
     (nil))
(debug_insn 3622 3621 3624 288 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 3624 3622 3625 288 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 436 [ k ])
            (reg:DI 1861 [ D.3798 ]))) verify.c:160 391 {*cmpdi}
     (nil))
(jump_insn 3625 3624 3626 288 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3623)
            (pc))) verify.c:160 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 3623)
;;  succ:       283 [91.0%]  (DFS_BACK)
;;              289 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 436 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1869 1870 1871 1875 1877 1878

;; basic block 289, loop depth 0, count 0, freq 67, maybe hot
;;  prev block 288, next block 291, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       288 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              280 [55.0%] 
;;              281 [9.0%] 
;; bb 289 artificial_defs: { }
;; bb 289 artificial_uses: { u3709(29){ }u3710(31){ }u3711(64){ }u3712(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 66 [cc]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3626 3625 3627 289 171 ("done") [2 uses])
(note 3627 3626 3628 289 [bb 289] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3628 3627 3629 289 (var_location:SI nedge_traversed (reg/v:SI 610 [ nedge_traversed ])) -1
     (nil))
(debug_insn 3629 3628 3630 289 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(debug_insn 3630 3629 3631 289 (var_location:DI p (reg/v/f:DI 746 [ seen_edge ])) -1
     (nil))
(insn 3631 3630 3632 289 (set (reg:DI 0 x0)
        (reg/v/f:DI 746 [ seen_edge ])) xalloc.c:132 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v/f:DI 746 [ seen_edge ])
        (nil)))
(call_insn 3632 3631 3633 289 (parallel [
            (call (mem:DI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>) [0 __builtin_free S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) xalloc.c:132 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 3633 3632 3634 289 (var_location:DI p (clobber (const_int 0 [0]))) verify.c:174 -1
     (nil))
(insn 3634 3633 3635 289 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 715 [ err ])
            (const_int 0 [0]))) verify.c:175 390 {*cmpsi}
     (nil))
(jump_insn 3635 3634 3820 289 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3667)
            (pc))) verify.c:175 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 3667)
;;  succ:       291 (FALLTHRU)
;;              293 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 291, loop depth 0, count 0, freq 54, maybe hot
;;  prev block 289, next block 292, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       289 (FALLTHRU)
;;              304 [100.0%]  (FALLTHRU)
;; bb 291 artificial_defs: { }
;; bb 291 artificial_uses: { u3721(29){ }u3722(31){ }u3723(64){ }u3724(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715 811 1616
;; lr  def 	 66 [cc] 712 1807 1808 1812 1860
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 712 1807 1808 1812 1860
;; live  kill	
(code_label 3820 3635 3636 291 183 "" [0 uses])
(note 3636 3820 3637 291 [bb 291] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3637 3636 3638 291 (var_location:SI nedge_traversed (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 3638 3637 3639 291 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(debug_insn 3639 3638 3640 291 (var_location:DI p (clobber (const_int 0 [0]))) verify.c:174 -1
     (nil))
(insn 3640 3639 3641 291 (set (reg:DI 712 [ D.3798 ])
        (sign_extend:DI (reg/v:SI 715 [ err ]))) verify.c:175 80 {*extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 715 [ err ])
        (nil)))
(debug_insn 3641 3640 3642 291 (var_location:DI bfs_tree_in (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3642 3641 3643 291 (var_location:DI max_bfsvtx (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3643 3642 3644 291 (var_location:DI root (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3644 3643 3645 291 (var_location:DI IJ_in (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3645 3644 3646 291 (var_location:DI nedge (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3646 3645 3647 291 (var_location:DI lvldiff (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3647 3646 3648 291 (var_location:DI j (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3648 3647 3649 291 (var_location:DI i (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3649 3648 3650 291 (var_location:DI k (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3650 3649 3651 291 (var_location:DI nv (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3651 3650 3652 291 (var_location:DI level (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3652 3651 3653 291 (var_location:DI seen_edge (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3653 3652 3654 291 (var_location:SI nedge_traversed (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3654 3653 3655 291 (var_location:SI err (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(insn 3655 3654 3656 291 (set (reg/f:DI 1860)
        (high:DI (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))) graph500.c:204 48 {*movdi_aarch64}
     (nil))
(insn 3656 3655 3657 291 (set (reg/f:DI 1808)
        (lo_sum:DI (reg/f:DI 1860)
            (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))) graph500.c:204 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)
        (nil)))
(insn 3657 3656 3658 291 (set (reg/f:DI 1807)
        (plus:DI (reg:DI 811 [ D.3805 ])
            (reg/f:DI 1808))) graph500.c:204 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1808)
        (nil)))
(insn 3658 3657 3661 291 (set (mem:DI (reg/f:DI 1807) [4 MEM[symbol: bfs_nedge, index: _1361, offset: 0B]+0 S8 A64])
        (reg:DI 712 [ D.3798 ])) graph500.c:204 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1807)
        (nil)))
(insn 3661 3658 3662 291 (set (reg:SI 1812 [ VERBOSE ])
        (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])) graph500.c:205 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1810)
        (nil)))
(insn 3662 3661 3663 291 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1812 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:205 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1812 [ VERBOSE ])
        (nil)))
(jump_insn 3663 3662 4259 291 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3696)
            (pc))) graph500.c:205 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 3696)
;;  succ:       295 [100.0%] 
;;              292 (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878

;; basic block 292, loop depth 0, count 0, freq 0
;;  prev block 291, next block 293, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       291 (FALLTHRU,LOOP_EXIT)
;; bb 292 artificial_defs: { }
;; bb 292 artificial_uses: { u-1(29){ }u-1(31){ }u-1(64){ }u-1(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853
;; live  gen 	 1856
;; live  kill	
(note 4259 3663 4203 292 [bb 292] NOTE_INSN_BASIC_BLOCK)
(insn 4203 4259 3667 292 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) -1
     (nil))
;;  succ:       296 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856

;; basic block 293, loop depth 0, count 0, freq 84, maybe hot
;;  prev block 292, next block 295, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       289 [100.0%] 
;;              318 [100.0%]  (FALLTHRU)
;; bb 293 artificial_defs: { }
;; bb 293 artificial_uses: { u3736(29){ }u3737(31){ }u3738(64){ }u3739(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 811 1616
;; lr  def 	 66 [cc] 1813 1814 1816 1819 1860
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 1813 1814 1816 1819 1860
;; live  kill	
(code_label 3667 4203 3668 293 176 "" [1 uses])
(note 3668 3667 3671 293 [bb 293] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3671 3668 3672 293 (var_location:DI p (clobber (const_int 0 [0]))) verify.c:174 -1
     (nil))
(debug_insn 3672 3671 3673 293 (var_location:DI bfs_tree_in (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3673 3672 3674 293 (var_location:DI max_bfsvtx (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3674 3673 3675 293 (var_location:DI root (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3675 3674 3676 293 (var_location:DI IJ_in (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3676 3675 3677 293 (var_location:DI nedge (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3677 3676 3678 293 (var_location:DI lvldiff (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3678 3677 3679 293 (var_location:DI j (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3679 3678 3680 293 (var_location:DI i (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3680 3679 3681 293 (var_location:DI k (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3681 3680 3682 293 (var_location:DI nv (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3682 3681 3683 293 (var_location:DI level (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3683 3682 3684 293 (var_location:DI seen_edge (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3684 3683 3685 293 (var_location:SI nedge_traversed (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3685 3684 3686 293 (var_location:SI err (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(insn 3686 3685 3687 293 (set (reg/f:DI 1860)
        (high:DI (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))) graph500.c:204 48 {*movdi_aarch64}
     (nil))
(insn 3687 3686 3688 293 (set (reg/f:DI 1814)
        (lo_sum:DI (reg/f:DI 1860)
            (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))) graph500.c:204 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)
        (nil)))
(insn 3688 3687 3689 293 (set (reg/f:DI 1813)
        (plus:DI (reg:DI 811 [ D.3805 ])
            (reg/f:DI 1814))) graph500.c:204 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1814)
        (nil)))
(insn 3689 3688 3690 293 (set (reg:DI 1816 [ nedge_traversed ])
        (sign_extend:DI (reg/v:SI 610 [ nedge_traversed ]))) graph500.c:204 80 {*extendsidi2_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 610 [ nedge_traversed ])
        (nil)))
(insn 3690 3689 3693 293 (set (mem:DI (reg/f:DI 1813) [4 MEM[symbol: bfs_nedge, index: _1361, offset: 0B]+0 S8 A64])
        (reg:DI 1816 [ nedge_traversed ])) graph500.c:204 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1816 [ nedge_traversed ])
        (expr_list:REG_DEAD (reg/f:DI 1813)
            (nil))))
(insn 3693 3690 3694 293 (set (reg:SI 1819 [ VERBOSE ])
        (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])) graph500.c:205 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1817)
        (nil)))
(insn 3694 3693 3695 293 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1819 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:205 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1819 [ VERBOSE ])
        (nil)))
(jump_insn 3695 3694 3696 293 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3739)
            (pc))) graph500.c:205 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 3739)
;;  succ:       295 (FALLTHRU)
;;              297 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878

;; basic block 295, loop depth 0, count 0, freq 100, maybe hot
;;  prev block 293, next block 296, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       293 (FALLTHRU)
;;              320 [99.8%] 
;;              291 [100.0%] 
;; bb 295 artificial_defs: { }
;; bb 295 artificial_uses: { u3750(29){ }u3751(31){ }u3752(64){ }u3753(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1860
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 712 1820 1821 1822 1824 1825 1826 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 712 1820 1821 1822 1824 1825 1826 1856
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3696 3695 3697 295 177 "" [2 uses])
(note 3697 3696 3698 295 [bb 295] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3698 3697 3699 295 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:205 -1
     (nil))
(debug_insn 3699 3698 3700 295 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)) graph500.c:205 -1
     (nil))
(insn 3700 3699 3701 295 (set (reg/f:DI 1821)
        (high:DI (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 3701 3700 3702 295 (set (reg/f:DI 1820)
        (lo_sum:DI (reg/f:DI 1821)
            (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1821)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)
            (nil))))
(insn 3702 3701 3703 295 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:205 48 {*movdi_aarch64}
     (nil))
(insn 3703 3702 3704 295 (set (reg/f:DI 1822)
        (lo_sum:DI (reg/f:DI 1856)
            (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:205 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)
        (nil)))
(insn 3704 3703 3705 295 (set (reg/f:DI 1824 [ stderr ])
        (mem/f/c:DI (reg/f:DI 1822) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1822)
        (nil)))
(insn 3705 3704 3706 295 (set (reg:DI 2 x2)
        (reg/f:DI 1820)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1820)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC55") [flags 0x82]  <var_decl 0x7f3c5d8816c0 *.LC55>)
            (nil))))
(insn 3706 3705 3707 295 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 3707 3706 3708 295 (set (reg:DI 0 x0)
        (reg/f:DI 1824 [ stderr ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1824 [ stderr ])
        (nil)))
(call_insn 3708 3707 3710 295 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 2 x2)
        (expr_list:REG_DEAD (reg:SI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(insn 3710 3708 3711 295 (set (reg/f:DI 1826)
        (lo_sum:DI (reg/f:DI 1860)
            (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))) 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1860)
        (expr_list:REG_EQUAL (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)
            (nil))))
(insn 3711 3710 3712 295 (set (reg/f:DI 1825)
        (plus:DI (reg:DI 811 [ D.3805 ])
            (reg/f:DI 1826))) 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1826)
        (expr_list:REG_DEAD (reg:DI 811 [ D.3805 ])
            (nil))))
(insn 3712 3711 3713 295 (set (reg:DI 712 [ D.3798 ])
        (mem:DI (reg/f:DI 1825) [4 MEM[symbol: bfs_nedge, index: _1361, offset: 0B]+0 S8 A64])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1825)
        (nil)))
(insn 3713 3712 3714 295 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 712 [ D.3798 ])
            (const_int 0 [0]))) graph500.c:206 391 {*cmpdi}
     (nil))
(jump_insn 3714 3713 3715 295 (set (pc)
        (if_then_else (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3739)
            (pc))) graph500.c:206 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 3739)
;;  succ:       296 (FALLTHRU,LOOP_EXIT)
;;              297 [100.0%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 1616 1710 1853 1854 1856 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 712 752 777 1616 1710 1853 1854 1856 1859 1875 1877 1878

;; basic block 296, loop depth 0, count 0, freq 0
;;  prev block 295, next block 297, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       295 (FALLTHRU,LOOP_EXIT)
;;              292 [100.0%]  (FALLTHRU)
;;              321 [100.0%]  (FALLTHRU)
;; bb 296 artificial_defs: { }
;; bb 296 artificial_uses: { u3769(29){ }u3770(31){ }u3771(64){ }u3772(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 1828 1831 1832 1833 1834
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 1828 1831 1832 1833 1834
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3715 3714 3716 296 178 "" [0 uses])
(note 3716 3715 3717 296 [bb 296] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3717 3716 3718 296 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:207 -1
     (nil))
(debug_insn 3718 3717 3720 296 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>)) graph500.c:207 -1
     (nil))
(insn 3720 3718 3722 296 (set (reg/f:DI 1828)
        (lo_sum:DI (reg/f:DI 1853)
            (symbol_ref:DI ("*.LANCHOR0") [flags 0x182]))) graph500.c:207 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1853)
        (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
            (nil))))
(insn 3722 3720 3723 296 (set (reg/f:DI 1831)
        (plus:DI (reg/f:DI 1828)
            (const_int 112 [0x70]))) graph500.c:207 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1828)
        (expr_list:REG_EQUAL (const:DI (plus:DI (symbol_ref:DI ("*.LANCHOR0") [flags 0x182])
                    (const_int 112 [0x70])))
            (nil))))
(insn 3723 3722 3724 296 (set (reg:DI 1832 [ m ])
        (sign_extend:DI (reg/v:SI 752 [ m ]))) graph500.c:207 80 {*extendsidi2_aarch64}
     (nil))
(insn 3724 3723 3725 296 (set (reg/f:DI 1834)
        (high:DI (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (nil))
(insn 3725 3724 3728 296 (set (reg/f:DI 1833)
        (lo_sum:DI (reg/f:DI 1834)
            (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 1834)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>)
            (nil))))
(insn 3728 3725 3729 296 (set (reg:DI 5 x5)
        (reg:DI 712 [ D.3798 ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 712 [ D.3798 ])
        (nil)))
(insn 3729 3728 3730 296 (set (reg:DI 4 x4)
        (mem:DI (plus:DI (mult:DI (reg:DI 1832 [ m ])
                    (const_int 8 [0x8]))
                (reg/f:DI 1831)) [4 bfs_root S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1832 [ m ])
        (expr_list:REG_DEAD (reg/f:DI 1831)
            (nil))))
(insn 3730 3729 3731 296 (set (reg:SI 3 x3)
        (reg/v:SI 752 [ m ])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 752 [ m ])
        (nil)))
(insn 3731 3730 3732 296 (set (reg:DI 2 x2)
        (reg/f:DI 1833)) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1833)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC65") [flags 0x82]  <var_decl 0x7f3c5d881c60 *.LC65>)
            (nil))))
(insn 3732 3731 3733 296 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 3733 3732 3734 296 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 1856)
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1856)
        (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
            (nil))))
(call_insn 3734 3733 3735 296 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:DI 5 x5)
        (expr_list:REG_DEAD (reg:DI 4 x4)
            (expr_list:REG_DEAD (reg:SI 3 x3)
                (expr_list:REG_DEAD (reg:DI 2 x2)
                    (expr_list:REG_DEAD (reg:SI 1 x1)
                        (expr_list:REG_UNUSED (reg:SI 0 x0)
                            (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
                                (nil))))))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (expr_list:SI (use (reg:SI 3 x3))
                            (expr_list:DI (use (reg:DI 4 x4))
                                (expr_list:DI (use (reg:DI 5 x5))
                                    (nil))))))))))
(debug_insn 3735 3734 3736 296 (var_location:DI __stream (clobber (const_int 0 [0]))) graph500.c:207 -1
     (nil))
(debug_insn 3736 3735 3737 296 (var_location:DI __fmt (clobber (const_int 0 [0]))) graph500.c:207 -1
     (nil))
(call_insn 3737 3736 3739 296 (parallel [
            (call (mem:DI (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>) [0 __builtin_abort S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:209 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
;;  succ:      
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]

;; basic block 297, loop depth 0, count 0, freq 184, maybe hot
;;  prev block 296, next block 298, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       295 [100.0%] 
;;              293 [100.0%] 
;; bb 297 artificial_defs: { }
;; bb 297 artificial_uses: { u3792(29){ }u3793(31){ }u3794(64){ }u3795(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1854
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 732 777 1837 1839
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 66 [cc] 732 777 1837 1839
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3739 3737 3740 297 179 "" [2 uses])
(note 3740 3739 3741 297 [bb 297] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3741 3740 3742 297 (var_location:DI p (reg/v/f:DI 647 [ bfs_tree ])) -1
     (nil))
(insn 3742 3741 3743 297 (set (reg:DI 0 x0)
        (reg/v/f:DI 647 [ bfs_tree ])) xalloc.c:132 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v/f:DI 647 [ bfs_tree ])
        (nil)))
(call_insn 3743 3742 3744 297 (parallel [
            (call (mem:DI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>) [0 __builtin_free S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) xalloc.c:132 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 3744 3743 3745 297 (var_location:DI p (clobber (const_int 0 [0]))) graph500.c:212 -1
     (nil))
(insn 3745 3744 3747 297 (set (reg:SI 732 [ D.3797 ])
        (plus:SI (subreg:SI (reg:DI 777 [ ivtmp.94 ]) 0)
            (const_int 1 [0x1]))) 94 {*addsi3_aarch64}
     (nil))
(debug_insn 3747 3745 3748 297 (var_location:SI m (reg:SI 732 [ D.3797 ])) -1
     (nil))
(insn 3748 3747 3751 297 (set (reg:DI 777 [ ivtmp.94 ])
        (plus:DI (reg:DI 777 [ ivtmp.94 ])
            (const_int 1 [0x1]))) 95 {*adddi3_aarch64}
     (nil))
(insn 3751 3748 3752 297 (set (reg/f:DI 1837)
        (lo_sum:DI (reg/f:DI 1854)
            (symbol_ref:DI ("*.LANCHOR1") [flags 0x182]))) graph500.c:187 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("*.LANCHOR1") [flags 0x182])
        (nil)))
(insn 3752 3751 3753 297 (set (reg:SI 1839 [ NBFS ])
        (mem/c:SI (plus:DI (reg/f:DI 1837)
                (const_int 48 [0x30])) [3 NBFS+0 S4 A32])) graph500.c:187 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1837)
        (nil)))
(insn 3753 3752 3754 297 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1839 [ NBFS ])
            (reg:SI 732 [ D.3797 ]))) graph500.c:187 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1839 [ NBFS ])
        (expr_list:REG_DEAD (reg:SI 732 [ D.3797 ])
            (nil))))
(jump_insn 3754 3753 3766 297 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 4332)
            (pc))) graph500.c:187 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9775 (nil)))
 -> 4332)
;;  succ:       205 [97.8%]  (DFS_BACK)
;;              198 [2.2%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 777 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 298, loop depth 0, count 0, freq 21
;;  prev block 297, next block 299, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       86 [50.0%] 
;;              87
;;              84 [30.2%] 
;; bb 298 artificial_defs: { }
;; bb 298 artificial_uses: { u3813(29){ }u3814(31){ }u3815(64){ }u3816(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1710 1853 1854
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 416
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 1853 1854
;; live  gen 	 416
;; live  kill	
(code_label 3766 3754 3767 298 62 "" [3 uses])
(note 3767 3766 3768 298 [bb 298] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3768 3767 194 298 (var_location:DI seed (const_int -1 [0xffffffffffffffff])) -1
     (nil))
(insn 194 3768 4004 298 (set (reg/v:DI 416 [ seed ])
        (const_int 3737844653 [0xdecafbad])) prng.c:36 48 {*movdi_aarch64}
     (nil))
;;  succ:       88 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1710 1853 1854
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 243 416 1853 1854

;; basic block 299, loop depth 0, count 0, freq 225, maybe hot
;;  prev block 298, next block 300, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       245 [2.4%]  (LOOP_EXIT)
;; bb 299 artificial_defs: { }
;; bb 299 artificial_uses: { u3817(29){ }u3818(31){ }u3819(64){ }u3820(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 715
;; live  kill	
(code_label 4004 194 4003 299 202 "" [1 uses])
(note 4003 4004 268 299 [bb 299] NOTE_INSN_BASIC_BLOCK)
(insn 268 4003 4008 299 (set (reg/v:SI 715 [ err ])
        (const_int -2 [0xfffffffffffffffe])) verify.c:44 47 {*movsi_aarch64}
     (nil))
;;  succ:       262 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 300, loop depth 0, count 0, freq 152, maybe hot
;;  prev block 299, next block 301, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       247 [31.5%] 
;; bb 300 artificial_defs: { }
;; bb 300 artificial_uses: { u3821(29){ }u3822(31){ }u3823(64){ }u3824(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 715
;; live  kill	
(code_label 4008 268 4007 300 203 "" [1 uses])
(note 4007 4008 269 300 [bb 300] NOTE_INSN_BASIC_BLOCK)
(insn 269 4007 3779 300 (set (reg/v:SI 715 [ err ])
        (const_int -1 [0xffffffffffffffff])) verify.c:46 47 {*movsi_aarch64}
     (nil))
(debug_insn 3779 269 3782 300 (var_location:SI terr (const_int -1 [0xffffffffffffffff])) -1
     (nil))
;;  succ:       262 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 672 715 745 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 301, loop depth 0, count 0, freq 174, maybe hot
;;  prev block 300, next block 302, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       267 [50.0%] 
;; bb 301 artificial_defs: { }
;; bb 301 artificial_uses: { u3826(29){ }u3827(31){ }u3828(64){ }u3829(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 674 675
;; lr  def 	 66 [cc] 715 1842 1843 1867
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 715 1842 1843 1867
;; live  kill	
(code_label 3782 3779 3783 301 162 "" [1 uses])
(note 3783 3782 3785 301 [bb 301] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3785 3783 3786 301 (var_location:SI terr (const_int -10 [0xfffffffffffffff6])) -1
     (nil))
(insn 3786 3785 3787 301 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 623 [ D.3798 ])
            (reg/v:DI 675 [ j ]))) verify.c:125 391 {*cmpdi}
     (expr_list:REG_DEAD (reg/v:DI 675 [ j ])
        (nil)))
(insn 3787 3786 3788 301 (set (reg:CC_DGE 66 cc)
        (compare (and:SI (ne (reg:CC_DLT 66 cc)
                    (const_int 0 [0]))
                (ge (reg:DI 623 [ D.3798 ])
                    (reg/v:DI 674 [ i ])))
            (const_int 0 [0]))) verify.c:125 4 {ccmp_anddi}
     (expr_list:REG_DEAD (reg/v:DI 674 [ i ])
        (nil)))
(insn 3788 3787 3790 301 (set:SI (reg:SI 1842)
        (ne:SI (reg:CC_DGE 66 cc)
            (const_int 0 [0]))) verify.c:125 428 {aarch64_cstoresi}
     (expr_list:REG_DEAD (reg:CC_DGE 66 cc)
        (nil)))
(insn 3790 3788 4325 301 (set (reg:SI 1843 [ D.3813 ])
        (zero_extend:SI (subreg:QI (reg:SI 1842) 0))) verify.c:125 88 {*zero_extendqisi2_aarch64}
     (expr_list:REG_DEAD (reg:SI 1842)
        (nil)))
(insn 4325 3790 4326 301 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1843 [ D.3813 ])
            (const_int 0 [0]))) verify.c:124 390 {*cmpsi}
     (nil))
(insn 4326 4325 4327 301 (set (reg:SI 1867)
        (eq:SI (reg:CC 66 cc)
            (const_int 0 [0]))) verify.c:124 428 {aarch64_cstoresi}
     (nil))
(insn 4327 4326 4020 301 (set (reg/v:SI 715 [ err ])
        (plus:SI (reg:SI 1867)
            (const_int -11 [0xfffffffffffffff5]))) verify.c:124 94 {*addsi3_aarch64}
     (nil))
;;  succ:       314 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 302, loop depth 0, count 0, freq 34
;;  prev block 301, next block 303, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       271 [27.0%] 
;; bb 302 artificial_defs: { }
;; bb 302 artificial_uses: { u3844(29){ }u3845(31){ }u3846(64){ }u3847(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715
;; live  kill	
(code_label 4020 4327 4019 302 207 "" [1 uses])
(note 4019 4020 270 302 [bb 302] NOTE_INSN_BASIC_BLOCK)
(insn 270 4019 3796 302 (set (reg/v:SI 715 [ err ])
        (const_int -12 [0xfffffffffffffff4])) verify.c:131 47 {*movsi_aarch64}
     (nil))
;;  succ:       303 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 303, loop depth 0, count 0, freq 87, maybe hot
;;  prev block 302, next block 304, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       316 [100.0%] 
;;              302 [100.0%]  (FALLTHRU)
;; bb 303 artificial_defs: { }
;; bb 303 artificial_uses: { u3852(29){ }u3853(31){ }u3854(64){ }u3855(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 716
;; live  kill	
(code_label 3796 270 3797 303 165 "" [1 uses])
(note 3797 3796 3798 303 [bb 303] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3798 3797 3800 303 (var_location:SI terr (reg/v:SI 715 [ err ])) -1
     (nil))
(debug_insn 3800 3798 254 303 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 254 3800 3868 303 (set (reg/v:SI 716 [ err ])
        (reg/v:SI 715 [ err ])) verify.c:153 47 {*movsi_aarch64}
     (nil))
;;  succ:       279 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 304, loop depth 0, count 0, freq 69, maybe hot
;;  prev block 303, next block 305, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       312 [53.3%] 
;; bb 304 artificial_defs: { }
;; bb 304 artificial_uses: { u3859(29){ }u3860(31){ }u3861(64){ }u3862(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(code_label 3868 254 3803 304 188 "" [1 uses])
(note 3803 3868 3804 304 [bb 304] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3804 3803 3805 304 (var_location:DI level (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3805 3804 3806 304 (var_location:DI nv (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3806 3805 3807 304 (var_location:DI bfs_tree (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3807 3806 3808 304 (var_location:DI root (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3808 3807 3809 304 (var_location:DI lastlvl (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3809 3808 3810 304 (var_location:DI nhop (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3810 3809 3811 304 (var_location:DI parent (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3811 3810 3812 304 (var_location:DI k (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3812 3811 3814 304 (var_location:SI err (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3814 3812 3815 304 (var_location:SI nedge_traversed (const_int 0 [0])) -1
     (nil))
(debug_insn 3815 3814 3816 304 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(debug_insn 3816 3815 3817 304 (var_location:DI p (reg/v/f:DI 746 [ seen_edge ])) -1
     (nil))
(insn 3817 3816 3818 304 (set (reg:DI 0 x0)
        (reg/v/f:DI 746 [ seen_edge ])) xalloc.c:132 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v/f:DI 746 [ seen_edge ])
        (nil)))
(call_insn 3818 3817 3819 304 (parallel [
            (call (mem:DI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>) [0 __builtin_free S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) xalloc.c:132 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 3819 3818 3985 304 (var_location:DI p (clobber (const_int 0 [0]))) verify.c:174 -1
     (nil))
;;  succ:       291 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 715 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 305, loop depth 0, count 0, freq 135, maybe hot
;;  prev block 304, next block 306, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       124 [39.0%] 
;; bb 305 artificial_defs: { }
;; bb 305 artificial_uses: { u3868(29){ }u3869(31){ }u3870(64){ }u3871(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1897 1898
;; lr  def 	 828 829
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 828 829
;; live  kill	
(code_label 3985 3819 3984 305 197 "" [1 uses])
(note 3984 3985 4389 305 [bb 305] NOTE_INSN_BASIC_BLOCK)
(insn 4389 3984 4390 305 (set (reg:DI 829 [ D.3798 ])
        (const_int 1 [0x1])) generator/graph_generator.c:58 48 {*movdi_aarch64}
     (nil))
(insn 4390 4389 3989 305 (set (reg:DI 828 [ D.3798 ])
        (const_int 0 [0])) generator/graph_generator.c:58 48 {*movdi_aarch64}
     (nil))
;;  succ:       307 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 306, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 305, next block 307, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       126 [67.0%] 
;; bb 306 artificial_defs: { }
;; bb 306 artificial_uses: { u3872(29){ }u3873(31){ }u3874(64){ }u3875(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1897 1900
;; lr  def 	 828 829
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 828 829
;; live  kill	
(code_label 3989 4390 3988 306 198 "" [1 uses])
(note 3988 3989 4395 306 [bb 306] NOTE_INSN_BASIC_BLOCK)
(insn 4395 3988 4396 306 (set (reg:DI 829 [ D.3798 ])
        (const_int 1 [0x1])) generator/graph_generator.c:63 48 {*movdi_aarch64}
     (nil))
(insn 4396 4395 3823 306 (set (reg:DI 828 [ D.3798 ])
        (const_int 1 [0x1])) generator/graph_generator.c:63 48 {*movdi_aarch64}
     (nil))
;;  succ:       307 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 307, loop depth 0, count 0, freq 205, maybe hot
;;  prev block 306, next block 308, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       306 [100.0%]  (FALLTHRU)
;;              127 [100.0%]  (FALLTHRU)
;;              305 [100.0%]  (FALLTHRU)
;; bb 307 artificial_defs: { }
;; bb 307 artificial_uses: { u3877(29){ }u3878(31){ }u3879(64){ }u3880(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 443 747
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 3823 4396 3824 307 85 "" [0 uses])
(note 3824 3823 3825 307 [bb 307] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3825 3824 3826 307 (var_location:DI st (clobber (const_int 0 [0]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 3826 3825 3827 307 (var_location:SI val (clobber (const_int 0 [0]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 3827 3826 3828 307 (var_location:SI square (clobber (const_int 0 [0]))) generator/graph_generator.c:137 -1
     (nil))
(debug_insn 3828 3827 3829 307 (var_location:SI src_offset (clobber (const_int 0 [0]))) generator/graph_generator.c:138 -1
     (nil))
(debug_insn 3829 3828 3830 307 (var_location:SI tgt_offset (clobber (const_int 0 [0]))) generator/graph_generator.c:139 -1
     (nil))
(insn 3830 3829 3831 307 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 443 [ base_tgt ])
            (reg/v:DI 747 [ base_src ]))) generator/graph_generator.c:140 391 {*cmpdi}
     (nil))
(jump_insn 3831 3830 3832 307 (set (pc)
        (if_then_else (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3841)
            (pc))) generator/graph_generator.c:140 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 2374 (nil)))
 -> 3841)
;;  succ:       308 [76.3%]  (FALLTHRU,LOOP_EXIT)
;;              309 [23.7%] 
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 308, loop depth 0, count 0, freq 156, maybe hot
;;  prev block 307, next block 309, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       307 [76.3%]  (FALLTHRU,LOOP_EXIT)
;; bb 308 artificial_defs: { }
;; bb 308 artificial_uses: { u3884(29){ }u3885(31){ }u3886(64){ }u3887(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 695 714 750 751 826
;; live  gen 	
;; live  kill	
(note 3832 3831 3833 308 [bb 308] NOTE_INSN_BASIC_BLOCK)
(insn 3833 3832 3834 308 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -8 [0xfffffffffffffff8])) [4 new_state.z5+0 S8 A64])
        (reg:DI 751 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 751 [ D.3802 ])
        (nil)))
(insn 3834 3833 3835 308 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 new_state.z4+0 S8 A64])
        (reg:DI 714 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 714 [ D.3802 ])
        (nil)))
(insn 3835 3834 3836 308 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -24 [0xffffffffffffffe8])) [4 new_state.z3+0 S8 A64])
        (reg:DI 826 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 826 [ D.3802 ])
        (nil)))
(insn 3836 3835 3837 308 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -32 [0xffffffffffffffe0])) [4 new_state.z2+0 S8 A64])
        (reg:DI 695 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 695 [ D.3802 ])
        (nil)))
(insn 3837 3836 3841 308 (set (mem/c:DI (plus:DI (reg/f:DI 64 sfp)
                (const_int -40 [0xffffffffffffffd8])) [4 new_state.z1+0 S8 A64])
        (reg:DI 750 [ D.3802 ])) 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 750 [ D.3802 ])
        (nil)))
;;  succ:       130 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

;; basic block 309, loop depth 0, count 0, freq 49, maybe hot
;;  prev block 308, next block 310, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       307 [23.7%] 
;; bb 309 artificial_defs: { }
;; bb 309 artificial_uses: { u3898(29){ }u3899(31){ }u3900(64){ }u3901(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 828
;; lr  def 	 442 830 831
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 828 829 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 442 830 831
;; live  kill	
(code_label 3841 3837 3842 309 184 "" [1 uses])
(note 3842 3841 3843 309 [bb 309] NOTE_INSN_BASIC_BLOCK)
(insn 3843 3842 3844 309 (set (reg:DI 830 [ D.3798 ])
        (ashiftrt:DI (reg/v:DI 442 [ nverts ])
            (const_int 1 [0x1]))) 639 {*aarch64_ashr_sisd_or_int_di3}
     (expr_list:REG_DEAD (reg/v:DI 442 [ nverts ])
        (nil)))
(insn 3844 3843 281 309 (set (reg:DI 831 [ D.3798 ])
        (mult:DI (reg:DI 828 [ D.3798 ])
            (reg:DI 830 [ D.3798 ]))) 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 828 [ D.3798 ])
        (nil)))
(insn 281 3844 3847 309 (set (reg/v:DI 442 [ nverts ])
        (reg:DI 830 [ D.3798 ])) generator/graph_generator.c:140 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 830 [ D.3798 ])
        (nil)))
;;  succ:       322 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 310, loop depth 0, count 0, freq 137, maybe hot
;;  prev block 309, next block 312, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       212 [71.0%] 
;; bb 310 artificial_defs: { }
;; bb 310 artificial_uses: { u3906(29){ }u3907(31){ }u3908(64){ }u3909(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 618 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(code_label 3847 281 3848 310 130 "" [1 uses])
(note 3848 3847 3850 310 [bb 310] NOTE_INSN_BASIC_BLOCK)
(insn 3850 3848 3851 310 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 618 [ err ])
            (const_int 0 [0]))) graph500.c:198 390 {*cmpsi}
     (expr_list:REG_DEAD (reg/v:SI 618 [ err ])
        (nil)))
(jump_insn 3851 3850 3857 310 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3849)
            (pc))) graph500.c:198 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 3849)
;;  succ:       214 [0.0%]  (LOOP_EXIT)
;;              218 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 312, loop depth 0, count 0, freq 135, maybe hot
;;  prev block 310, next block 313, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       262 [2.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 312 artificial_defs: { }
;; bb 312 artificial_uses: { u3912(29){ }u3913(31){ }u3914(64){ }u3915(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc]
;; live  kill	
(note 3857 3851 3858 312 [bb 312] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3858 3857 3859 312 (var_location:DI level (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3859 3858 3860 312 (var_location:DI nv (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3860 3859 3861 312 (var_location:DI bfs_tree (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3861 3860 3862 312 (var_location:DI root (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3862 3861 3863 312 (var_location:DI lastlvl (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3863 3862 3864 312 (var_location:DI nhop (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3864 3863 3865 312 (var_location:DI parent (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3865 3864 3866 312 (var_location:DI k (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3866 3865 3867 312 (var_location:SI err (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(debug_insn 3867 3866 3869 312 (var_location:SI err (clobber (const_int 0 [0]))) verify.c:104 -1
     (nil))
(insn 3869 3867 3870 312 (set (reg:CC 66 cc)
        (compare:CC (reg/v:SI 715 [ err ])
            (const_int 0 [0]))) verify.c:106 390 {*cmpsi}
     (nil))
(jump_insn 3870 3869 4014 312 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3868)
            (pc))) verify.c:106 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 5334 (nil)))
 -> 3868)
;;  succ:       304 [53.3%] 
;;              264 [46.7%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 623 624 625 626 647 668 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 313, loop depth 0, count 0, freq 87, maybe hot
;;  prev block 312, next block 314, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       268 [50.0%] 
;; bb 313 artificial_defs: { }
;; bb 313 artificial_uses: { u3918(29){ }u3919(31){ }u3920(64){ }u3921(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715
;; live  kill	
(code_label 4014 3870 4013 313 205 "" [1 uses])
(note 4013 4014 280 313 [bb 313] NOTE_INSN_BASIC_BLOCK)
(insn 280 4013 3875 313 (set (reg/v:SI 715 [ err ])
        (const_int -11 [0xfffffffffffffff5])) verify.c:125 47 {*movsi_aarch64}
     (nil))
;;  succ:       314 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 314, loop depth 0, count 0, freq 261, maybe hot
;;  prev block 313, next block 315, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       313 [100.0%]  (FALLTHRU)
;;              301 [100.0%]  (FALLTHRU)
;; bb 314 artificial_defs: { }
;; bb 314 artificial_uses: { u3926(29){ }u3927(31){ }u3928(64){ }u3929(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 715
;; lr  def 	 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 716
;; live  kill	
(code_label 3875 280 3876 314 163 "" [0 uses])
(note 3876 3875 3877 314 [bb 314] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3877 3876 255 314 (var_location:SI err (reg/v:SI 715 [ err ])) -1
     (nil))
(insn 255 3877 3881 314 (set (reg/v:SI 716 [ err ])
        (reg/v:SI 715 [ err ])) verify.c:153 47 {*movsi_aarch64}
     (nil))
;;  succ:       279 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 315, loop depth 0, count 0, freq 93, maybe hot
;;  prev block 314, next block 316, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       271 [73.0%]  (FALLTHRU)
;; bb 315 artificial_defs: { }
;; bb 315 artificial_uses: { u3932(29){ }u3933(31){ }u3934(64){ }u3935(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 674 675
;; lr  def 	 66 [cc] 610
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 610
;; live  kill	
(note 3881 255 3883 315 [bb 315] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3883 3881 3884 315 (var_location:SI terr (const_int 0 [0])) -1
     (nil))
(debug_insn 3884 3883 3885 315 (var_location:SI err (const_int 0 [0])) -1
     (nil))
(insn 3885 3884 3886 315 (set (reg/v:SI 610 [ nedge_traversed ])
        (plus:SI (reg/v:SI 610 [ nedge_traversed ])
            (const_int 1 [0x1]))) verify.c:142 94 {*addsi3_aarch64}
     (nil))
(debug_insn 3886 3885 3888 315 (var_location:SI nedge_traversed (reg/v:SI 610 [ nedge_traversed ])) verify.c:142 -1
     (nil))
(insn 3888 3886 3889 315 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 674 [ i ])
            (reg/v:DI 675 [ j ]))) verify.c:144 391 {*cmpdi}
     (nil))
(jump_insn 3889 3888 3894 315 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3887)
            (pc))) verify.c:144 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 3887)
;;  succ:       272 [72.0%] 
;;              276 [28.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 674 675 688 690 692 694 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 316, loop depth 0, count 0, freq 47, maybe hot
;;  prev block 315, next block 317, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       270 [27.0%] 
;; bb 316 artificial_defs: { }
;; bb 316 artificial_uses: { u3941(29){ }u3942(31){ }u3943(64){ }u3944(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 675
;; lr  def 	 66 [cc] 715 1844
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 675 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 66 [cc] 715 1844
;; live  kill	
(code_label 3894 3889 3895 316 164 "" [1 uses])
(note 3895 3894 3896 316 [bb 316] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3896 3895 3897 316 (var_location:SI terr (const_int 0 [0])) -1
     (nil))
(insn 3897 3896 271 316 (set (reg:DI 1844 [ *_1073 ])
        (mem:DI (plus:DI (mult:DI (reg/v:DI 675 [ j ])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 647 [ bfs_tree ])) [4 *_1073+0 S8 A64])) verify.c:132 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v:DI 675 [ j ])
        (nil)))
(insn 271 3897 3898 316 (set (reg/v:SI 715 [ err ])
        (const_int -13 [0xfffffffffffffff3])) verify.c:132 47 {*movsi_aarch64}
     (nil))
(insn 3898 271 3899 316 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1844 [ *_1073 ])
            (const_int 0 [0]))) verify.c:132 391 {*cmpdi}
     (expr_list:REG_DEAD (reg:DI 1844 [ *_1073 ])
        (nil)))
(jump_insn 3899 3898 3902 316 (set (pc)
        (if_then_else (ge (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3796)
            (pc))) verify.c:132 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 3796)
;;  succ:       303 [100.0%] 
;;              317 (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 317, loop depth 0, count 0, freq 0
;;  prev block 316, next block 318, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       316 (FALLTHRU)
;; bb 317 artificial_defs: { }
;; bb 317 artificial_uses: { u3949(29){ }u3950(31){ }u3951(64){ }u3952(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1872
;; lr  def 	 715 716
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  gen 	 715 716
;; live  kill	
(note 3902 3899 4352 317 [bb 317] NOTE_INSN_BASIC_BLOCK)
(insn 4352 3902 249 317 (set (reg/v:SI 716 [ err ])
        (const_int 0 [0])) verify.c:132 47 {*movsi_aarch64}
     (nil))
(insn 249 4352 3903 317 (set (reg/v:SI 715 [ err ])
        (const_int 0 [0])) verify.c:132 47 {*movsi_aarch64}
     (nil))
;;  succ:       279 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 623 624 647 668 708 715 716 720 746 752 777 811 1616 1710 1853 1854 1859 1861 1872 1873 1874 1875 1877 1878

;; basic block 318, loop depth 0, count 0, freq 1
;;  prev block 317, next block 319, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       319 [9.0%]  (FALLTHRU)
;; bb 318 artificial_defs: { }
;; bb 318 artificial_uses: { u3953(29){ }u3954(31){ }u3955(64){ }u3956(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 746
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 610
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 746 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 0 [x0] 610
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 3903 249 3904 318 [bb 318] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3904 3903 3905 318 (var_location:SI nedge_traversed (const_int 0 [0])) -1
     (nil))
(debug_insn 3905 3904 3906 318 (var_location:SI err (const_int 0 [0])) -1
     (nil))
(debug_insn 3906 3905 3907 318 (var_location:DI p (reg/v/f:DI 746 [ seen_edge ])) -1
     (nil))
(insn 3907 3906 3908 318 (set (reg:DI 0 x0)
        (reg/v/f:DI 746 [ seen_edge ])) xalloc.c:132 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/v/f:DI 746 [ seen_edge ])
        (nil)))
(call_insn 3908 3907 3909 318 (parallel [
            (call (mem:DI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>) [0 __builtin_free S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) xalloc.c:132 40 {*call_symbol}
     (expr_list:REG_DEAD (reg:DI 0 x0)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f3c5e24c600 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (nil)))))
(debug_insn 3909 3908 263 318 (var_location:DI p (clobber (const_int 0 [0]))) verify.c:174 -1
     (nil))
(insn 263 3909 3913 318 (set (reg/v:SI 610 [ nedge_traversed ])
        (const_int 0 [0])) xalloc.c:132 47 {*movsi_aarch64}
     (nil))
;;  succ:       293 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878

;; basic block 319, loop depth 0, count 0, freq 6
;;  prev block 318, next block 320, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       263 [9.0%]  (FALLTHRU)
;; bb 319 artificial_defs: { }
;; bb 319 artificial_uses: { u3961(29){ }u3962(31){ }u3963(64){ }u3964(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 1861
;; lr  def 	 66 [cc] 610 715
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 624 647 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  gen 	 66 [cc] 610 715
;; live  kill	
(note 3913 263 3914 319 [bb 319] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3914 3913 3915 319 (var_location:DI k (const_int 0 [0])) -1
     (nil))
(debug_insn 3915 3914 256 319 (var_location:SI err (const_int 0 [0])) -1
     (nil))
(insn 256 3915 257 319 (set (reg/v:SI 610 [ nedge_traversed ])
        (const_int 0 [0])) verify.c:160 47 {*movsi_aarch64}
     (nil))
(insn 257 256 3917 319 (set (reg/v:SI 715 [ err ])
        (const_int 0 [0])) verify.c:160 47 {*movsi_aarch64}
     (nil))
(insn 3917 257 3918 319 (set (reg:CC 66 cc)
        (compare:CC (reg:DI 1861 [ D.3798 ])
            (const_int 0 [0]))) verify.c:160 391 {*cmpdi}
     (nil))
(jump_insn 3918 3917 3923 319 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 3916)
            (pc))) verify.c:160 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 3916)
;;  succ:       282 [91.0%] 
;;              318 [9.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 610 624 647 715 746 752 777 811 1616 1710 1853 1854 1859 1861 1875 1877 1878

;; basic block 320, loop depth 0, count 0, freq 46, maybe hot
;;  prev block 319, next block 321, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       218 [4.0%] 
;;              219 [20.8%] 
;; bb 320 artificial_defs: { }
;; bb 320 artificial_uses: { u3967(29){ }u3968(31){ }u3969(64){ }u3970(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 811 1616
;; lr  def 	 66 [cc] 1845 1846 1848 1851 1860
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1875 1877 1878
;; live  gen 	 66 [cc] 1845 1846 1848 1851 1860
;; live  kill	
(code_label 3923 3918 3924 320 134 "" [2 uses])
(note 3924 3923 3925 320 [bb 320] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3925 3924 3926 320 (var_location:DI bfs_tree_in (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3926 3925 3927 320 (var_location:DI max_bfsvtx (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3927 3926 3928 320 (var_location:DI root (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3928 3927 3929 320 (var_location:DI IJ_in (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3929 3928 3930 320 (var_location:DI nedge (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3930 3929 3931 320 (var_location:DI lvldiff (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3931 3930 3932 320 (var_location:DI j (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3932 3931 3933 320 (var_location:DI i (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3933 3932 3934 320 (var_location:DI k (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3934 3933 3935 320 (var_location:DI nv (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3935 3934 3936 320 (var_location:DI level (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3936 3935 3937 320 (var_location:DI seen_edge (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3937 3936 3938 320 (var_location:SI nedge_traversed (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(debug_insn 3938 3937 3939 320 (var_location:SI err (clobber (const_int 0 [0]))) graph500.c:204 -1
     (nil))
(insn 3939 3938 3940 320 (set (reg/f:DI 1860)
        (high:DI (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))) graph500.c:204 48 {*movdi_aarch64}
     (nil))
(insn 3940 3939 3941 320 (set (reg/f:DI 1846)
        (lo_sum:DI (reg/f:DI 1860)
            (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>))) graph500.c:204 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref:DI ("bfs_nedge.lto_priv.15") [flags 0xc2]  <var_decl 0x7f3c5e2542d0 bfs_nedge>)
        (nil)))
(insn 3941 3940 3942 320 (set (reg/f:DI 1845)
        (plus:DI (reg:DI 811 [ D.3805 ])
            (reg/f:DI 1846))) graph500.c:204 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1846)
        (nil)))
(insn 3942 3941 3943 320 (set (reg:DI 1848)
        (const_int -999 [0xfffffffffffffc19])) graph500.c:204 48 {*movdi_aarch64}
     (nil))
(insn 3943 3942 3946 320 (set (mem:DI (reg/f:DI 1845) [4 MEM[symbol: bfs_nedge, index: _1361, offset: 0B]+0 S8 A64])
        (reg:DI 1848)) graph500.c:204 48 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg:DI 1848)
        (expr_list:REG_DEAD (reg/f:DI 1845)
            (nil))))
(insn 3946 3943 3947 320 (set (reg:SI 1851 [ VERBOSE ])
        (mem/c:SI (reg/f:DI 1616) [3 VERBOSE+0 S4 A32])) graph500.c:205 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 1849)
        (nil)))
(insn 3947 3946 3948 320 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1851 [ VERBOSE ])
            (const_int 0 [0]))) graph500.c:205 390 {*cmpsi}
     (expr_list:REG_DEAD (reg:SI 1851 [ VERBOSE ])
        (nil)))
(jump_insn 3948 3947 3951 320 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3696)
            (pc))) graph500.c:205 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9984 (nil)))
 -> 3696)
;;  succ:       295 [99.8%] 
;;              321 [0.2%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 647 752 777 811 1616 1710 1853 1854 1859 1860 1875 1877 1878

;; basic block 321, loop depth 0, count 0, freq 0
;;  prev block 320, next block 322, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       320 [0.2%]  (FALLTHRU,LOOP_EXIT)
;; bb 321 artificial_defs: { }
;; bb 321 artificial_uses: { u3980(29){ }u3981(31){ }u3982(64){ }u3983(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1853
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 712 1856
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 752 1853
;; live  gen 	 712 1856
;; live  kill	
(note 3951 3948 264 321 [bb 321] NOTE_INSN_BASIC_BLOCK)
(insn 264 3951 4204 321 (set (reg:DI 712 [ D.3798 ])
        (const_int -999 [0xfffffffffffffc19])) graph500.c:205 48 {*movdi_aarch64}
     (nil))
(insn 4204 264 3952 321 (set (reg/f:DI 1856)
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) -1
     (nil))
;;  succ:       296 [100.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 712 752 1853 1856

;; basic block 322, loop depth 0, count 0, freq 97, maybe hot
;;  prev block 321, next block 323, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       309 [100.0%]  (FALLTHRU)
;;              133 [100.0%]  (FALLTHRU)
;;              132 [100.0%]  (FALLTHRU)
;; bb 322 artificial_defs: { }
;; bb 322 artificial_uses: { u3985(29){ }u3986(31){ }u3987(64){ }u3988(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 442 443 747 829 831
;; lr  def 	 66 [cc] 443 747 1852
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 829 831 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  gen 	 66 [cc] 443 747 1852
;; live  kill	
(code_label 3952 4204 3953 322 89 "" [0 uses])
(note 3953 3952 3954 322 [bb 322] NOTE_INSN_BASIC_BLOCK)
(debug_insn 3954 3953 3955 322 (var_location:SI tgt_offset (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 3955 3954 3956 322 (var_location:SI src_offset (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 3956 3955 3957 322 (var_location:DI D#31 (ashiftrt:DI (reg/v:DI 442 [ nverts ])
        (const_int 1 [0x1]))) generator/graph_generator.c:149 -1
     (nil))
(debug_insn 3957 3956 3958 322 (var_location:DI nverts (debug_expr:DI D#31)) generator/graph_generator.c:149 -1
     (nil))
(debug_insn 3958 3957 4072 322 (var_location:SI level (clobber (const_int 0 [0]))) generator/graph_generator.c:150 -1
     (nil))
(debug_insn 4072 3958 3959 322 (var_location:DI D#52 (plus:DI (reg/v:DI 747 [ base_src ])
        (reg:DI 831 [ D.3798 ]))) -1
     (nil))
(insn 3959 4072 3960 322 (set (reg/v:DI 747 [ base_src ])
        (plus:DI (reg/v:DI 747 [ base_src ])
            (reg:DI 831 [ D.3798 ]))) generator/graph_generator.c:151 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 831 [ D.3798 ])
        (nil)))
(debug_insn 3960 3959 3961 322 (var_location:DI base_src (debug_expr:DI D#52)) generator/graph_generator.c:151 -1
     (nil))
(insn 3961 3960 3962 322 (set (reg:DI 1852 [ D.3798 ])
        (mult:DI (reg:DI 829 [ D.3798 ])
            (reg/v:DI 442 [ nverts ]))) generator/graph_generator.c:152 363 {muldi3}
     (expr_list:REG_DEAD (reg:DI 829 [ D.3798 ])
        (nil)))
(insn 3962 3961 3964 322 (set (reg/v:DI 443 [ base_tgt ])
        (plus:DI (reg/v:DI 443 [ base_tgt ])
            (reg:DI 1852 [ D.3798 ]))) generator/graph_generator.c:152 95 {*adddi3_aarch64}
     (expr_list:REG_DEAD (reg:DI 1852 [ D.3798 ])
        (nil)))
(debug_insn 3964 3962 3965 322 (var_location:DI base_tgt (reg/v:DI 443 [ base_tgt ])) -1
     (nil))
(debug_insn 3965 3964 3966 322 (var_location:DI base_src (debug_expr:DI D#52)) -1
     (nil))
(debug_insn 3966 3965 3967 322 (var_location:SI level (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 3967 3966 3969 322 (var_location:DI nverts (debug_expr:DI D#31)) -1
     (nil))
(insn 3969 3967 3970 322 (set (reg:CC 66 cc)
        (compare:CC (reg/v:DI 442 [ nverts ])
            (const_int 1 [0x1]))) generator/graph_generator.c:136 391 {*cmpdi}
     (nil))
(jump_insn 3970 3969 3979 322 (set (pc)
        (if_then_else (ne (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 3968)
            (pc))) generator/graph_generator.c:136 7 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 9551 (nil)))
 -> 3968)
;;  succ:       112 [95.5%] 
;;              134 [4.5%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1710 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 245 261 290 432 434 435 438 441 442 443 447 576 695 714 747 750 751 826 1303 1306 1313 1853 1854 1859 1862 1863 1892 1895 1896 1897 1898 1899 1900 1903 1905 1907

;; basic block 323, loop depth 0, count 0, freq 57, maybe hot
;;  prev block 322, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       198 [100.0%]  (FALLTHRU)
;;              148 [100.0%]  (FALLTHRU)
;;              150 [100.0%]  (FALLTHRU)
;; bb 323 artificial_defs: { }
;; bb 323 artificial_uses: { u4001(29){ }u4002(31){ }u4003(64){ }u4004(65){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 240
;; live  gen 	 0 [x0]
;; live  kill	
(note 3979 3970 3977 323 [bb 323] NOTE_INSN_BASIC_BLOCK)
(insn 3977 3979 3978 323 (set (reg/i:SI 0 x0)
        (reg:SI 240 [ D.3797 ])) graph500.c:115 47 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg:SI 240 [ D.3797 ])
        (nil)))
(insn 3978 3977 0 323 (use (reg/i:SI 0 x0)) graph500.c:115 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]

