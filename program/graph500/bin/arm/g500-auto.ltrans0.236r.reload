
;; Function dcmp (dcmp.lto_priv.13, funcdef_no=8, decl_uid=2793, cgraph_uid=0, symbol_order=94)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 29
New elimination table:
Can't eliminate 65 to 31 (offset=16, prev_offset=0)
Can eliminate 65 to 29 (offset=16, prev_offset=0)
Can't eliminate 64 to 31 (offset=0, prev_offset=0)
Can eliminate 64 to 29 (offset=16, prev_offset=0)
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=15,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=22,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) w  (1) m {*movdf_aarch64}
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=15,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=22,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) w  (1) m {*movdf_aarch64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) w  (1) w {*cmpedf}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) w  (1) w {*cmpdf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) M {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=19,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 33:  (0) r  (1) Ush {*movdi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=6: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=7,overall=19,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=20,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 31:  (0) r  (1) Ush {*movdi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) r  (2) S {add_losym_di}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) M {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) r  (1) m {*movdi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) r  (1) M {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) M {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) r {*movsi_aarch64}

********** Pseudo live ranges #1: **********

  BB 5
   Insn 41: point = 0
   Insn 38: point = 0
   Insn 37: point = 0
   Insn 36: point = 1
   Insn 35: point = 1
   Insn 31: point = 2
   Insn 33: point = 3
  BB 8
   Insn 50: point = 4
   Insn 49: point = 4
  BB 6
   Insn 84: point = 6
   Insn 5: point = 6
  BB 7
   Insn 6: point = 7
  BB 4
   Insn 21: point = 8
   Insn 7: point = 8
   Insn 20: point = 9
  BB 3
   Insn 18: point = 11
  BB 2
   Insn 15: point = 12
   Insn 14: point = 12
   Insn 12: point = 12
   Insn 10: point = 13
Compressing live ranges: from 14 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 65 to 31 (offset=16, prev_offset=0)
Can eliminate 65 to 29 (offset=16, prev_offset=0)
Can't eliminate 64 to 31 (offset=0, prev_offset=0)
Can eliminate 64 to 29 (offset=16, prev_offset=0)
changing reg in insn 7
changing reg in insn 6
changing reg in insn 5
changing reg in insn 49
changing reg in insn 10
changing reg in insn 20
changing reg in insn 14
changing reg in insn 11
changing reg in insn 12
changing reg in insn 20
changing reg in insn 14
changing reg in insn 13
changing reg in insn 31
changing reg in insn 35
changing reg in insn 33
changing reg in insn 37


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)


dcmp

Dataflow summary:
;;  invalidated by call 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;;  hardware regs used 	 31 [sp]
;;  regular block artificial uses 	 29 [x29] 31 [sp]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 18 [x18] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp]
;;  exit block uses 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;;  regs ever live 	 0[x0] 1[x1] 2[x2] 16[x16] 17[x17] 29[x29] 30[x30] 31[sp] 32[v0] 33[v1] 66[cc]
;;  ref usage 	r0={9d,7u} r1={4d,3u} r2={5d,2u} r3={3d} r4={3d} r5={3d} r6={3d} r7={3d} r8={3d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={4d} r17={4d} r18={3d} r29={1d,8u} r30={3d} r31={1d,10u} r32={4d,3u} r33={4d,3u} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={1d,1u} r66={4d,3u} 
;;    total ref usage 169{129d,40u,0e} in 34{32 regular + 2 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp]
;; lr  use 	 0 [x0] 1 [x1] 29 [x29] 31 [sp]
;; lr  def 	 32 [v0] 33 [v1] 66 [cc]
;; live  in  	 0 [x0] 1 [x1] 29 [x29] 31 [sp] 64 [sfp]
;; live  gen 	 32 [v0] 33 [v1] 66 [cc]
;; live  kill	
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 8 3 2 NOTE_INSN_DELETED)
(note 3 2 4 2 NOTE_INSN_DELETED)
(note 4 3 62 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 62 4 63 2 (var_location:DI D#6 (reg:DI 0 x0 [ a ])) -1
     (nil))
(debug_insn 63 62 10 2 (var_location:DI D#7 (reg:DI 1 x1 [ b ])) -1
     (nil))
(insn 10 63 11 2 (set (reg/v:DF 33 v1 [orig:74 da ] [74])
        (mem:DF (reg:DI 0 x0 [ a ]) [1 MEM[(const double *)a_3(D)]+0 S8 A64])) graph500.c:239 54 {*movdf_aarch64}
     (nil))
(debug_insn 11 10 12 2 (var_location:DF da (reg/v:DF 33 v1 [orig:74 da ] [74])) graph500.c:239 -1
     (nil))
(insn 12 11 13 2 (set (reg/v:DF 32 v0 [orig:75 db ] [75])
        (mem:DF (reg:DI 1 x1 [ b ]) [1 MEM[(const double *)b_5(D)]+0 S8 A64])) graph500.c:240 54 {*movdf_aarch64}
     (nil))
(debug_insn 13 12 14 2 (var_location:DF db (reg/v:DF 32 v0 [orig:75 db ] [75])) graph500.c:240 -1
     (nil))
(insn 14 13 15 2 (set (reg:CCFPE 66 cc)
        (compare:CCFPE (reg/v:DF 33 v1 [orig:74 da ] [74])
            (reg/v:DF 32 v0 [orig:75 db ] [75]))) graph500.c:241 395 {*cmpedf}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (gt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 53)
            (pc))) graph500.c:241 7 {condjump}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 53)
;;  succ:       6 [39.0%] 
;;              3 [61.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; live  out 	 29 [x29] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]

;; basic block 3, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [61.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; lr  use 	 29 [x29] 31 [sp] 66 [cc]
;; lr  def 	
;; live  in  	 29 [x29] 31 [sp] 32 [v0] 33 [v1] 64 [sfp] 66 [cc]
;; live  gen 	
;; live  kill	
(note 16 15 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 18 16 19 3 (set (pc)
        (if_then_else (lt (reg:CCFPE 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) graph500.c:242 7 {condjump}
     (int_list:REG_BR_PROB 400 (nil))
 -> 57)
;;  succ:       7 [4.0%] 
;;              4 [96.0%]  (FALLTHRU)
;; lr  out 	 29 [x29] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; live  out 	 29 [x29] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]

;; basic block 4, loop depth 0, count 0, freq 5856, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [96.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp] 32 [v0] 33 [v1]
;; lr  def 	 0 [x0] 66 [cc]
;; live  in  	 29 [x29] 31 [sp] 32 [v0] 33 [v1] 64 [sfp]
;; live  gen 	 0 [x0] 66 [cc]
;; live  kill	
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 7 4 (set (reg:CCFP 66 cc)
        (compare:CCFP (reg/v:DF 33 v1 [orig:74 da ] [74])
            (reg/v:DF 32 v0 [orig:75 db ] [75]))) graph500.c:243 393 {*cmpdf}
     (nil))
(insn 7 20 21 4 (set (reg:SI 0 x0 [orig:73 D.3115 ] [73])
        (const_int 0 [0])) graph500.c:243 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 21 7 22 4 (set (pc)
        (if_then_else (eq (reg:CCFP 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 43)
            (pc))) graph500.c:243 7 {condjump}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 43)
;;  succ:       8 [100.0%] 
;;              5 [0.0%]  (FALLTHRU)
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]

;; basic block 5, loop depth 0, count 0, freq 2
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [0.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 31 [sp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc]
;; live  in  	 29 [x29] 31 [sp]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2]
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
(note 22 21 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 32 22 23 5 NOTE_INSN_DELETED)
(debug_insn 23 32 24 5 (var_location:DI D#2 (debug_expr:DI D#6)) -1
     (nil))
(debug_insn 24 23 25 5 (var_location:DI D#3 (debug_expr:DI D#7)) -1
     (nil))
(debug_insn 25 24 26 5 (var_location:DI D#4 (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 26 25 27 5 (var_location:DI b (debug_expr:DI D#4)) -1
     (nil))
(debug_insn 27 26 28 5 (var_location:DI D#5 (clobber (const_int 0 [0])) [uninit]) -1
     (nil))
(debug_insn 28 27 29 5 (var_location:DI a (debug_expr:DI D#5)) -1
     (nil))
(debug_insn 29 28 30 5 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])) graph500.c:244 -1
     (nil))
(debug_insn 30 29 33 5 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)) graph500.c:244 -1
     (nil))
(insn 33 30 31 5 (set (reg/f:DI 0 x0 [83])
        (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))) graph500.c:244 48 {*movdi_aarch64}
     (expr_list:REG_EQUIV (high:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>))
        (nil)))
(insn 31 33 35 5 (set (reg/f:DI 2 x2 [81])
        (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_EQUIV (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))
        (nil)))
(insn 35 31 36 5 (set (reg:DI 2 x2)
        (lo_sum:DI (reg/f:DI 2 x2 [81])
            (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>))) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 836 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7f3c5d9e0e10 *.LC0>)
        (nil)))
(insn 36 35 37 5 (set (reg:SI 1 x1)
        (const_int 1 [0x1])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 47 {*movsi_aarch64}
     (nil))
(insn 37 36 38 5 (set (reg:DI 0 x0)
        (mem/f/c:DI (lo_sum:DI (reg/f:DI 0 x0 [83])
                (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>)) [2 stderr+0 S8 A64])) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 48 {*movdi_aarch64}
     (expr_list:REG_EQUAL (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0xc0]  <var_decl 0x7f3c5e254360 stderr>) [2 stderr+0 S8 A64])
        (nil)))
(call_insn 38 37 39 5 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>) [0 __fprintf_chk S8 A8])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) /usr/aarch64-linux-gnu/include/bits/stdio2.h:97 42 {*call_value_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f3c5e23cd00 __fprintf_chk>)
        (nil))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:SI (use (reg:SI 1 x1))
                    (expr_list:DI (use (reg:DI 2 x2))
                        (nil)))))))
(debug_insn 39 38 40 5 (var_location:DI __stream (clobber (const_int 0 [0]))) graph500.c:244 -1
     (nil))
(debug_insn 40 39 41 5 (var_location:DI __fmt (clobber (const_int 0 [0]))) graph500.c:244 -1
     (nil))
(call_insn 41 40 42 5 (parallel [
            (call (mem:DI (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>) [0 __builtin_abort S8 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:DI 30 x30))
        ]) graph500.c:245 40 {*call_symbol}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("abort") [flags 0x41]  <function_decl 0x7f3c5e23ce00 abort>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
;;  succ:      
;; lr  out 	 31 [sp]
;; live  out 	 31 [sp]

(barrier 42 41 53)
;; basic block 6, loop depth 0, count 0, freq 3900, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [39.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp]
;; live  gen 	 0 [x0]
;; live  kill	
(code_label 53 42 52 6 3 "" [1 uses])
(note 52 53 5 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 5 52 84 6 (set (reg:SI 0 x0 [orig:73 D.3115 ] [73])
        (const_int 1 [0x1])) graph500.c:241 47 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(jump_insn 84 5 85 6 (set (pc)
        (label_ref 43)) 2 {jump}
     (nil)
 -> 43)
;;  succ:       8 [100.0%] 
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]

(barrier 85 84 57)
;; basic block 7, loop depth 0, count 0, freq 244, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [4.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp]
;; lr  use 	 29 [x29] 31 [sp]
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp]
;; live  gen 	 0 [x0]
;; live  kill	
(code_label 57 85 56 7 4 "" [1 uses])
(note 56 57 6 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 6 56 43 7 (set (reg:SI 0 x0 [orig:73 D.3115 ] [73])
        (const_int -1 [0xffffffffffffffff])) graph500.c:242 47 {*movsi_aarch64}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]

;; basic block 8, loop depth 0, count 0, freq 9998, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [100.0%] 
;;              7 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(29){ }u-1(31){ }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; lr  use 	 0 [x0] 29 [x29] 31 [sp]
;; lr  def 	 0 [x0]
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; live  gen 	 0 [x0]
;; live  kill	
(code_label 43 6 44 8 2 "" [2 uses])
(note 44 43 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 44 50 8 (set (reg/i:SI 0 x0)
        (reg:SI 0 x0 [orig:73 D.3115 ] [73])) graph500.c:247 47 {*movsi_aarch64}
     (nil))
(insn 50 49 86 8 (use (reg/i:SI 0 x0)) graph500.c:247 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]

(note 86 50 87 NOTE_INSN_DELETED)
(note 87 86 0 NOTE_INSN_DELETED)
